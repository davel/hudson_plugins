Index: pom.xml
===================================================================
--- pom.xml	(revision 20976)
+++ pom.xml	(working copy)
@@ -116,7 +116,7 @@
 	</dependencyManagement>
 
 	<properties>
-		<drools.version>5.0.1</drools.version>
+		<drools.version>5.1.0.M1</drools.version>
 		<hudson.version>1.318</hudson.version>
 	</properties>
 
Index: src/main/java/hudson/drools/AbstractProcessInstanceMarshaller.java
===================================================================
--- src/main/java/hudson/drools/AbstractProcessInstanceMarshaller.java	(revision 0)
+++ src/main/java/hudson/drools/AbstractProcessInstanceMarshaller.java	(revision 0)
@@ -0,0 +1,459 @@
+package hudson.drools;
+
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.drools.common.InternalRuleBase;
+import org.drools.common.InternalWorkingMemory;
+import org.drools.marshalling.impl.MarshallerReaderContext;
+import org.drools.marshalling.impl.MarshallerWriteContext;
+import org.drools.marshalling.impl.PersisterEnums;
+import org.drools.marshalling.impl.ProcessInstanceMarshaller;
+import org.drools.process.core.Context;
+import org.drools.process.core.Process;
+import org.drools.process.core.context.swimlane.SwimlaneContext;
+import org.drools.process.core.context.variable.VariableScope;
+import org.drools.process.instance.context.swimlane.SwimlaneContextInstance;
+import org.drools.process.instance.context.variable.VariableScopeInstance;
+import org.drools.runtime.process.NodeInstance;
+import org.drools.runtime.process.NodeInstanceContainer;
+import org.drools.runtime.process.ProcessInstance;
+import org.drools.workflow.instance.WorkflowProcessInstance;
+import org.drools.workflow.instance.impl.NodeInstanceImpl;
+import org.drools.workflow.instance.impl.WorkflowProcessInstanceImpl;
+import org.drools.workflow.instance.node.CompositeContextNodeInstance;
+import org.drools.workflow.instance.node.ForEachNodeInstance;
+import org.drools.workflow.instance.node.HumanTaskNodeInstance;
+import org.drools.workflow.instance.node.JoinInstance;
+import org.drools.workflow.instance.node.MilestoneNodeInstance;
+import org.drools.workflow.instance.node.RuleSetNodeInstance;
+import org.drools.workflow.instance.node.StateNodeInstance;
+import org.drools.workflow.instance.node.SubProcessNodeInstance;
+import org.drools.workflow.instance.node.TimerNodeInstance;
+import org.drools.workflow.instance.node.WorkItemNodeInstance;
+
+/**
+ * Default implementation of a process instance marshaller.
+ * 
+ * @author <a href="mailto:kris_verlaenen@hotmail.com">Kris Verlaenen</a>
+ * @author mfossati
+ * @author salaboy
+ */
+public abstract class AbstractProcessInstanceMarshaller implements
+        ProcessInstanceMarshaller {
+
+    // Output methods
+    public void writeProcessInstance(MarshallerWriteContext context,
+            ProcessInstance processInstance) throws IOException {
+        writeProcessInstance(context, processInstance, true);
+    }
+
+    public void writeProcessInstance(MarshallerWriteContext context,
+            ProcessInstance processInstance, boolean includeVariables) throws IOException {
+
+        WorkflowProcessInstanceImpl workFlow = (WorkflowProcessInstanceImpl) processInstance;
+        ObjectOutputStream stream = context.stream;
+        stream.writeLong(workFlow.getId());
+        stream.writeUTF(workFlow.getProcessId());
+        stream.writeInt(workFlow.getState());
+        stream.writeLong(workFlow.getNodeInstanceCounter());
+        if (includeVariables) {
+            VariableScopeInstance variableScopeInstance = (VariableScopeInstance) workFlow.getContextInstance(VariableScope.VARIABLE_SCOPE);
+            Map<String, Object> variables = variableScopeInstance.getVariables();
+            List<String> keys = new ArrayList<String>(variables.keySet());
+            Collections.sort(keys,
+                    new Comparator<String>() {
+
+                        public int compare(String o1,
+                                String o2) {
+                            return o1.compareTo(o2);
+                        }
+                    });
+            stream.writeInt(keys.size());
+            for (String key : keys) {
+                stream.writeUTF(key);
+                // TOM: CHANGED
+                Object object = variables.get(key);
+				writeVariable(stream, object);
+            }
+        }
+
+        SwimlaneContextInstance swimlaneContextInstance = (SwimlaneContextInstance) workFlow.getContextInstance(SwimlaneContext.SWIMLANE_SCOPE);
+
+        if (swimlaneContextInstance != null) {
+            Map<String, String> swimlaneActors = swimlaneContextInstance.getSwimlaneActors();
+            stream.writeInt(swimlaneActors.size());
+            for (Map.Entry<String, String> entry : swimlaneActors.entrySet()) {
+                stream.writeUTF(entry.getKey());
+                stream.writeUTF(entry.getValue());
+            }
+        } else {
+            stream.writeInt(0);
+        }
+        List<NodeInstance> nodeInstances = new ArrayList<NodeInstance>(workFlow.getNodeInstances());
+        Collections.sort(nodeInstances,
+                new Comparator<NodeInstance>() {
+
+                    public int compare(NodeInstance o1,
+                            NodeInstance o2) {
+                        return (int) (o1.getId() - o2.getId());
+                    }
+                });
+        for (NodeInstance nodeInstance : nodeInstances) {
+            stream.writeShort(PersisterEnums.NODE_INSTANCE);
+            writeNodeInstance(context,
+                    nodeInstance);
+        }
+        stream.writeShort(PersisterEnums.END);
+    }
+
+    public void writeNodeInstance(MarshallerWriteContext context,
+            NodeInstance nodeInstance) throws IOException {
+        ObjectOutputStream stream = context.stream;
+        stream.writeLong(nodeInstance.getId());
+        stream.writeLong(nodeInstance.getNodeId());
+        writeNodeInstanceContent(stream, nodeInstance, context);
+    }
+
+    protected void writeNodeInstanceContent(ObjectOutputStream stream,
+            NodeInstance nodeInstance, MarshallerWriteContext context)
+            throws IOException {
+        if (nodeInstance instanceof RuleSetNodeInstance) {
+            stream.writeShort(PersisterEnums.RULE_SET_NODE_INSTANCE);
+        } else if (nodeInstance instanceof HumanTaskNodeInstance) {
+            stream.writeShort(PersisterEnums.HUMAN_TASK_NODE_INSTANCE);
+            stream.writeLong(((HumanTaskNodeInstance) nodeInstance).getWorkItemId());
+        } else if (nodeInstance instanceof WorkItemNodeInstance) {
+            stream.writeShort(PersisterEnums.WORK_ITEM_NODE_INSTANCE);
+            stream.writeLong(((WorkItemNodeInstance) nodeInstance).getWorkItemId());
+        } else if (nodeInstance instanceof SubProcessNodeInstance) {
+            stream.writeShort(PersisterEnums.SUB_PROCESS_NODE_INSTANCE);
+            stream.writeLong(((SubProcessNodeInstance) nodeInstance).getProcessInstanceId());
+        } else if (nodeInstance instanceof MilestoneNodeInstance) {
+            stream.writeShort(PersisterEnums.MILESTONE_NODE_INSTANCE);
+            List<Long> timerInstances =
+                    ((MilestoneNodeInstance) nodeInstance).getTimerInstances();
+            if (timerInstances != null) {
+                stream.writeInt(timerInstances.size());
+                for (Long id : timerInstances) {
+                    stream.writeLong(id);
+                }
+            } else {
+                stream.writeInt(0);
+            }
+        } else if (nodeInstance instanceof TimerNodeInstance) {
+            stream.writeShort(PersisterEnums.TIMER_NODE_INSTANCE);
+            stream.writeLong(((TimerNodeInstance) nodeInstance).getTimerId());
+        } else if (nodeInstance instanceof JoinInstance) {
+            stream.writeShort(PersisterEnums.JOIN_NODE_INSTANCE);
+            Map<Long, Integer> triggers = ((JoinInstance) nodeInstance).getTriggers();
+            stream.writeInt(triggers.size());
+            List<Long> keys = new ArrayList<Long>(triggers.keySet());
+            Collections.sort(keys,
+                    new Comparator<Long>() {
+
+                        public int compare(Long o1,
+                                Long o2) {
+                            return o1.compareTo(o2);
+                        }
+                    });
+            for (Long key : keys) {
+                stream.writeLong(key);
+                stream.writeInt(triggers.get(key));
+            }
+        } else if (nodeInstance instanceof CompositeContextNodeInstance) {
+            stream.writeShort(PersisterEnums.COMPOSITE_NODE_INSTANCE);
+            CompositeContextNodeInstance compositeNodeInstance = (CompositeContextNodeInstance) nodeInstance;
+            List<Long> timerInstances =
+                    ((CompositeContextNodeInstance) nodeInstance).getTimerInstances();
+            if (timerInstances != null) {
+                stream.writeInt(timerInstances.size());
+                for (Long id : timerInstances) {
+                    stream.writeLong(id);
+                }
+            } else {
+                stream.writeInt(0);
+            }
+            VariableScopeInstance variableScopeInstance = (VariableScopeInstance) compositeNodeInstance.getContextInstance(VariableScope.VARIABLE_SCOPE);
+            Map<String, Object> variables = variableScopeInstance.getVariables();
+            List<String> keys = new ArrayList<String>(variables.keySet());
+            Collections.sort(keys,
+                    new Comparator<String>() {
+
+                        public int compare(String o1,
+                                String o2) {
+                            return o1.compareTo(o2);
+                        }
+                    });
+            stream.writeInt(keys.size());
+            for (String key : keys) {
+                stream.writeUTF(key);
+                stream.writeObject(variables.get(key));
+            }
+            List<NodeInstance> nodeInstances = new ArrayList<NodeInstance>(compositeNodeInstance.getNodeInstances());
+            Collections.sort(nodeInstances,
+                    new Comparator<NodeInstance>() {
+
+                        public int compare(NodeInstance o1,
+                                NodeInstance o2) {
+                            return (int) (o1.getId() - o2.getId());
+                        }
+                    });
+            for (NodeInstance subNodeInstance : nodeInstances) {
+                stream.writeShort(PersisterEnums.NODE_INSTANCE);
+                writeNodeInstance(context,
+                        subNodeInstance);
+            }
+            stream.writeShort(PersisterEnums.END);
+        } else if (nodeInstance instanceof ForEachNodeInstance) {
+            stream.writeShort(PersisterEnums.FOR_EACH_NODE_INSTANCE);
+            ForEachNodeInstance forEachNodeInstance = (ForEachNodeInstance) nodeInstance;
+            List<NodeInstance> nodeInstances = new ArrayList<NodeInstance>(forEachNodeInstance.getNodeInstances());
+            Collections.sort(nodeInstances,
+                    new Comparator<NodeInstance>() {
+
+                        public int compare(NodeInstance o1,
+                                NodeInstance o2) {
+                            return (int) (o1.getId() - o2.getId());
+                        }
+                    });
+            for (NodeInstance subNodeInstance : nodeInstances) {
+                if (subNodeInstance instanceof CompositeContextNodeInstance) {
+                    stream.writeShort(PersisterEnums.NODE_INSTANCE);
+                    writeNodeInstance(context,
+                            subNodeInstance);
+                }
+            }
+            stream.writeShort(PersisterEnums.END);
+        } else if (nodeInstance instanceof StateNodeInstance) {
+            stream.writeShort(PersisterEnums.STATE_NODE_INSTANCE);
+            List<Long> timerInstances =
+                    ((StateNodeInstance) nodeInstance).getTimerInstances();
+            if (timerInstances != null) {
+                stream.writeInt(timerInstances.size());
+                for (Long id : timerInstances) {
+                    stream.writeLong(id);
+                }
+            } else {
+                stream.writeInt(0);
+            }
+        } else {
+            throw new IllegalArgumentException("Unknown node instance type: " + nodeInstance);
+        }
+    }
+
+    // Input methods
+    public ProcessInstance readProcessInstance(MarshallerReaderContext context) throws IOException {
+        return readProcessInstance(context, true);
+    }
+
+    public ProcessInstance readProcessInstance(MarshallerReaderContext context, boolean includeVariables) throws IOException {
+        ObjectInputStream stream = context.stream;
+        InternalRuleBase ruleBase = context.ruleBase;
+        InternalWorkingMemory wm = context.wm;
+
+        WorkflowProcessInstanceImpl processInstance = createProcessInstance();
+        processInstance.setId(stream.readLong());
+        String processId = stream.readUTF();
+        processInstance.setProcessId(processId);
+        Process process = ruleBase.getProcess(processId);
+        if (ruleBase != null) {
+            processInstance.setProcess(process);
+        }
+        processInstance.setState(stream.readInt());
+        long nodeInstanceCounter = stream.readLong();
+        processInstance.setWorkingMemory(wm);
+        if (includeVariables) {
+            int nbVariables = stream.readInt();
+            if (nbVariables > 0) {
+                Context variableScope = process.getDefaultContext(VariableScope.VARIABLE_SCOPE);
+                VariableScopeInstance variableScopeInstance = (VariableScopeInstance) processInstance.getContextInstance(variableScope);
+                for (int i = 0; i < nbVariables; i++) {
+                    String name = stream.readUTF();
+                    try {
+                        // TOM: CHANGED
+                        Object value = readVariable(stream);
+                        variableScopeInstance.setVariable(name, value);
+                    } catch (ClassNotFoundException e) {
+                        throw new IllegalArgumentException(
+                                "Could not reload variable " + name);
+                    }
+                }
+            }
+        }
+
+        int nbSwimlanes = stream.readInt();
+        if (nbSwimlanes > 0) {
+            Context swimlaneContext = process.getDefaultContext(SwimlaneContext.SWIMLANE_SCOPE);
+            SwimlaneContextInstance swimlaneContextInstance = (SwimlaneContextInstance) processInstance.getContextInstance(swimlaneContext);
+            for (int i = 0; i < nbSwimlanes; i++) {
+                String name = stream.readUTF();
+                String value = stream.readUTF();
+                swimlaneContextInstance.setActorId(name, value);
+            }
+        }
+
+        while (stream.readShort() == PersisterEnums.NODE_INSTANCE) {
+            readNodeInstance(context, processInstance, processInstance);
+        }
+
+        processInstance.internalSetNodeInstanceCounter(nodeInstanceCounter);
+        if (wm != null) {
+            processInstance.reconnect();
+        }
+        return processInstance;
+    }
+
+    protected abstract WorkflowProcessInstanceImpl createProcessInstance();
+
+    public NodeInstance readNodeInstance(MarshallerReaderContext context,
+            NodeInstanceContainer nodeInstanceContainer,
+            WorkflowProcessInstance processInstance) throws IOException {
+        ObjectInputStream stream = context.stream;
+        long id = stream.readLong();
+        long nodeId = stream.readLong();
+        int nodeType = stream.readShort();
+        NodeInstanceImpl nodeInstance = readNodeInstanceContent(nodeType,
+                stream, context, processInstance);
+
+        nodeInstance.setNodeId(nodeId);
+        nodeInstance.setNodeInstanceContainer(nodeInstanceContainer);
+        nodeInstance.setProcessInstance(processInstance);
+        nodeInstance.setId(id);
+
+        switch (nodeType) {
+            case PersisterEnums.COMPOSITE_NODE_INSTANCE:
+                int nbVariables = stream.readInt();
+                if (nbVariables > 0) {
+                    Context variableScope = ((org.drools.process.core.Process) processInstance.getProcess()).getDefaultContext(VariableScope.VARIABLE_SCOPE);
+                    VariableScopeInstance variableScopeInstance = (VariableScopeInstance) ((CompositeContextNodeInstance) nodeInstance).getContextInstance(variableScope);
+                    for (int i = 0; i < nbVariables; i++) {
+                        String name = stream.readUTF();
+                        try {
+                            Object value = readVariable(stream);
+                            variableScopeInstance.setVariable(name,
+                                    value);
+                        } catch (ClassNotFoundException e) {
+                            throw new IllegalArgumentException("Could not reload variable " + name);
+                        }
+                    }
+                }
+                while (stream.readShort() == PersisterEnums.NODE_INSTANCE) {
+                    readNodeInstance(context,
+                            (CompositeContextNodeInstance) nodeInstance,
+                            processInstance);
+                }
+                break;
+            case PersisterEnums.FOR_EACH_NODE_INSTANCE:
+                while (stream.readShort() == PersisterEnums.NODE_INSTANCE) {
+                    readNodeInstance(context,
+                            (ForEachNodeInstance) nodeInstance,
+                            processInstance);
+                }
+                break;
+            default:
+            // do nothing
+        }
+
+        return nodeInstance;
+    }
+
+    protected NodeInstanceImpl readNodeInstanceContent(int nodeType,
+            ObjectInputStream stream, MarshallerReaderContext context,
+            WorkflowProcessInstance processInstance) throws IOException {
+        NodeInstanceImpl nodeInstance = null;
+        switch (nodeType) {
+            case PersisterEnums.RULE_SET_NODE_INSTANCE:
+                nodeInstance = new RuleSetNodeInstance();
+                break;
+            case PersisterEnums.HUMAN_TASK_NODE_INSTANCE:
+                nodeInstance = new HumanTaskNodeInstance();
+                ((HumanTaskNodeInstance) nodeInstance).internalSetWorkItemId(stream.readLong());
+                break;
+            case PersisterEnums.WORK_ITEM_NODE_INSTANCE:
+                nodeInstance = new WorkItemNodeInstance();
+                ((WorkItemNodeInstance) nodeInstance).internalSetWorkItemId(stream.readLong());
+                break;
+            case PersisterEnums.SUB_PROCESS_NODE_INSTANCE:
+                nodeInstance = new SubProcessNodeInstance();
+                ((SubProcessNodeInstance) nodeInstance).internalSetProcessInstanceId(stream.readLong());
+                break;
+            case PersisterEnums.MILESTONE_NODE_INSTANCE:
+                nodeInstance = new MilestoneNodeInstance();
+                int nbTimerInstances = stream.readInt();
+                if (nbTimerInstances > 0) {
+                    List<Long> timerInstances = new ArrayList<Long>();
+                    for (int i = 0; i < nbTimerInstances; i++) {
+                        timerInstances.add(stream.readLong());
+                    }
+                    ((MilestoneNodeInstance) nodeInstance).internalSetTimerInstances(timerInstances);
+                }
+                break;
+            case PersisterEnums.TIMER_NODE_INSTANCE:
+                nodeInstance = new TimerNodeInstance();
+                ((TimerNodeInstance) nodeInstance).internalSetTimerId(stream.readLong());
+                break;
+            case PersisterEnums.JOIN_NODE_INSTANCE:
+                nodeInstance = new JoinInstance();
+                int number = stream.readInt();
+                if (number > 0) {
+                    Map<Long, Integer> triggers = new HashMap<Long, Integer>();
+                    for (int i = 0; i < number; i++) {
+                        long l = stream.readLong();
+                        int count = stream.readInt();
+                        triggers.put(l,
+                                count);
+                    }
+                    ((JoinInstance) nodeInstance).internalSetTriggers(triggers);
+                }
+                break;
+            case PersisterEnums.COMPOSITE_NODE_INSTANCE:
+                nodeInstance = new CompositeContextNodeInstance();
+                nbTimerInstances = stream.readInt();
+                if (nbTimerInstances > 0) {
+                    List<Long> timerInstances = new ArrayList<Long>();
+                    for (int i = 0; i < nbTimerInstances; i++) {
+                        timerInstances.add(stream.readLong());
+                    }
+                    ((CompositeContextNodeInstance) nodeInstance).internalSetTimerInstances(timerInstances);
+                }
+                break;
+            case PersisterEnums.FOR_EACH_NODE_INSTANCE:
+                nodeInstance = new ForEachNodeInstance();
+                break;
+            case PersisterEnums.STATE_NODE_INSTANCE:
+                nodeInstance = new StateNodeInstance();
+                nbTimerInstances = stream.readInt();
+                if (nbTimerInstances > 0) {
+                    List<Long> timerInstances = new ArrayList<Long>();
+                    for (int i = 0; i < nbTimerInstances; i++) {
+                        timerInstances.add(stream.readLong());
+                    }
+                    ((CompositeContextNodeInstance) nodeInstance).internalSetTimerInstances(timerInstances);
+                }
+                break;
+            default:
+                throw new IllegalArgumentException("Unknown node type: " + nodeType);
+        }
+        return nodeInstance;
+
+    }
+
+    // TOM: ADDED
+	protected void writeVariable(ObjectOutputStream stream, Object object) throws IOException {
+		stream.writeObject(object);
+	}
+
+    // TOM: ADDED
+	protected Object readVariable(ObjectInputStream stream) throws IOException, ClassNotFoundException {
+		return stream.readObject();
+	}
+	
+}
Index: src/main/java/hudson/drools/BuildWorkItemHandler.java
===================================================================
--- src/main/java/hudson/drools/BuildWorkItemHandler.java	(revision 20976)
+++ src/main/java/hudson/drools/BuildWorkItemHandler.java	(working copy)
@@ -2,6 +2,7 @@
 
 import hudson.model.BooleanParameterValue;
 import hudson.model.ParameterValue;
+import hudson.model.Run;
 import hudson.model.RunParameterValue;
 import hudson.model.StringParameterValue;
 
@@ -48,18 +49,25 @@
 				values.add(new BooleanParameterValue(parameter.getKey(),
 						(Boolean) parameter.getValue(), "drools parameter"));
 			}
-			if (parameter.getValue() instanceof RunWrapper) {
+			if (parameter.getValue() instanceof Run<?,?>) {
 				values.add(new RunParameterValue(parameter.getKey(),
-						((RunWrapper) parameter.getValue()).getRun()
-								.getExternalizableId(), "drools parameter"));
+						((Run<?,?>) parameter.getValue()).getExternalizableId(), "drools parameter"));
 			}
 		}
 
-		new WorkItemAction(project.getName(), workItem.getId(), workItem
-				.getProcessInstanceId(), projectName,
-				completeWhenFailed != null ? completeWhenFailed : false,
-				completeWhenUnstable != null ? completeWhenUnstable : false,
-				values).scheduleBuild();
+		try {
+			new WorkItemAction(
+					project.getName(),
+					workItem.getId(),
+					workItem.getProcessInstanceId(),
+					projectName,
+					completeWhenFailed != null ? completeWhenFailed : false,
+					completeWhenUnstable != null ? completeWhenUnstable : false,
+					values).scheduleBuild();
+		} catch (Exception e) {
+			DroolsRun run = project.getFromProcessInstance(workItem.getProcessInstanceId());
+			e.printStackTrace(run.getLogWriter());
+		}
 
 	}
 
Index: src/main/java/hudson/drools/CompleteWorkItemCallable.java
===================================================================
--- src/main/java/hudson/drools/CompleteWorkItemCallable.java	(revision 20976)
+++ src/main/java/hudson/drools/CompleteWorkItemCallable.java	(working copy)
@@ -19,7 +19,7 @@
 		this.workItemId = workItemId;
 
 		results = new HashMap<String, Object>();
-		results.put(Constants.BUILD, new RunWrapper(run));
+		results.put(Constants.BUILD, run);
 	}
 
 	public CompleteWorkItemCallable(
Index: src/main/java/hudson/drools/DroolsItemListener.java
===================================================================
--- src/main/java/hudson/drools/DroolsItemListener.java	(revision 0)
+++ src/main/java/hudson/drools/DroolsItemListener.java	(revision 0)
@@ -0,0 +1,23 @@
+package hudson.drools;
+
+import hudson.Extension;
+import hudson.model.Hudson;
+import hudson.model.TopLevelItem;
+import hudson.model.listeners.ItemListener;
+
+@Extension
+public class DroolsItemListener extends ItemListener {
+
+	@Override
+	public void onLoaded() {
+		for (TopLevelItem item: Hudson.getInstance().getItems()) {
+			if (item instanceof DroolsProject) {
+				DroolsProject p = (DroolsProject) item;
+				p.initialize();
+			}
+		}
+		
+		
+	}
+	
+}
Index: src/main/java/hudson/drools/DroolsProject.java
===================================================================
--- src/main/java/hudson/drools/DroolsProject.java	(revision 20976)
+++ src/main/java/hudson/drools/DroolsProject.java	(working copy)
@@ -1,6 +1,7 @@
 package hudson.drools;
 
 import hudson.Extension;
+import hudson.drools.renderer.RuleFlowRenderer;
 import hudson.model.AbstractProject;
 import hudson.model.Action;
 import hudson.model.BuildableItem;
@@ -39,6 +40,7 @@
 
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang.StringUtils;
+import org.apache.tools.ant.taskdefs.condition.Http;
 import org.dom4j.DocumentException;
 import org.drools.logger.KnowledgeRuntimeLoggerFactory;
 import org.drools.runtime.process.ProcessInstance;
@@ -51,377 +53,402 @@
 import antlr.ANTLRException;
 
 public class DroolsProject extends Job<DroolsProject, DroolsRun> implements
-		TopLevelItem, hudson.model.Queue.Task, BuildableItem {
+        TopLevelItem, hudson.model.Queue.Task, BuildableItem {
 
-	private boolean disabled;
-	private String processXML;
+    private boolean disabled;
+    private String processXML;
 
-	private transient DroolsSession session;
+    private transient DroolsSession session;
 
-	private String triggerSpec;
-	private transient CronTabList tabs;
+    private String triggerSpec;
+    private transient CronTabList tabs;
 
-	private List<Script> scripts = new ArrayList<Script>();
+    private List<Script> scripts = new ArrayList<Script>();
 
-	/**
-	 * All the builds keyed by their build number.
-	 */
-	protected transient/* almost final */RunMap<DroolsRun> builds = new RunMap<DroolsRun>();
+    /**
+     * All the builds keyed by their build number.
+     */
+    protected transient/* almost final */RunMap<DroolsRun> builds = new RunMap<DroolsRun>();
 
-	protected DroolsProject(ItemGroup<?> parent, String name) {
-		super(parent, name);
-	}
+    protected DroolsProject(ItemGroup<?> parent, String name) {
+        super(parent, name);
+    }
 
-	@Override
-	protected SortedMap<Integer, ? extends DroolsRun> _getRuns() {
-		return builds.getView();
-	}
+    @Override
+    protected SortedMap<Integer, ? extends DroolsRun> _getRuns() {
+        return builds.getView();
+    }
 
-	@Override
-	public boolean isBuildable() {
-		return true;
-	}
+    @Override
+    public boolean isBuildable() {
+        return true;
+    }
 
-	@Override
-	protected void removeRun(DroolsRun run) {
-		this.builds.remove(run);
-	}
+    @Override
+    protected void removeRun(DroolsRun run) {
+        this.builds.remove(run);
+    }
 
-	@Override
-	public void onLoad(ItemGroup<? extends Item> parent, String name)
-			throws IOException {
-		super.onLoad(parent, name);
+    @Override
+    public void onLoad(ItemGroup<? extends Item> parent, String name)
+            throws IOException {
+        super.onLoad(parent, name);
 
-		this.builds = new RunMap<DroolsRun>();
-		this.builds.load(this, new Constructor<DroolsRun>() {
-			public DroolsRun create(File dir) throws IOException {
-				DroolsRun newBuild = new DroolsRun(DroolsProject.this, dir);
-				builds.put(newBuild);
-				return newBuild;
-			}
-		});
+        this.builds = new RunMap<DroolsRun>();
+        this.builds.load(this, new Constructor<DroolsRun>() {
+            public DroolsRun create(File dir) throws IOException {
+                DroolsRun newBuild = new DroolsRun(DroolsProject.this, dir);
+                builds.put(newBuild);
+                return newBuild;
+            }
+        });
+        
+    }
+    
+    public void initialize() {
+        try {
+            set(triggerSpec, processXML, scripts);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+    
+    private int getMaxProcessInstanceId() {
+    	int max = 0;
+    	for (DroolsRun build: builds.values()) {
+    		max = Math.max(max, (int) build.getProcessInstanceId());
+    	}
+    	return max;
+    }
 
-		try {
-			set(triggerSpec, processXML, scripts);
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
+    void set(String triggerSpec, String processXML, List<Script> scripts)
+            throws IOException {
+        ClassLoader cl = Thread.currentThread().getContextClassLoader();
+        Thread.currentThread().setContextClassLoader(
+                PluginImpl.class.getClassLoader());
+        try {
+        	int initialId = getMaxProcessInstanceId() + 1;
+            DroolsSession session = processXML != null ? new DroolsSession(
+                    new File(getRootDir(), "session.ser"), processXML, initialId) : null;
 
-	}
+            CronTabList tabs = null;
+            if (!StringUtils.isEmpty(triggerSpec)) {
+                try {
+                    tabs = CronTabList.create(triggerSpec);
+                } catch (ANTLRException e) {
+                    e.printStackTrace();
+                }
+            } else {
+                tabs = null;
+                triggerSpec = null;
+            }
 
-	void set(String triggerSpec, String processXML, List<Script> scripts)
-			throws IOException {
-		ClassLoader cl = Thread.currentThread().getContextClassLoader();
-		Thread.currentThread().setContextClassLoader(
-				PluginImpl.class.getClassLoader());
-		try {
-			DroolsSession session = processXML != null ? new DroolsSession(
-					new File(getRootDir(), "session.ser"), processXML) : null;
+            // all is well -- let's commit
+            this.processXML = processXML;
+            this.session = session;
+            this.triggerSpec = triggerSpec;
+            this.tabs = tabs;
+            this.scripts = scripts != null ? scripts : new ArrayList<Script>();
 
-			CronTabList tabs = null;
-			if (!StringUtils.isEmpty(triggerSpec)) {
-				try {
-					tabs = CronTabList.create(triggerSpec);
-				} catch (ANTLRException e) {
-					e.printStackTrace();
-				}
-			} else {
-				tabs = null;
-				triggerSpec = null;
-			}
+            WorkItemManager workItemManager = session.getSession()
+                    .getWorkItemManager();
+            workItemManager.registerWorkItemHandler("Build",
+                    new BuildWorkItemHandler(this));
+            workItemManager.registerWorkItemHandler("Human Task",
+                    new HumanTaskHandler(this));
+            workItemManager.registerWorkItemHandler("Script",
+                    new ScriptHandler(this));
+            workItemManager.registerWorkItemHandler("E-Mail",
+                    new EmailWorkItemHandler());
 
-			// all is well -- let's commit
-			this.processXML = processXML;
-			this.session = session;
-			this.triggerSpec = triggerSpec;
-			this.tabs = tabs;
-			this.scripts = scripts != null ? scripts : new ArrayList<Script>();
+            KnowledgeRuntimeLoggerFactory
+                    .newConsoleLogger(session.getSession());
+            new WorkingMemoryHudsonLogger(session.getSession(), this);
 
-			WorkItemManager workItemManager = session.getSession()
-					.getWorkItemManager();
-			workItemManager.registerWorkItemHandler("Build",
-					new BuildWorkItemHandler(this));
-			workItemManager.registerWorkItemHandler("Human Task",
-					new HumanTaskHandler(this));
-			workItemManager.registerWorkItemHandler("Script",
-					new ScriptHandler(this));
-			workItemManager.registerWorkItemHandler("E-Mail",
-					new EmailWorkItemHandler());
+        } finally {
+            Thread.currentThread().setContextClassLoader(cl);
+        }
+    }
 
-			KnowledgeRuntimeLoggerFactory
-					.newConsoleLogger(session.getSession());
-			new WorkingMemoryHudsonLogger(session.getSession(), this);
+    @Extension
+    public static final class DescriptorImpl extends TopLevelItemDescriptor {
 
-		} finally {
-			Thread.currentThread().setContextClassLoader(cl);
-		}
-	}
+        @Override
+        public String getDisplayName() {
+            return "Drools Project";
+        }
 
-	@Extension
-	public static final class DescriptorImpl extends TopLevelItemDescriptor {
+        @Override
+        public DroolsProject newInstance(String name) {
+            return new DroolsProject(Hudson.getInstance(), name);
+        }
 
-		@Override
-		public String getDisplayName() {
-			return "Drools Project";
-		}
+    }
 
-		@Override
-		public DroolsProject newInstance(String name) {
-			return new DroolsProject(Hudson.getInstance(), name);
-		}
+    public DescriptorImpl getDescriptor() {
+        return (DescriptorImpl) Hudson.getInstance().getDescriptor(
+                DroolsProject.class);
+    }
 
-	}
+    @Override
+    public Hudson getParent() {
+        return Hudson.getInstance();
+    }
 
-	public DescriptorImpl getDescriptor() {
-		return (DescriptorImpl) Hudson.getInstance().getDescriptor(
-				DroolsProject.class);
-	}
+    @Override
+    public synchronized void doConfigSubmit(StaplerRequest req,
+            StaplerResponse rsp) throws IOException, ServletException {
+        checkPermission(CONFIGURE);
 
-	@Override
-	public Hudson getParent() {
-		return Hudson.getInstance();
-	}
+        JSONObject form = req.getSubmittedForm();
+        String processXML = form.getString("processXML");
+        String triggerSpec = form.getString("triggerSpec");
+        List<Script> scripts = req.bindJSONToList(Script.class, form
+                .get("scripts"));
 
-	@Override
-	public synchronized void doConfigSubmit(StaplerRequest req,
-			StaplerResponse rsp) throws IOException, ServletException {
-		checkPermission(CONFIGURE);
+        set(triggerSpec, processXML, scripts);
 
-		JSONObject form = req.getSubmittedForm();
-		String processXML = form.getString("processXML");
-		String triggerSpec = form.getString("triggerSpec");
-		List<Script> scripts = req.bindJSONToList(Script.class, form
-				.get("scripts"));
+        super.doConfigSubmit(req, rsp);
+    }
 
-		set(triggerSpec, processXML, scripts);
+    /**
+     * Schedules a new build command.
+     */
+    public HttpResponse doBuild() throws IOException, ServletException {
+        checkPermission(BUILD);
 
-		super.doConfigSubmit(req, rsp);
-	}
+        Cause cause = new UserCause();
 
-	/**
-	 * Schedules a new build command.
-	 */
-	public HttpResponse doBuild()
-			throws IOException, ServletException {
-		checkPermission(BUILD);
+        scheduleBuild(cause);
 
-		Cause cause = new UserCause();
+        return new ForwardToPreviousPage();
+    }
 
-		scheduleBuild(cause);
+    public boolean scheduleBuild(Cause cause, Action... actions) {
+        if (isDisabled())
+            return false;
 
-		return new ForwardToPreviousPage();
-	}
+        List<Action> queueActions = new ArrayList(Arrays.asList(actions));
+        if (cause != null) {
+            queueActions.add(new CauseAction(cause));
+        }
 
-	public boolean scheduleBuild(Cause cause, Action... actions) {
-		if (isDisabled())
-			return false;
+        return Hudson.getInstance().getQueue().add(this, 0,
+                queueActions.toArray(new Action[queueActions.size()]));
+    }
 
-		List<Action> queueActions = new ArrayList(Arrays.asList(actions));
-		if (cause != null) {
-			queueActions.add(new CauseAction(cause));
-		}
+    public boolean isDisabled() {
+        return session == null || disabled;
+    }
 
-		return Hudson.getInstance().getQueue().add(this, 0,
-				queueActions.toArray(new Action[queueActions.size()]));
-	}
+    public void setDisabled(boolean disable) {
+        this.disabled = disable;
+    }
+    
+    public HttpResponse doEnable() {
+    	checkPermission(CONFIGURE);
+    	disabled = false;
+    	return new ForwardToPreviousPage();
+    }
 
-	public boolean isDisabled() {
-		return session == null || disabled;
-	}
+    public void checkAbortPermission() {
+        checkPermission(AbstractProject.ABORT);
+    }
 
-	public void setDisabled(boolean disable) {
-		this.disabled = disable;
-	}
+    public Executable createExecutable() throws IOException {
+        DroolsRun run = new DroolsRun(this);
+        builds.put(run);
+        return run;
+    }
 
-	public void checkAbortPermission() {
-		checkPermission(AbstractProject.ABORT);
-	}
+    public Label getAssignedLabel() {
+        return null;
+    }
 
-	public Executable createExecutable() throws IOException {
-		DroolsRun run = new DroolsRun(this);
-		builds.put(run);
-		return run;
-	}
+    public long getEstimatedDuration() {
+        return -1;
+    }
 
-	public Label getAssignedLabel() {
-		return null;
-	}
+    public Node getLastBuiltOn() {
+        return null;
+    }
 
-	public long getEstimatedDuration() {
-		return -1;
-	}
+    public String getWhyBlocked() {
+        return null;
+    }
 
-	public Node getLastBuiltOn() {
-		return null;
-	}
+    public boolean hasAbortPermission() {
+        return false;
+    }
 
-	public String getWhyBlocked() {
-		return null;
-	}
+    public boolean isBuildBlocked() {
+        return false;
+    }
 
-	public boolean hasAbortPermission() {
-		return false;
-	}
+    public ResourceList getResourceList() {
+        return new ResourceList();
+    }
 
-	public boolean isBuildBlocked() {
-		return false;
-	}
+    public String getProcessId() {
+        return session.getProcessId();
+    }
 
-	public ResourceList getResourceList() {
-		return new ResourceList();
-	}
+    private transient WeakReference<RuleFlowRenderer> renderer;
 
-	public String getProcessId() {
-		return session.getProcessId();
-	}
+    public synchronized RuleFlowRenderer getRuleFlowRenderer() {
+        if (renderer == null || renderer.get() == null) {
+            renderer = new WeakReference<RuleFlowRenderer>(
+                    new RuleFlowRenderer(processXML));
+        }
+        return renderer.get();
+    }
 
-	private transient WeakReference<RuleFlowRenderer> renderer;
+    public void doProcessImage(StaplerRequest req, StaplerResponse rsp)
+            throws IOException, XPathExpressionException, DocumentException {
+        ServletOutputStream output = rsp.getOutputStream();
+        rsp.setContentType("image/png");
+        getRuleFlowRenderer().write(output);
+        output.flush();
+        output.close();
+    }
 
-	public synchronized RuleFlowRenderer getRuleFlowRenderer() {
-		if (renderer == null || renderer.get() == null) {
-			renderer = new WeakReference<RuleFlowRenderer>(
-					new RuleFlowRenderer(processXML));
-		}
-		return renderer.get();
-	}
+    public void doProcessImageSVG(StaplerRequest req, StaplerResponse rsp)
+            throws IOException, XPathExpressionException, DocumentException {
+        ServletOutputStream output = rsp.getOutputStream();
+        rsp.setContentType("image/svg+xml");
+        getRuleFlowRenderer().writeSVG(output);
+        output.flush();
+        output.close();
+    }
 
-	public void doProcessImage(StaplerRequest req, StaplerResponse rsp)
-			throws IOException, XPathExpressionException, DocumentException {
-		ServletOutputStream output = rsp.getOutputStream();
-		rsp.setContentType("image/png");
-		getRuleFlowRenderer().write(output);
-		output.flush();
-		output.close();
-	}
+    @Exported
+    public String getProcessXML() {
+        return processXML;
+    }
 
-	@Exported
-	public String getProcessXML() {
-		return processXML;
-	}
+    @Exported
+    public String getTriggerSpec() {
+        return triggerSpec;
+    }
 
-	@Exported
-	public String getTriggerSpec() {
-		return triggerSpec;
-	}
+    public boolean scheduleBuild() {
+        return scheduleBuild(null, new Action[0]);
+    }
 
-	public boolean scheduleBuild() {
-		return scheduleBuild(null, new Action[0]);
-	}
+    public boolean scheduleBuild(Cause c) {
+        return scheduleBuild(c, new Action[0]);
+    }
 
-	public boolean scheduleBuild(Cause c) {
-		return scheduleBuild(c, new Action[0]);
-	}
+    public boolean scheduleBuild(int quietPeriod) {
+        return scheduleBuild(null, new Action[0]);
+    }
 
-	public boolean scheduleBuild(int quietPeriod) {
-		return scheduleBuild(null, new Action[0]);
-	}
+    public boolean scheduleBuild(int quietPeriod, Cause c) {
+        return scheduleBuild(null, new CauseAction(c));
+    }
 
-	public boolean scheduleBuild(int quietPeriod, Cause c) {
-		return scheduleBuild(null, new CauseAction(c));
-	}
+    public CronTabList getTabs() {
+        return tabs;
+    }
 
-	public CronTabList getTabs() {
-		return tabs;
-	}
+    public void doSubmitWorkflow(StaplerRequest request, StaplerResponse rsp)
+            throws IOException {
+        checkPermission(CONFIGURE);
 
-	public void doSubmitWorkflow(StaplerRequest request, StaplerResponse rsp)
-			throws IOException {
-		checkPermission(CONFIGURE);
+        if (!"POST".equals(request.getMethod())) {
+            rsp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED,
+                    "POST expected");
+            return;
+        }
 
-		if (!"POST".equals(request.getMethod())) {
-			rsp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED,
-					"POST expected");
-			return;
-		}
+        String processXML = IOUtils.toString(request.getInputStream());
+        set(triggerSpec, processXML, scripts);
 
-		String processXML = IOUtils.toString(request.getInputStream());
-		set(triggerSpec, processXML, scripts);
+        save();
+    }
 
-		save();
-	}
+    @Override
+    protected void performDelete() throws IOException, InterruptedException {
+        if (session != null)
+            session.dispose();
+        super.performDelete();
+    }
 
-	@Override
-	protected void performDelete() throws IOException, InterruptedException {
-		if (session != null)
-			session.dispose();
-		super.performDelete();
-	}
+    public List<String> getUsersWithBuildPermission() {
+        List<String> result = new ArrayList<String>();
 
-	public List<String> getUsersWithBuildPermission() {
-		List<String> result = new ArrayList<String>();
+        AuthorizationMatrixProperty amp = getProperty(AuthorizationMatrixProperty.class);
+        if (amp != null && amp.isUseProjectSecurity()) {
+            for (String sid : amp.getAllSIDs()) {
+                if (amp.hasPermission(sid, Job.BUILD)) {
+                    result.add(sid);
+                }
+            }
+        }
 
-		AuthorizationMatrixProperty amp = getProperty(AuthorizationMatrixProperty.class);
-		if (amp != null && amp.isUseProjectSecurity()) {
-			for (String sid : amp.getAllSIDs()) {
-				if (amp.hasPermission(sid, Job.BUILD)) {
-					result.add(sid);
-				}
-			}
-		}
+        return result;
+    }
 
-		return result;
-	}
+    /*
+     * We need two strategies two find the DroolsRun. When the process is
+     * starting, the DroolsRun does not know its processInstanceId yet, so we
+     * query the process variable "run".
+     * 
+     * After the process is completed, the processInstance or variable will be
+     * gone, so we need to iterate over all the builds to find the right one.
+     */
+    public DroolsRun getFromProcessInstance(long processInstanceId) {
+        DroolsRun result = null;
+        ProcessInstance processInstance = session.getSession()
+                .getProcessInstance(processInstanceId);
+        if (processInstance != null) {
+            result = DroolsRun.getFromProcessInstance(processInstance);
+        }
+        if (result == null) {
+            // probably because the workflow has been completed
+            for (DroolsRun run : getBuilds()) {
+                if (run.getProcessInstanceId() == processInstanceId) {
+                    return run;
+                }
+            }
+        }
+        return result;
+    }
 
-	/*
-	 * We need two strategies two find the DroolsRun. When the process is
-	 * starting, the DroolsRun does not know its processInstanceId yet, so we
-	 * query the process variable "run".
-	 * 
-	 * After the process is completed, the processInstance or variable will be
-	 * gone, so we need to iterate over all the builds to find the right one.
-	 */
-	public DroolsRun getFromProcessInstance(long processInstanceId) {
-		DroolsRun result = null;
-		ProcessInstance processInstance = session.getSession()
-				.getProcessInstance(processInstanceId);
-		if (processInstance != null) {
-			result = DroolsRun.getFromProcessInstance(processInstance);
-		}
-		if (result == null) {
-			// probably because the workflow has been completed
-			for (DroolsRun run : getBuilds()) {
-				if (run.getProcessInstanceId() == processInstanceId) {
-					return run;
-				}
-			}
-		}
-		return result;
-	}
+    public <T> T run(SessionCallable<T> callable) throws Exception {
+        return session.run(callable);
+    }
 
-	public <T> T run(SessionCallable<T> callable) throws Exception {
-		return session.run(callable);
-	}
+    public void dispose() {
+        session.dispose();
+        for (DroolsRun run : getBuilds()) {
+            run.dispose();
+        }
+    }
 
-	public void dispose() {
-		session.dispose();
-		for (DroolsRun run : getBuilds()) {
-			run.dispose();
-		}
-	}
+    public List<Script> getScripts() {
+        return scripts;
+    }
 
-	public List<Script> getScripts() {
-		return scripts;
-	}
+    public void setScripts(List<Script> scripts) {
+        this.scripts = new ArrayList<Script>(scripts);
+    }
 
-	public void setScripts(List<Script> scripts) {
-		this.scripts = new ArrayList<Script>(scripts);
-	}
+    public void setScripts(Script... scripts) {
+        this.scripts = new ArrayList<Script>(Arrays.asList(scripts));
+    }
 
-	public void setScripts(Script... scripts) {
-		this.scripts = new ArrayList<Script>(Arrays.asList(scripts));
-	}
+    public Script getScript(String scriptName) {
+        for (Script script : scripts) {
+            if (script.getId().equals(scriptName)) {
+                return script;
+            }
+        }
+        return DroolsManagement.getInstance().getScript(scriptName);
+    }
 
-	public Script getScript(String scriptName) {
-		for (Script script : scripts) {
-			if (script.getId().equals(scriptName)) {
-				return script;
-			}
-		}
-		return DroolsManagement.getInstance().getScript(scriptName);
-	}
-
-	public DroolsSession getSession() {
-		return session;
-	}
+    public DroolsSession getSession() {
+        return session;
+    }
 
 }
Index: src/main/java/hudson/drools/DroolsRun.java
===================================================================
--- src/main/java/hudson/drools/DroolsRun.java	(revision 20976)
+++ src/main/java/hudson/drools/DroolsRun.java	(working copy)
@@ -1,6 +1,7 @@
 package hudson.drools;
 
 import hudson.Functions;
+import hudson.drools.renderer.RuleFlowRenderer;
 import hudson.model.BallColor;
 import hudson.model.BuildListener;
 import hudson.model.Hudson;
@@ -89,34 +90,10 @@
 		return null;
 	}
 
-	/*
-	 * We need two strategies two find the DroolsRun. When the process is
-	 * starting, the DroolsRun does not now it processInstanceId yet, so we
-	 * query the process variable "run".
-	 * 
-	 * After the process is completed, the processInstance or variable will be
-	 * gone, so we need to iterate over all the builds to find the right one.
-	 * public static DroolsRun getFromProcessInstance(long processInstanceId) {
-	 * DroolsRun result = null; ProcessInstance processInstance =
-	 * PluginImpl.getInstance().getSession()
-	 * .getProcessInstance(processInstanceId); if (processInstance != null) {
-	 * result = getFromProcessInstance(processInstance); } if (result == null) {
-	 * // probably because the workflow has been completed for (Item item :
-	 * Hudson.getInstance().getItemMap().values()) { if (item instanceof
-	 * DroolsProject) for (DroolsRun run : ((DroolsProject) item).getBuilds()) {
-	 * if (run.getProcessInstanceId() == processInstanceId) { return run; } } }
-	 * } return result; }
-	 */
-
 	public static DroolsRun getFromProcessInstance(
 			ProcessInstance processInstance) {
-		RunWrapper wrapper = (RunWrapper) ((WorkflowProcessInstance) processInstance)
+		return (DroolsRun) ((WorkflowProcessInstance) processInstance)
 				.getVariable(Constants.RUN);
-		if (wrapper == null) {
-			return null;
-		}
-		DroolsRun run = (DroolsRun) wrapper.getRun();
-		return run;
 	}
 
 	public List<NodeInstanceLog> getLogs() {
Index: src/main/java/hudson/drools/DroolsSession.java
===================================================================
--- src/main/java/hudson/drools/DroolsSession.java	(revision 20976)
+++ src/main/java/hudson/drools/DroolsSession.java	(working copy)
@@ -8,11 +8,10 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
 import java.io.OutputStream;
 import java.io.StringReader;
 import java.util.Collection;
+import java.util.Properties;
 
 import org.acegisecurity.Authentication;
 import org.acegisecurity.context.SecurityContextHolder;
@@ -24,6 +23,8 @@
 import org.drools.builder.KnowledgeBuilderErrors;
 import org.drools.builder.KnowledgeBuilderFactory;
 import org.drools.builder.ResourceType;
+import org.drools.common.InternalWorkingMemory;
+import org.drools.common.InternalWorkingMemoryEntryPoint;
 import org.drools.compiler.PackageBuilderConfiguration;
 import org.drools.definition.KnowledgePackage;
 import org.drools.definition.process.Process;
@@ -31,13 +32,20 @@
 import org.drools.io.impl.ReaderResource;
 import org.drools.marshalling.Marshaller;
 import org.drools.marshalling.MarshallerFactory;
-import org.drools.marshalling.ObjectMarshallingStrategy;
+import org.drools.marshalling.impl.ProcessMarshallerRegistry;
+import org.drools.ruleflow.core.RuleFlowProcess;
 import org.drools.runtime.Environment;
 import org.drools.runtime.KnowledgeSessionConfiguration;
 import org.drools.runtime.StatefulKnowledgeSession;
 
 public class DroolsSession {
 
+	static {
+		ProcessMarshallerRegistry.INSTANCE.register(
+				RuleFlowProcess.RULEFLOW_TYPE,
+				HudsonProcessInstanceMarshaller.INSTANCE);
+	}
+
 	private final StatefulKnowledgeSession session;
 	private final KnowledgeBase kbase;
 	private final Marshaller marshaller;
@@ -56,7 +64,8 @@
 		return processId;
 	}
 
-	public DroolsSession(File saved, String processXML) throws IOException {
+	public DroolsSession(File saved, String processXML,
+			int initialProcessInstanceId) throws IOException {
 		this.saved = saved;
 
 		KnowledgeBuilder kbuilder = KnowledgeBuilderFactory
@@ -86,27 +95,12 @@
 		kbase = KnowledgeBaseFactory.newKnowledgeBase();
 		kbase.addKnowledgePackages(knowledgePackages);
 
-		marshaller = MarshallerFactory.newMarshaller(kbase, new ObjectMarshallingStrategy[] {
-				new ObjectMarshallingStrategy(){
-				
-					public void write(ObjectOutputStream os, Object object) throws IOException {
-						
-					}
-				
-					public Object read(ObjectInputStream os) throws IOException,
-							ClassNotFoundException {
-						return null;
-					}
-				
-					public boolean accept(Object object) {
-						System.out.println(object);
-						return false;
-					}
-				},
-				MarshallerFactory.newSerializeMarshallingStrategy()
-		});
+		marshaller = MarshallerFactory.newMarshaller(kbase);
 
-		KnowledgeSessionConfiguration conf = new SessionConfiguration();
+		SessionConfiguration conf = new SessionConfiguration();
+		Properties p = new Properties();
+		p.setProperty("drools.processInstanceManagerFactory", HudsonProcessInstanceManagerFactory.class.getName());
+		conf.addProperties(p);
 		Environment env = EnvironmentFactory.newEnvironment();
 		if (!saved.exists() || saved.length() == 0) {
 			session = kbase.newStatefulKnowledgeSession(conf, env);
@@ -114,7 +108,7 @@
 			InputStream is = null;
 			try {
 				is = new FileInputStream(saved);
-				session = marshaller.unmarshall(is);
+				session = marshaller.unmarshall(is, conf, env);
 			} catch (ClassNotFoundException e) {
 				throw new IOException2("Class not found while unmarshalling "
 						+ saved.getAbsolutePath(), e);
@@ -125,35 +119,45 @@
 				is.close();
 			}
 		}
+
+		((HudsonProcessInstanceManager) ((InternalWorkingMemoryEntryPoint) session)
+				.getInternalWorkingMemory().getProcessInstanceManager())
+				.setProcessCounter(initialProcessInstanceId);
 	}
 
 	public synchronized void save() throws IOException {
 		OutputStream os = null;
 		try {
-			File newSaved = new File(saved.getParentFile(), saved.getName() + ".new");
-			File backupSaved = new File(saved.getParentFile(), saved.getName() + ".bak");
+			File newSaved = new File(saved.getParentFile(), saved.getName()
+					+ ".new");
+			File backupSaved = new File(saved.getParentFile(), saved.getName()
+					+ ".bak");
 			os = new FileOutputStream(newSaved);
 			marshaller.marshall(os, session);
 			os.close();
 			os = null;
-			
+
 			if (backupSaved.exists()) {
 				if (!backupSaved.delete()) {
-					throw new IOException("could not remove backup " + backupSaved.getAbsolutePath());
+					throw new IOException("could not remove backup "
+							+ backupSaved.getAbsolutePath());
 				}
 			}
 			if (saved.exists()) {
 				if (!saved.renameTo(backupSaved)) {
-					throw new IOException("could not backup " + saved.getAbsolutePath());
+					throw new IOException("could not backup "
+							+ saved.getAbsolutePath());
 				}
 			}
 			if (!newSaved.renameTo(saved)) {
 				backupSaved.renameTo(saved);
-				throw new IOException("could not rename " + saved.getAbsolutePath() );
+				throw new IOException("could not rename "
+						+ saved.getAbsolutePath());
 			}
-			
+
 		} finally {
-			if (os != null) os.close();
+			if (os != null)
+				os.close();
 		}
 	}
 
Index: src/main/java/hudson/drools/HudsonProcessInstanceManager.java
===================================================================
--- src/main/java/hudson/drools/HudsonProcessInstanceManager.java	(revision 0)
+++ src/main/java/hudson/drools/HudsonProcessInstanceManager.java	(revision 0)
@@ -0,0 +1,45 @@
+package hudson.drools;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.drools.process.instance.ProcessInstance;
+import org.drools.process.instance.ProcessInstanceManager;
+
+public class HudsonProcessInstanceManager implements ProcessInstanceManager {
+
+    private Map<Long, ProcessInstance> processInstances = new HashMap<Long, ProcessInstance>();
+    private int processCounter = 0;
+
+    public void addProcessInstance(ProcessInstance processInstance) {
+        ((ProcessInstance)processInstance).setId(++processCounter);
+        internalAddProcessInstance(processInstance);
+    }
+    
+    public void internalAddProcessInstance(ProcessInstance processInstance) {
+    	processInstances.put(((ProcessInstance)processInstance).getId(), processInstance);
+    }
+
+    public Collection<ProcessInstance> getProcessInstances() {
+        return Collections.unmodifiableCollection(processInstances.values());
+    }
+
+    public ProcessInstance getProcessInstance(long id) {
+        return (ProcessInstance) processInstances.get(id);
+    }
+
+    public void removeProcessInstance(ProcessInstance processInstance) {
+        internalRemoveProcessInstance(processInstance);
+    }
+
+    public void internalRemoveProcessInstance(ProcessInstance processInstance) {
+        processInstances.remove(((ProcessInstance)processInstance).getId());
+    }
+    
+    public void setProcessCounter(int processCounter) {
+    	this.processCounter = processCounter;
+    }
+
+}
Index: src/main/java/hudson/drools/HudsonProcessInstanceManagerFactory.java
===================================================================
--- src/main/java/hudson/drools/HudsonProcessInstanceManagerFactory.java	(revision 0)
+++ src/main/java/hudson/drools/HudsonProcessInstanceManagerFactory.java	(revision 0)
@@ -0,0 +1,15 @@
+package hudson.drools;
+
+import org.drools.WorkingMemory;
+import org.drools.process.instance.ProcessInstanceManager;
+import org.drools.process.instance.ProcessInstanceManagerFactory;
+
+public class HudsonProcessInstanceManagerFactory implements
+		ProcessInstanceManagerFactory {
+	
+	public ProcessInstanceManager createProcessInstanceManager(
+			WorkingMemory workingMemory) {
+		return new HudsonProcessInstanceManager();
+	}
+
+}
Index: src/main/java/hudson/drools/HudsonProcessInstanceMarshaller.java
===================================================================
--- src/main/java/hudson/drools/HudsonProcessInstanceMarshaller.java	(revision 0)
+++ src/main/java/hudson/drools/HudsonProcessInstanceMarshaller.java	(revision 0)
@@ -0,0 +1,58 @@
+package hudson.drools;
+
+import hudson.model.Run;
+
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+
+import org.drools.ruleflow.instance.RuleFlowProcessInstance;
+import org.drools.workflow.instance.impl.WorkflowProcessInstanceImpl;
+
+public class HudsonProcessInstanceMarshaller extends AbstractProcessInstanceMarshaller {
+
+	public static HudsonProcessInstanceMarshaller INSTANCE = new HudsonProcessInstanceMarshaller();
+
+	private HudsonProcessInstanceMarshaller() {
+	}
+
+	protected WorkflowProcessInstanceImpl createProcessInstance() {
+		return new RuleFlowProcessInstance();
+	}
+	
+	@Override
+	protected Object readVariable(ObjectInputStream stream) throws IOException,
+			ClassNotFoundException {
+		Object o = stream.readObject();
+		if (o instanceof SerializedRun) {
+			return Run.fromExternalizableId(((SerializedRun) o).id);
+		} else if (o instanceof RunWrapper) {
+			return ((RunWrapper) o).getRun();
+		} else {
+			return o;
+		}
+	}
+	
+	@Override
+	protected void writeVariable(ObjectOutputStream stream, Object object)
+			throws IOException {
+		if (object instanceof RunWrapper) {
+			RunWrapper r = (RunWrapper) object;
+			Run<?,?> run = r.getRun();
+			stream.writeObject(run != null ? new SerializedRun(run.getExternalizableId()) : null);
+		} else if (object instanceof Run<?,?>) {
+			Run<?,?> r = (Run<?,?>) object;
+			stream.writeObject(new SerializedRun(r.getExternalizableId()));
+		} else {
+			stream.writeObject(object);
+		}
+	}
+
+	private static class SerializedRun implements Serializable {
+		private static final long serialVersionUID = 1L;
+		private final String id;
+		private SerializedRun(String id) { this.id = id; }
+	}
+
+}
Index: src/main/java/hudson/drools/RuleFlowRenderer.java
===================================================================
--- src/main/java/hudson/drools/RuleFlowRenderer.java	(revision 20976)
+++ src/main/java/hudson/drools/RuleFlowRenderer.java	(working copy)
@@ -1,740 +0,0 @@
-package hudson.drools;
-
-import hudson.model.Hudson;
-import hudson.model.Job;
-import hudson.model.Result;
-import hudson.model.Run;
-
-import java.awt.BasicStroke;
-import java.awt.Color;
-import java.awt.Font;
-import java.awt.GradientPaint;
-import java.awt.Graphics2D;
-import java.awt.Image;
-import java.awt.Paint;
-import java.awt.Polygon;
-import java.awt.RadialGradientPaint;
-import java.awt.RenderingHints;
-import java.awt.Shape;
-import java.awt.Toolkit;
-import java.awt.geom.AffineTransform;
-import java.awt.geom.Ellipse2D;
-import java.awt.geom.Line2D;
-import java.awt.geom.Point2D;
-import java.awt.geom.Rectangle2D;
-import java.awt.geom.RoundRectangle2D;
-import java.awt.geom.Point2D.Double;
-import java.awt.image.BufferedImage;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.io.StringReader;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-
-import javax.imageio.ImageIO;
-
-import org.dom4j.Document;
-import org.dom4j.DocumentException;
-import org.dom4j.Element;
-import org.dom4j.io.SAXReader;
-
-public class RuleFlowRenderer {
-
-	private static Color LINE_COLOR = Color.BLACK;
-	private static final Color TEXT_COLOR = Color.BLACK;
-	private static final Font FONT = new Font("Arial", Font.PLAIN, 11);
-
-	public static final Color NODE_IN_PROGRESS_COLOR = new Color(193, 247, 160);
-	public static final Color NODE_COMPLETE_COLOR = new Color(132, 217, 50);
-	public static final Color BUILD_SUCCESS_COLOR = new Color(110, 110, 255);
-	public static final Color BUILD_FAILED_COLOR = new Color(220, 80, 80);
-	public static final Color BUILD_CANCELED_COLOR = new Color(200, 200, 200);
-	public static final Color BUILD_UNSTABLE_COLOR = new Color(246, 248, 64);
-
-	private Map<String, RFNode> nodes = new HashMap<String, RFNode>();
-	private List<RFConnection> connections = new ArrayList<RFConnection>();
-	private List<RFConnection> compositeConnections = new ArrayList<RFConnection>();
-
-	private int width, height;
-//	private List<NodeInstanceLog> logs;
-
-	public RuleFlowRenderer(String xml) {
-		try {
-			readResource(new SAXReader().read(new StringReader(xml)));
-		} catch (DocumentException e) {
-			throw new IllegalArgumentException("Cannot parse workflow xml");
-		}
-	}
-
-	public RuleFlowRenderer(String xml, List<NodeInstanceLog> logs) {
-		this(xml);
-//		this.logs = logs;
-
-		for (NodeInstanceLog log : logs) {
-			RFNode node = nodes.get(log.getNodeId());
-			if (node == null) {
-				System.out.println("unknown node for " + log);
-				continue;
-			} 
-			if (log.getType() == NodeInstanceLog.TYPE_ENTER) {
-				node.state = NodeState.IN_PROGRESS;
-			} else if (log.getType() == NodeInstanceLog.TYPE_EXIT) {
-				node.state = NodeState.COMPLETED;
-			}
-			if (node instanceof Build) {
-				String projectName = ((Build) node).project;
-				Job project = getJobUrl(projectName);
-				if (project != null) {
-					Run run = WorkItemAction.findRun(project, log
-							.getProcessInstanceId());
-					if (run != null) {
-						((Build) node).run = run;
-					}
-				}
-			}
-		}
-	}
-
-	private Job getJobUrl(String projectName) {
-		return (Hudson.getInstance() != null) ? (Job) Hudson.getInstance()
-				.getItem(projectName) : null;
-	}
-
-	private void readResource(Document document) throws DocumentException {
-
-		int maxX = 0;
-		int maxY = 0;
-		int minX = Integer.MAX_VALUE;
-		int minY = Integer.MAX_VALUE;
-
-		Element root = document.getRootElement();
-
-		Iterator it = root.element("nodes").elementIterator();
-		while (it.hasNext()) {
-			Element el = (Element) it.next();
-			int x = Integer.parseInt(el.attributeValue("x"));
-			int y = Integer.parseInt(el.attributeValue("y"));
-			int width = Integer.parseInt(el.attributeValue("width"));
-			int height = Integer.parseInt(el.attributeValue("height"));
-			maxX = Math.max(maxX, x + width);
-			maxY = Math.max(maxY, y + height);
-			minX = Math.min(minX, x);
-			minY = Math.min(minY, y);
-		}
-
-		int offsetX = minX - 5;
-		int offsetY = minY - 5;
-
-		it = root.element("nodes").elementIterator();
-		while (it.hasNext()) {
-			Element el = (Element) it.next();
-			RFNode node = createNode(el, offsetX, offsetY);
-			nodes.put(node.id, node);
-		}
-
-		width = maxX - minX + 10;
-		height = maxY - minY + 10;
-
-		it = root.element("connections").elementIterator();
-		while (it.hasNext()) {
-			Element el = (Element) it.next();
-			String from = el.attributeValue("from");
-			String to = el.attributeValue("to");
-			connections.add(new RFConnection(nodes.get(from), nodes.get(to)));
-		}
-	}
-
-	private RFNode createNode(Element el, int offsetX, int offsetY) {
-		String type = el.getName();
-		String name = el.attributeValue("name");
-		String id = el.attributeValue("id");
-		int x = Integer.parseInt(el.attributeValue("x")) - offsetX;
-		int y = Integer.parseInt(el.attributeValue("y")) - offsetY;
-		int width = el.attributeValue("width") != null ? Integer.parseInt(el.attributeValue("width")) : 80;
-		int height = el.attributeValue("height") != null ? Integer.parseInt(el.attributeValue("height")) : 40;
-		RFNode node;
-		if ("workItem".equals(type)) {
-			String workName = el.element("work").attributeValue("name");
-			if ("Script".equals(workName)) {
-				node = new Script(type, name, id, x, y, width, height);
-			} else if ("Build".equals(workName)) {
-				Iterator<Element> eit = el.element("work")
-						.elementIterator();
-				String project = null;
-				while (eit.hasNext()) {
-					Element param = eit.next();
-					if ("Project".equals(param.attributeValue("name"))) {
-						project = param.elementText("value");
-					}
-				}
-				node = new Build(type, name, id, project, x, y, width,
-						height);
-			} else {
-				node = new WorkItem(type, name, id, x, y, width, height);
-			}
-		} else if ("humanTask".equals(type)) {
-			node = new HumanTask(type, name, id, x, y, width, height);
-		} else if ("start".equals(type)) {
-			node = new Start(type, name, id, x, y, width, height);
-		} else if ("end".equals(type)) {
-			node = new End(type, name, id, x, y, width, height);
-		} else if ("split".equals(type)) {
-			node = new Split(type, name, id, x, y, width, height);
-		} else if ("join".equals(type)) {
-			node = new Split(type, name, id, x, y, width, height);
-		} else if ("eventNode".equals(type)) {
-			node = new Event(type, name, id, x, y, width, height);
-		} else if ("forEach".equals(type)) {
-			node = new ForEach(type, name, id, x, y, width, height);
-			Iterator it = el.element("nodes").elementIterator();
-			while (it.hasNext()) {
-				Element e = (Element) it.next();
-				RFNode child = createNode(e, -x, -y);
-				nodes.put(node.id + ":2:" + child.id, child);
-			}
-			it = el.element("connections").elementIterator();
-			while (it.hasNext()) {
-				Element conn = (Element) it.next();
-				String from = node.id  + ":2:" + conn.attributeValue("from");
-				String to = node.id + ":2:" + conn.attributeValue("to");
-				compositeConnections.add(new RFConnection(nodes.get(from), nodes.get(to)));
-			}
-		} else {
-			node = new RFNode(type, name, id, x, y, width, height);
-		}
-		return node;
-	}
-
-	public Collection<RFNode> getNodes() {
-		return nodes.values();
-	}
-
-	public void paint(Graphics2D g2) {
-		g2.setColor(Color.WHITE);
-		g2.fillRect(0, 0, getWidth(), getHeight());
-
-		for (RFConnection connection : connections) {
-			Rectangle2D.Double fromRect = connection.from.asRectangle();
-			Rectangle2D.Double toRect = connection.to.asRectangle();
-			paintLine(g2, fromRect, toRect);
-		}
-
-		for (RFNode node : nodes.values()) {
-			if (node instanceof ForEach) node.paint(g2);
-		}
-
-		for (RFConnection connection : compositeConnections) {
-			Rectangle2D.Double fromRect = connection.from.asRectangle();
-			Rectangle2D.Double toRect = connection.to.asRectangle();
-			paintLine(g2, fromRect, toRect);
-		}
-		
-		for (RFNode node : nodes.values()) {
-			if (!(node instanceof ForEach)) node.paint(g2);
-		}
-	}
-
-	public static void paintLine(Graphics2D g2, Rectangle2D.Double from,
-			Rectangle2D.Double to) {
-
-		Point2D.Double fromRectCenter = new Point2D.Double(from.getCenterX(),
-				from.getCenterY());
-		Point2D.Double toRectCenter = new Point2D.Double(to.getCenterX(), to
-				.getCenterY());
-		Line2D.Double line = new Line2D.Double(fromRectCenter, toRectCenter);
-
-		Double p1 = new Point2D.Double();
-		GraphicsUtil.getLineRectangleIntersection(from, line, p1);
-		Double p2 = new Point2D.Double();
-		GraphicsUtil.getLineRectangleIntersection(to, line, p2);
-
-		// drawArrow(g2, new Line2D.Double(p1,p2), 1, true);
-		drawArrow(g2, line, 1, true);
-
-	}
-
-	public static void drawArrow(Graphics2D g2d, Line2D.Double line,
-			float stroke, boolean arrow) {
-		int xCenter = (int) line.getX1();
-		int yCenter = (int) line.getY1();
-		double x = line.getX2();
-		double y = line.getY2();
-		double aDir = Math.atan2(xCenter - x, yCenter - y);
-		int i1 = 12 + (int) (stroke * 2);
-		int i2 = 6 + (int) stroke; // make the arrow head the same size
-
-		Line2D.Double base = new Line2D.Double(x + xCor(i1, aDir + .5), y
-				+ yCor(i1, aDir + .5), x + xCor(i1, aDir - .5), y
-				+ yCor(i1, aDir - .5));
-		Point2D.Double intersect = new Point2D.Double();
-		GraphicsUtil.getLineLineIntersection(line, base, intersect);
-
-		g2d.setPaint(LINE_COLOR);
-		if (arrow) {
-			g2d.draw(new Line2D.Double(xCenter, yCenter, intersect.x,
-					intersect.y));
-
-			g2d.setStroke(new BasicStroke(1f)); // make the arrow head solid
-			// even if
-			// dash pattern has been specified
-			Polygon tmpPoly = new Polygon();
-			// regardless of the length
-			tmpPoly.addPoint((int) x, (int) y); // arrow tip
-			tmpPoly.addPoint((int) x + xCor(i1, aDir + .5), (int) y
-					+ yCor(i1, aDir + .5));
-			// tmpPoly.addPoint(x + xCor(i2, aDir), y + yCor(i2, aDir));
-			tmpPoly.addPoint((int) x + xCor(i1, aDir - .5), (int) y
-					+ yCor(i1, aDir - .5));
-			tmpPoly.addPoint((int) x, (int) y); // arrow tip
-			g2d.drawPolygon(tmpPoly);
-		} else {
-			g2d.draw(new Line2D.Double(xCenter, yCenter, x, y));
-		}
-		// g2d.setPaint(Color.WHITE);
-	}
-
-	private static int yCor(int len, double dir) {
-		return (int) (len * Math.cos(dir));
-	}
-
-	private static int xCor(int len, double dir) {
-		return (int) (len * Math.sin(dir));
-	}
-
-	public String getNodeName(String id) {
-		RFNode node = nodes.get(id);
-		return node != null ? node.name : null;
-	}
-
-	public class RFNode {
-		public final String type, name, id;
-		public final int x, y, width, height;
-
-		public NodeState state = NodeState.INACTIVE;
-
-		public RFNode(String type, String name, String id, int x, int y,
-				int width, int height) {
-			super();
-			this.type = type;
-			this.name = name;
-			this.id = id;
-			this.x = x;
-			this.y = y;
-			this.width = width;
-			this.height = height;
-		}
-
-		public String getUrl() {
-			return null;
-		}
-
-		public Rectangle2D.Double asRectangle() {
-			return new Rectangle2D.Double(x, y, width, height);
-		}
-
-		public Shape getShape() {
-			return asRectangle();
-		}
-
-		public Image getImage() {
-			return null;
-		}
-
-		public Color getColor() {
-			return Color.WHITE;
-		}
-
-		public Color getStateColor() {
-			switch (state) {
-			case IN_PROGRESS:
-				return NODE_IN_PROGRESS_COLOR;
-			case INACTIVE:
-				return null;
-			case COMPLETED:
-				return NODE_COMPLETE_COLOR;
-			default:
-				return null;
-			}
-		}
-
-		public void paint(Graphics2D g2) {
-			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
-					RenderingHints.VALUE_ANTIALIAS_ON);
-
-			Rectangle2D.Double rect = asRectangle();
-
-			Shape shape = getShape();
-
-			g2.setPaint(getColor());
-
-			g2.fill(shape);
-
-			Shape clip = g2.getClip();
-
-			Color stateColor = getStateColor();
-			if (stateColor != null) {
-				g2.setPaint(stateColor);
-				g2.setClip((int) rect.x, (int) rect.y, 25, (int) rect.height);
-				g2.fill(shape);
-			}
-
-			g2.setClip(clip);
-			g2.setPaint(LINE_COLOR);
-			g2.draw(shape);
-
-			int imageY = (int) (rect.y + rect.height / 2 - 16 / 2);
-			int imageX = (int) rect.x + 6;
-
-			boolean painted = paintIcon(g2, imageX, imageY);
-			int textWidth = g2.getFontMetrics().stringWidth(name);
-			int textHeight = g2.getFontMetrics().getAscent();
-
-			g2.setColor(TEXT_COLOR);
-			g2.setFont(FONT);
-
-			g2
-					.drawString(
-							name,
-							(int) (rect.x + (painted ? 10 : 0) + (rect.width - textWidth) / 2),
-							(int) (rect.y + (rect.height + textHeight) / 2));
-
-		}
-
-		public boolean paintIcon(Graphics2D g2, int imageX, int imageY) {
-			Image image = getImage();
-			if (image != null) {
-				g2.drawImage(image, imageX, imageY, null);
-			}
-			return image != null;
-		}
-
-	}
-
-	public class WorkItem extends RFNode {
-
-		private Color color = new Color(255, 250, 205);
-
-		public WorkItem(String type, String name, String id, int x, int y,
-				int width, int height) {
-			super(type, name, id, x, y, width, height);
-		}
-
-		@Override
-		public Shape getShape() {
-			return new RoundRectangle2D.Double(x, y, width, height, 25, 25);
-		}
-
-		@Override
-		public Color getColor() {
-			return color;
-		}
-
-		@Override
-		public Image getImage() {
-			return workItemImage;
-		}
-
-	}
-
-	public class HumanTask extends WorkItem {
-
-		public HumanTask(String type, String name, String id, int x, int y,
-				int width, int height) {
-			super(type, name, id, x, y, width, height);
-		}
-
-		@Override
-		public Image getImage() {
-			return humanTaskImage;
-		}
-
-	}
-
-	public class Build extends WorkItem {
-
-		public String project;
-		private Run run;
-
-		public Build(String type, String name, String id, String project,
-				int x, int y, int width, int height) {
-			super(type, name, id, x, y, width, height);
-			this.project = project;
-		}
-
-		@Override
-		public Image getImage() {
-			return workItemImage;
-		}
-
-		@Override
-		public boolean paintIcon(Graphics2D g2, int x, int y) {
-			if (run == null || run.getResult() == null) {
-				return super.paintIcon(g2, x, y);
-			}
-			Color c;
-			if (run.getResult() == Result.SUCCESS) {
-				c = BUILD_SUCCESS_COLOR;
-			} else if (run.getResult() == Result.UNSTABLE) {
-				c = BUILD_UNSTABLE_COLOR;
-			} else if (run.getResult() == Result.ABORTED) {
-				c = BUILD_CANCELED_COLOR;
-			} else {
-				c = BUILD_FAILED_COLOR;
-			}
-			g2.translate(x, y);
-			paintBall(g2, c);
-			g2.translate(-x, -y);
-
-			return true;
-		}
-
-		@Override
-		public String getUrl() {
-			if (run != null) {
-				return run.getUrl();
-			}
-			
-			Job job = getJobUrl(project);
-			if (job != null) {
-				return job.getUrl();
-			}
-			
-			return null;
-		}
-
-	}
-
-	public class Script extends WorkItem {
-
-		public Script(String type, String name, String id, int x, int y,
-				int width, int height) {
-			super(type, name, id, x, y, width, height);
-		}
-
-		@Override
-		public Image getImage() {
-			return scriptImage;
-		}
-
-	}
-
-	public class Split extends RFNode {
-
-		private Color color = new Color(70, 130, 180);
-
-		public Split(String type, String name, String id, int x, int y,
-				int width, int height) {
-			super(type, name, id, x, y, width, height);
-		}
-
-		@Override
-		public Shape getShape() {
-			return new Ellipse2D.Double(x, y, width, height);
-		}
-
-		@Override
-		public Color getColor() {
-			return color;
-		}
-
-		@Override
-		public Image getImage() {
-			return joinImage;
-		}
-
-	}
-
-	public class Event extends RFNode {
-
-		public Event(String type, String name, String id, int x, int y,
-				int width, int height) {
-			super(type, name, id, x, y, width, height);
-		}
-
-		@Override
-		public Image getImage() {
-			return eventImage;
-		}
-
-	}
-
-	public class Start extends RFNode {
-
-		public Start(String type, String name, String id, int x, int y,
-				int width, int height) {
-			super(type, name, id, x, y, width, height);
-		}
-
-		@Override
-		public Image getImage() {
-			return startImage;
-		}
-
-	}
-
-	public class End extends RFNode {
-
-		public End(String type, String name, String id, int x, int y,
-				int width, int height) {
-			super(type, name, id, x, y, width, height);
-		}
-
-		@Override
-		public Image getImage() {
-			return endImage;
-		}
-
-	}
-	
-	public class ForEach extends RFNode {
-
-		public ForEach(String type, String name, String id, int x, int y,
-				int width, int height) {
-			super(type, name, id, x, y, width, height);
-		}
-		
-		@Override
-		public void paint(Graphics2D g2) {
-			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
-					RenderingHints.VALUE_ANTIALIAS_ON);
-
-			Rectangle2D.Double rect = asRectangle();
-
-			Shape shape = getShape();
-
-			g2.setPaint(getColor());
-
-			g2.fill(shape);
-
-			Shape clip = g2.getClip();
-
-			Color stateColor = getStateColor();
-			if (stateColor != null) {
-				g2.setPaint(stateColor);
-				g2.setClip((int) rect.x, (int) rect.y, 25, (int) rect.height);
-				g2.fill(shape);
-			}
-
-			g2.setClip(clip);
-			g2.setPaint(LINE_COLOR);
-			g2.draw(shape);
-
-			g2.setColor(TEXT_COLOR);
-			g2.setFont(FONT);
-
-			g2
-					.drawString(
-							name,
-							(int) (rect.x + 6),
-							(int) (rect.y + 18));
-
-		}
-
-
-	}
-
-	private static class RFConnection {
-		private final RFNode from, to;
-
-		public RFConnection(RFNode from, RFNode to) {
-			super();
-			this.from = from;
-			this.to = to;
-		}
-	}
-
-	private static Toolkit toolkit = Toolkit.getDefaultToolkit();
-	private static Image endImage = toolkit.getImage(RuleFlowRenderer.class
-			.getResource("/icons/process_stop.gif"));
-	private static Image startImage = toolkit.getImage(RuleFlowRenderer.class
-			.getResource("/icons/process_start.gif"));
-	private static Image workItemImage = toolkit
-			.getImage(RuleFlowRenderer.class.getResource("/icons/dsl.png"));
-	private static Image joinImage = toolkit.getImage(RuleFlowRenderer.class
-			.getResource("/icons/join.gif"));
-	private static Image eventImage = toolkit.getImage(RuleFlowRenderer.class
-			.getResource("/icons/event.gif"));
-	private static Image scriptImage = toolkit.getImage(RuleFlowRenderer.class
-			.getResource("/icons/open.gif"));
-	private static Image humanTaskImage = toolkit
-			.getImage(RuleFlowRenderer.class
-					.getResource("/icons/human_task.gif"));
-
-	public void write(OutputStream output) throws IOException {
-		BufferedImage aimg = new BufferedImage(getWidth(), getHeight(),
-				BufferedImage.TYPE_INT_RGB);
-		Graphics2D g = aimg.createGraphics();
-		paint(g);
-		g.dispose();
-		ImageIO.write(aimg, "png", output);
-	}
-
-	enum NodeState {
-		IN_PROGRESS, COMPLETED, INACTIVE, FAILED
-	};
-
-	public int getWidth() {
-		return width;
-	}
-
-	public int getHeight() {
-		return height;
-	}
-
-	public static void paintBall(Graphics2D g2, Color c) {
-		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
-				RenderingHints.VALUE_ANTIALIAS_ON);
-
-		int diameter = 16;
-
-		// Retains the previous state
-		Paint oldPaint = g2.getPaint();
-
-		// Fills the circle with solid blue color
-		g2.setColor(c);
-		g2.fillOval(0, 0, diameter - 1, diameter - 1);
-
-		// Adds shadows at the top
-		Paint p;
-		p = new GradientPaint(0, 0, new Color(0.0f, 0.0f, 0.0f, 0.4f), 0,
-				diameter, new Color(0.0f, 0.0f, 0.0f, 0.0f));
-		g2.setPaint(p);
-		g2.fillOval(0, 0, diameter - 1, diameter - 1);
-
-		// Adds highlights at the bottom
-		p = new GradientPaint(0, 0, new Color(1.0f, 1.0f, 1.0f, 0.0f), 0,
-				diameter, new Color(1.0f, 1.0f, 1.0f, 0.0f));
-		g2.setPaint(p);
-		g2.fillOval(0, 0, diameter - 1, diameter - 1);
-
-		// Creates dark edges for 3D effect
-		p = new RadialGradientPaint(new Point2D.Double(diameter * .4,
-				diameter * .45), diameter / 2.0f, new float[] { 0.0f, 0.95f },
-				new Color[] {
-						new Color(c.getRed(), c.getGreen(), c.getBlue(), 127),
-						new Color(0.0f, 0.0f, 0.0f, 0.0f) });
-		g2.setPaint(p);
-		g2.fillOval(0, 0, diameter - 1, diameter - 1);
-
-		// Adds oval inner highlight at the bottom
-		p = new RadialGradientPaint(new Point2D.Double(diameter / 2.0,
-				diameter * 1.5), diameter / 2.3f, new Point2D.Double(
-				diameter / 2.0, diameter * 1.75 + 6),
-				new float[] { 0.0f, 0.8f }, new Color[] {
-						new Color(c.getRed(), c.getGreen(), c.getBlue(), 255),
-						new Color(c.getRed(), c.getGreen(), c.getBlue(), 0) },
-				RadialGradientPaint.CycleMethod.NO_CYCLE,
-				RadialGradientPaint.ColorSpaceType.SRGB, AffineTransform
-						.getScaleInstance(1.0, 0.5));
-		g2.setPaint(p);
-		g2.fillOval(0, 0, diameter - 1, diameter - 1);
-
-		// Restores the previous state
-		g2.setPaint(oldPaint);
-	}
-
-}
Index: src/main/java/hudson/drools/RunWrapper.java
===================================================================
--- src/main/java/hudson/drools/RunWrapper.java	(revision 20976)
+++ src/main/java/hudson/drools/RunWrapper.java	(working copy)
@@ -19,6 +19,7 @@
 import com.thoughtworks.xstream.io.HierarchicalStreamReader;
 import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
 
+@Deprecated
 public class RunWrapper implements Externalizable {
 	
 	private static final long serialVersionUID = 1;
Index: src/main/java/hudson/drools/SignalEventCallable.java
===================================================================
--- src/main/java/hudson/drools/SignalEventCallable.java	(revision 20976)
+++ src/main/java/hudson/drools/SignalEventCallable.java	(working copy)
@@ -23,7 +23,7 @@
 					Constants.BUILD_COMPLETE_EVENT, 
 					run.getParent().getName()
 			), 
-			new RunWrapper(run));
+			run);
 		return null;
 	}
 
Index: src/main/java/hudson/drools/StartProcessCallable.java
===================================================================
--- src/main/java/hudson/drools/StartProcessCallable.java	(revision 20976)
+++ src/main/java/hudson/drools/StartProcessCallable.java	(working copy)
@@ -21,7 +21,7 @@
 	public ProcessInstance call(StatefulKnowledgeSession session)
 			throws Exception {
 		Map<String, Object> parameters = new HashMap<String, Object>();
-		parameters.put(RUN, new RunWrapper(run));
+		parameters.put(RUN, run);
 		long processInstanceId = session.startProcess(processId, parameters)
 				.getId();
 		ProcessInstance instance = session
Index: src/main/java/hudson/drools/WorkItemAction.java
===================================================================
--- src/main/java/hudson/drools/WorkItemAction.java	(revision 20976)
+++ src/main/java/hudson/drools/WorkItemAction.java	(working copy)
@@ -67,8 +67,7 @@
 	}
 
 	public void scheduleBuild() {
-		AbstractProject project = (AbstractProject) Hudson.getInstance()
-				.getItem(projectName);
+		AbstractProject project = (AbstractProject) Hudson.getInstance().getItem(projectName);
 		if (project == null) {
 			throw new IllegalArgumentException("project " + projectName
 					+ " does not exist (work item " + workItemId + ")");
Index: src/main/java/hudson/drools/renderer/Build.java
===================================================================
--- src/main/java/hudson/drools/renderer/Build.java	(revision 0)
+++ src/main/java/hudson/drools/renderer/Build.java	(revision 0)
@@ -0,0 +1,66 @@
+/**
+ * 
+ */
+package hudson.drools.renderer;
+
+import hudson.model.Job;
+import hudson.model.Result;
+import hudson.model.Run;
+
+import java.awt.Color;
+import java.awt.Graphics2D;
+import java.awt.Image;
+
+public class Build extends WorkItem {
+
+	public String project;
+	Run run;
+
+	public Build(String type, String name, String id, String project,
+			int x, int y, int width, int height) {
+		super(type, name, id, x, y, width, height);
+		this.project = project;
+	}
+
+	@Override
+	public Image getImage() {
+		return RendererConstants.workItemImage;
+	}
+
+	@Override
+	public boolean paintIcon(Graphics2D g2, int x, int y) {
+		if (run == null || run.getResult() == null) {
+			return super.paintIcon(g2, x, y);
+		}
+		Color c;
+		if (run.getResult() == Result.SUCCESS) {
+			c = RendererConstants.BUILD_SUCCESS_COLOR;
+		} else if (run.getResult() == Result.UNSTABLE) {
+			c = RendererConstants.BUILD_UNSTABLE_COLOR;
+		} else if (run.getResult() == Result.ABORTED) {
+			c = RendererConstants.BUILD_CANCELED_COLOR;
+		} else {
+			c = RendererConstants.BUILD_FAILED_COLOR;
+		}
+		g2.translate(x, y);
+		RuleFlowRenderer.paintBall(g2, c);
+		g2.translate(-x, -y);
+
+		return true;
+	}
+
+	@Override
+	public String getUrl() {
+		if (run != null) {
+			return run.getUrl();
+		}
+		
+		Job job = RuleFlowRenderer.getJobUrl(project);
+		if (job != null) {
+			return job.getUrl();
+		}
+		
+		return null;
+	}
+	
+}
\ No newline at end of file
Index: src/main/java/hudson/drools/renderer/Connection.java
===================================================================
--- src/main/java/hudson/drools/renderer/Connection.java	(revision 0)
+++ src/main/java/hudson/drools/renderer/Connection.java	(revision 0)
@@ -0,0 +1,15 @@
+/**
+ * 
+ */
+package hudson.drools.renderer;
+
+public class Connection {
+	public final RendererNode from;
+    public final RendererNode to;
+
+    public Connection(RendererNode from, RendererNode to) {
+		super();
+		this.from = from;
+		this.to = to;
+	}
+}
\ No newline at end of file
Index: src/main/java/hudson/drools/renderer/End.java
===================================================================
--- src/main/java/hudson/drools/renderer/End.java	(revision 0)
+++ src/main/java/hudson/drools/renderer/End.java	(revision 0)
@@ -0,0 +1,24 @@
+/**
+ * 
+ */
+package hudson.drools.renderer;
+
+import java.awt.Image;
+
+public class End extends RendererNode {
+
+	public End(String type, String name, String id, int x, int y,
+			int width, int height) {
+		super(type, name, id, x, y, width, height);
+	}
+
+	@Override
+	public Image getImage() {
+		return RendererConstants.endImage;
+	}
+
+    @Override
+    public String getImageURL() {
+        return "/plugin/drools/icons/process_stop.gif";
+    }
+}
\ No newline at end of file
Index: src/main/java/hudson/drools/renderer/Event.java
===================================================================
--- src/main/java/hudson/drools/renderer/Event.java	(revision 0)
+++ src/main/java/hudson/drools/renderer/Event.java	(revision 0)
@@ -0,0 +1,24 @@
+/**
+ * 
+ */
+package hudson.drools.renderer;
+
+import java.awt.Image;
+
+public class Event extends RendererNode {
+
+	public Event(String type, String name, String id, int x, int y,
+			int width, int height) {
+		super(type, name, id, x, y, width, height);
+	}
+
+	@Override
+	public Image getImage() {
+		return RendererConstants.eventImage;
+	}
+
+    @Override
+    public String getImageURL() {
+        return "/plugin/drools/icons/event.gif";
+    }
+}
\ No newline at end of file
Index: src/main/java/hudson/drools/renderer/ForEach.java
===================================================================
--- src/main/java/hudson/drools/renderer/ForEach.java	(revision 0)
+++ src/main/java/hudson/drools/renderer/ForEach.java	(revision 0)
@@ -0,0 +1,57 @@
+/**
+ * 
+ */
+package hudson.drools.renderer;
+
+import java.awt.Color;
+import java.awt.Graphics2D;
+import java.awt.RenderingHints;
+import java.awt.Shape;
+import java.awt.geom.Rectangle2D;
+
+public class ForEach extends RendererNode {
+
+	public ForEach(String type, String name, String id, int x, int y,
+			int width, int height) {
+		super(type, name, id, x, y, width, height);
+	}
+	
+	@Override
+	public void paint(Graphics2D g2) {
+		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
+				RenderingHints.VALUE_ANTIALIAS_ON);
+
+		Rectangle2D.Double rect = getRectangle();
+
+		Shape shape = getShape();
+
+		g2.setPaint(getColor());
+
+		g2.fill(shape);
+
+		Shape clip = g2.getClip();
+
+		Color stateColor = getStateColor();
+		if (stateColor != null) {
+			g2.setPaint(stateColor);
+			g2.setClip((int) rect.x, (int) rect.y, 25, (int) rect.height);
+			g2.fill(shape);
+		}
+
+		g2.setClip(clip);
+		g2.setPaint(RendererConstants.LINE_COLOR);
+		g2.draw(shape);
+
+		g2.setColor(RendererConstants.TEXT_COLOR);
+		g2.setFont(RendererConstants.FONT);
+
+		g2
+				.drawString(
+						name,
+						(int) (rect.x + 6),
+						(int) (rect.y + 18));
+
+	}
+
+
+}
\ No newline at end of file
Index: src/main/java/hudson/drools/renderer/HumanTask.java
===================================================================
--- src/main/java/hudson/drools/renderer/HumanTask.java	(revision 0)
+++ src/main/java/hudson/drools/renderer/HumanTask.java	(revision 0)
@@ -0,0 +1,24 @@
+/**
+ * 
+ */
+package hudson.drools.renderer;
+
+import java.awt.Image;
+
+public class HumanTask extends WorkItem {
+
+	public HumanTask(String type, String name, String id, int x, int y,
+			int width, int height) {
+		super(type, name, id, x, y, width, height);
+	}
+
+	@Override
+	public Image getImage() {
+		return RendererConstants.humanTaskImage;
+	}
+
+    @Override
+    public String getImageURL() {
+        return "/plugin/drools/icons/human_task.gif";
+    }
+}
\ No newline at end of file
Index: src/main/java/hudson/drools/renderer/NodeState.java
===================================================================
--- src/main/java/hudson/drools/renderer/NodeState.java	(revision 0)
+++ src/main/java/hudson/drools/renderer/NodeState.java	(revision 0)
@@ -0,0 +1,8 @@
+/**
+ * 
+ */
+package hudson.drools.renderer;
+
+enum NodeState {
+    IN_PROGRESS, COMPLETED, INACTIVE, FAILED
+}
\ No newline at end of file
Index: src/main/java/hudson/drools/renderer/RendererConstants.java
===================================================================
--- src/main/java/hudson/drools/renderer/RendererConstants.java	(revision 0)
+++ src/main/java/hudson/drools/renderer/RendererConstants.java	(revision 0)
@@ -0,0 +1,37 @@
+package hudson.drools.renderer;
+
+import java.awt.Color;
+import java.awt.Font;
+import java.awt.Image;
+import java.awt.Toolkit;
+
+public class RendererConstants {
+
+    private static Toolkit toolkit = Toolkit.getDefaultToolkit();
+
+    public static final Color BUILD_CANCELED_COLOR = new Color(200, 200, 200);
+    public static final Color BUILD_FAILED_COLOR = new Color(220, 80, 80);
+    public static final Color BUILD_SUCCESS_COLOR = new Color(110, 110, 255);
+    public static final Color BUILD_UNSTABLE_COLOR = new Color(246, 248, 64);
+    public static final Image endImage = toolkit.getImage(RendererConstants.class
+            .getResource("/icons/process_stop.gif"));
+    public static final Image eventImage = toolkit.getImage(RendererConstants.class
+            .getResource("/icons/event.gif"));
+    public static final Font FONT = new Font("Arial", Font.PLAIN, 11);
+    public static final Image humanTaskImage = toolkit
+            .getImage(RendererConstants.class
+                    .getResource("/icons/human_task.gif"));
+    public static final Image joinImage = toolkit.getImage(RendererConstants.class
+            .getResource("/icons/join.gif"));
+    public static Color LINE_COLOR = Color.BLACK;
+    public static final Color NODE_COMPLETE_COLOR = new Color(132, 217, 50);
+    public static final Color NODE_IN_PROGRESS_COLOR = new Color(193, 247, 160);
+    public static final Image scriptImage = toolkit.getImage(RendererConstants.class
+            .getResource("/icons/open.gif"));
+    public static final Image startImage = toolkit.getImage(RendererConstants.class
+            .getResource("/icons/process_start.gif"));
+    public static final Color TEXT_COLOR = Color.BLACK;
+    public static final Image workItemImage = toolkit
+            .getImage(RendererConstants.class.getResource("/icons/dsl.png"));
+
+}
Index: src/main/java/hudson/drools/renderer/RendererNode.java
===================================================================
--- src/main/java/hudson/drools/renderer/RendererNode.java	(revision 0)
+++ src/main/java/hudson/drools/renderer/RendererNode.java	(revision 0)
@@ -0,0 +1,120 @@
+/**
+ * 
+ */
+package hudson.drools.renderer;
+
+
+import java.awt.Color;
+import java.awt.Graphics2D;
+import java.awt.Image;
+import java.awt.RenderingHints;
+import java.awt.Shape;
+import java.awt.geom.Rectangle2D;
+
+public class RendererNode {
+	public final String type, name, id;
+	public final int x, y, width, height;
+
+	public NodeState state = NodeState.INACTIVE;
+
+	public RendererNode(String type, String name, String id, int x, int y,
+			int width, int height) {
+		super();
+		this.type = type;
+		this.name = name;
+		this.id = id;
+		this.x = x;
+		this.y = y;
+		this.width = width;
+		this.height = height;
+	}
+
+	public String getUrl() {
+		return null;
+	}
+
+	public Rectangle2D.Double getRectangle() {
+		return new Rectangle2D.Double(x, y, width, height);
+	}
+
+	public Shape getShape() {
+		return getRectangle();
+	}
+
+	public Image getImage() {
+		return null;
+	}
+	
+	public String getImageURL() {
+	    return null;
+	}
+
+	public Color getColor() {
+		return Color.WHITE;
+	}
+
+	public Color getStateColor() {
+		switch (state) {
+		case IN_PROGRESS:
+			return RendererConstants.NODE_IN_PROGRESS_COLOR;
+		case INACTIVE:
+			return null;
+		case COMPLETED:
+			return RendererConstants.NODE_COMPLETE_COLOR;
+		default:
+			return null;
+		}
+	}
+
+	public void paint(Graphics2D g2) {
+		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
+				RenderingHints.VALUE_ANTIALIAS_ON);
+
+		Rectangle2D.Double rect = getRectangle();
+
+		Shape shape = getShape();
+
+		g2.setPaint(getColor());
+
+		g2.fill(shape);
+
+		Shape clip = g2.getClip();
+
+		Color stateColor = getStateColor();
+		if (stateColor != null) {
+			g2.setPaint(stateColor);
+			g2.setClip((int) rect.x, (int) rect.y, 25, (int) rect.height);
+			g2.fill(shape);
+		}
+
+		g2.setClip(clip);
+		g2.setPaint(RendererConstants.LINE_COLOR);
+		g2.draw(shape);
+
+		int imageY = (int) (rect.y + rect.height / 2 - 16 / 2);
+		int imageX = (int) rect.x + 6;
+
+		boolean painted = paintIcon(g2, imageX, imageY);
+		int textWidth = g2.getFontMetrics().stringWidth(name);
+		int textHeight = g2.getFontMetrics().getAscent();
+
+		g2.setColor(RendererConstants.TEXT_COLOR);
+		g2.setFont(RendererConstants.FONT);
+
+		g2
+				.drawString(
+						name,
+						(int) (rect.x + (painted ? 10 : 0) + (rect.width - textWidth) / 2),
+						(int) (rect.y + (rect.height + textHeight) / 2));
+
+	}
+
+	public boolean paintIcon(Graphics2D g2, int imageX, int imageY) {
+		Image image = getImage();
+		if (image != null) {
+			g2.drawImage(image, imageX, imageY, null);
+		}
+		return image != null;
+	}
+
+}
\ No newline at end of file
Index: src/main/java/hudson/drools/renderer/RuleFlowRenderer.java
===================================================================
--- src/main/java/hudson/drools/renderer/RuleFlowRenderer.java	(revision 0)
+++ src/main/java/hudson/drools/renderer/RuleFlowRenderer.java	(revision 0)
@@ -0,0 +1,434 @@
+package hudson.drools.renderer;
+
+import hudson.drools.GraphicsUtil;
+import static hudson.drools.renderer.RendererConstants.*;
+import hudson.drools.NodeInstanceLog;
+import hudson.drools.WorkItemAction;
+import hudson.model.Hudson;
+import hudson.model.Job;
+import hudson.model.Run;
+
+import java.awt.BasicStroke;
+import java.awt.Color;
+import java.awt.GradientPaint;
+import java.awt.Graphics2D;
+import java.awt.Paint;
+import java.awt.Polygon;
+import java.awt.RadialGradientPaint;
+import java.awt.RenderingHints;
+import java.awt.geom.AffineTransform;
+import java.awt.geom.Line2D;
+import java.awt.geom.Point2D;
+import java.awt.geom.Rectangle2D;
+import java.awt.geom.Point2D.Double;
+import java.awt.image.BufferedImage;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+import javax.imageio.ImageIO;
+import javax.servlet.ServletOutputStream;
+
+import org.dom4j.Document;
+import org.dom4j.DocumentException;
+import org.dom4j.Element;
+import org.dom4j.io.SAXReader;
+
+public class RuleFlowRenderer {
+
+    private Map<String, RendererNode> nodes = new HashMap<String, RendererNode>();
+    private List<Connection> connections = new ArrayList<Connection>();
+    private List<Connection> compositeConnections = new ArrayList<Connection>();
+
+    private int width, height;
+
+    // private List<NodeInstanceLog> logs;
+
+    public RuleFlowRenderer(String xml) {
+        try {
+            readResource(new SAXReader().read(new StringReader(xml)));
+        } catch (DocumentException e) {
+            throw new IllegalArgumentException("Cannot parse workflow xml");
+        }
+    }
+
+    public RuleFlowRenderer(String xml, List<NodeInstanceLog> logs) {
+        this(xml);
+        // this.logs = logs;
+
+        for (NodeInstanceLog log : logs) {
+            RendererNode node = nodes.get(log.getNodeId());
+            if (node == null) {
+                System.out.println("unknown node for " + log);
+                continue;
+            }
+            if (log.getType() == NodeInstanceLog.TYPE_ENTER) {
+                node.state = NodeState.IN_PROGRESS;
+            } else if (log.getType() == NodeInstanceLog.TYPE_EXIT) {
+                node.state = NodeState.COMPLETED;
+            }
+            if (node instanceof Build) {
+                String projectName = ((Build) node).project;
+                Job project = getJobUrl(projectName);
+                if (project != null) {
+                    Run run = WorkItemAction.findRun(project, log
+                            .getProcessInstanceId());
+                    if (run != null) {
+                        ((Build) node).run = run;
+                    }
+                }
+            }
+        }
+    }
+
+    static Job getJobUrl(String projectName) {
+        return (Hudson.getInstance() != null) ? (Job) Hudson.getInstance()
+                .getItem(projectName) : null;
+    }
+
+    private void readResource(Document document) throws DocumentException {
+
+        int maxX = 0;
+        int maxY = 0;
+        int minX = Integer.MAX_VALUE;
+        int minY = Integer.MAX_VALUE;
+
+        Element root = document.getRootElement();
+
+        Iterator it = root.element("nodes").elementIterator();
+        while (it.hasNext()) {
+            Element el = (Element) it.next();
+            int x = Integer.parseInt(el.attributeValue("x"));
+            int y = Integer.parseInt(el.attributeValue("y"));
+            int width = Integer.parseInt(el.attributeValue("width"));
+            int height = Integer.parseInt(el.attributeValue("height"));
+            maxX = Math.max(maxX, x + width);
+            maxY = Math.max(maxY, y + height);
+            minX = Math.min(minX, x);
+            minY = Math.min(minY, y);
+        }
+
+        int offsetX = minX - 5;
+        int offsetY = minY - 5;
+
+        it = root.element("nodes").elementIterator();
+        while (it.hasNext()) {
+            Element el = (Element) it.next();
+            RendererNode node = createNode(el, offsetX, offsetY);
+            nodes.put(node.id, node);
+        }
+
+        width = maxX - minX + 10;
+        height = maxY - minY + 10;
+
+        it = root.element("connections").elementIterator();
+        while (it.hasNext()) {
+            Element el = (Element) it.next();
+            String from = el.attributeValue("from");
+            String to = el.attributeValue("to");
+            connections.add(new Connection(nodes.get(from), nodes.get(to)));
+        }
+    }
+
+    private RendererNode createNode(Element el, int offsetX, int offsetY) {
+        String type = el.getName();
+        String name = el.attributeValue("name");
+        String id = el.attributeValue("id");
+        int x = Integer.parseInt(el.attributeValue("x")) - offsetX;
+        int y = Integer.parseInt(el.attributeValue("y")) - offsetY;
+        int width = el.attributeValue("width") != null ? Integer.parseInt(el
+                .attributeValue("width")) : 80;
+        int height = el.attributeValue("height") != null ? Integer.parseInt(el
+                .attributeValue("height")) : 40;
+        RendererNode node;
+        if ("workItem".equals(type)) {
+            String workName = el.element("work").attributeValue("name");
+            if ("Script".equals(workName)) {
+                node = new Script(type, name, id, x, y, width, height);
+            } else if ("Build".equals(workName)) {
+                Iterator<Element> eit = el.element("work").elementIterator();
+                String project = null;
+                while (eit.hasNext()) {
+                    Element param = eit.next();
+                    if ("Project".equals(param.attributeValue("name"))) {
+                        project = param.elementText("value");
+                    }
+                }
+                node = new Build(type, name, id, project, x, y, width, height);
+            } else {
+                node = new WorkItem(type, name, id, x, y, width, height);
+            }
+        } else if ("humanTask".equals(type)) {
+            node = new HumanTask(type, name, id, x, y, width, height);
+        } else if ("start".equals(type)) {
+            node = new Start(type, name, id, x, y, width, height);
+        } else if ("end".equals(type)) {
+            node = new End(type, name, id, x, y, width, height);
+        } else if ("split".equals(type)) {
+            node = new Split(type, name, id, x, y, width, height);
+        } else if ("join".equals(type)) {
+            node = new Split(type, name, id, x, y, width, height);
+        } else if ("eventNode".equals(type)) {
+            node = new Event(type, name, id, x, y, width, height);
+        } else if ("forEach".equals(type)) {
+            node = new ForEach(type, name, id, x, y, width, height);
+            Iterator it = el.element("nodes").elementIterator();
+            while (it.hasNext()) {
+                Element e = (Element) it.next();
+                RendererNode child = createNode(e, -x, -y);
+                nodes.put(node.id + ":2:" + child.id, child);
+            }
+            it = el.element("connections").elementIterator();
+            while (it.hasNext()) {
+                Element conn = (Element) it.next();
+                String from = node.id + ":2:" + conn.attributeValue("from");
+                String to = node.id + ":2:" + conn.attributeValue("to");
+                compositeConnections.add(new Connection(nodes.get(from), nodes
+                        .get(to)));
+            }
+        } else {
+            node = new RendererNode(type, name, id, x, y, width, height);
+        }
+        return node;
+    }
+
+    public Collection<RendererNode> getNodes() {
+        return nodes.values();
+    }
+
+    public List<Connection> getConnections() {
+        return connections;
+    }
+
+    public void paint(Graphics2D g2) {
+        g2.setColor(Color.WHITE);
+        g2.fillRect(0, 0, getWidth(), getHeight());
+
+        for (Connection connection : connections) {
+            Rectangle2D.Double fromRect = connection.from.getRectangle();
+            Rectangle2D.Double toRect = connection.to.getRectangle();
+            paintLine(g2, fromRect, toRect);
+        }
+
+        for (RendererNode node : nodes.values()) {
+            if (node instanceof ForEach)
+                node.paint(g2);
+        }
+
+        for (Connection connection : compositeConnections) {
+            Rectangle2D.Double fromRect = connection.from.getRectangle();
+            Rectangle2D.Double toRect = connection.to.getRectangle();
+            paintLine(g2, fromRect, toRect);
+        }
+
+        for (RendererNode node : nodes.values()) {
+            if (!(node instanceof ForEach))
+                node.paint(g2);
+        }
+    }
+
+    public static void paintLine(Graphics2D g2, Rectangle2D.Double from,
+            Rectangle2D.Double to) {
+
+        Point2D.Double fromRectCenter = new Point2D.Double(from.getCenterX(),
+                from.getCenterY());
+        Point2D.Double toRectCenter = new Point2D.Double(to.getCenterX(), to
+                .getCenterY());
+        Line2D.Double line = new Line2D.Double(fromRectCenter, toRectCenter);
+
+        Double p1 = new Point2D.Double();
+        GraphicsUtil.getLineRectangleIntersection(from, line, p1);
+        Double p2 = new Point2D.Double();
+        GraphicsUtil.getLineRectangleIntersection(to, line, p2);
+
+        // drawArrow(g2, new Line2D.Double(p1,p2), 1, true);
+        drawArrow(g2, line, 1, true);
+
+    }
+
+    public static void drawArrow(Graphics2D g2d, Line2D.Double line,
+            float stroke, boolean arrow) {
+        int xCenter = (int) line.getX1();
+        int yCenter = (int) line.getY1();
+        double x = line.getX2();
+        double y = line.getY2();
+        double aDir = Math.atan2(xCenter - x, yCenter - y);
+        int i1 = 12 + (int) (stroke * 2);
+        int i2 = 6 + (int) stroke; // make the arrow head the same size
+
+        Line2D.Double base = new Line2D.Double(x + xCor(i1, aDir + .5), y
+                + yCor(i1, aDir + .5), x + xCor(i1, aDir - .5), y
+                + yCor(i1, aDir - .5));
+        Point2D.Double intersect = new Point2D.Double();
+        GraphicsUtil.getLineLineIntersection(line, base, intersect);
+
+        g2d.setPaint(LINE_COLOR);
+        if (arrow) {
+            g2d.draw(new Line2D.Double(xCenter, yCenter, intersect.x,
+                    intersect.y));
+
+            g2d.setStroke(new BasicStroke(1f)); // make the arrow head solid
+            // even if
+            // dash pattern has been specified
+            Polygon tmpPoly = new Polygon();
+            // regardless of the length
+            tmpPoly.addPoint((int) x, (int) y); // arrow tip
+            tmpPoly.addPoint((int) x + xCor(i1, aDir + .5), (int) y
+                    + yCor(i1, aDir + .5));
+            // tmpPoly.addPoint(x + xCor(i2, aDir), y + yCor(i2, aDir));
+            tmpPoly.addPoint((int) x + xCor(i1, aDir - .5), (int) y
+                    + yCor(i1, aDir - .5));
+            tmpPoly.addPoint((int) x, (int) y); // arrow tip
+            g2d.drawPolygon(tmpPoly);
+        } else {
+            g2d.draw(new Line2D.Double(xCenter, yCenter, x, y));
+        }
+        // g2d.setPaint(Color.WHITE);
+    }
+
+    private static int yCor(int len, double dir) {
+        return (int) (len * Math.cos(dir));
+    }
+
+    private static int xCor(int len, double dir) {
+        return (int) (len * Math.sin(dir));
+    }
+
+    public String getNodeName(String id) {
+        RendererNode node = nodes.get(id);
+        return node != null ? node.name : null;
+    }
+
+    public void write(OutputStream output) throws IOException {
+        BufferedImage aimg = new BufferedImage(getWidth(), getHeight(),
+                BufferedImage.TYPE_INT_RGB);
+        Graphics2D g = aimg.createGraphics();
+        paint(g);
+        g.dispose();
+        ImageIO.write(aimg, "png", output);
+    }
+
+    public int getWidth() {
+        return width;
+    }
+
+    public int getHeight() {
+        return height;
+    }
+
+    public static void paintBall(Graphics2D g2, Color c) {
+        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
+                RenderingHints.VALUE_ANTIALIAS_ON);
+
+        int diameter = 16;
+
+        // Retains the previous state
+        Paint oldPaint = g2.getPaint();
+
+        // Fills the circle with solid blue color
+        g2.setColor(c);
+        g2.fillOval(0, 0, diameter - 1, diameter - 1);
+
+        // Adds shadows at the top
+        Paint p;
+        p = new GradientPaint(0, 0, new Color(0.0f, 0.0f, 0.0f, 0.4f), 0,
+                diameter, new Color(0.0f, 0.0f, 0.0f, 0.0f));
+        g2.setPaint(p);
+        g2.fillOval(0, 0, diameter - 1, diameter - 1);
+
+        // Adds highlights at the bottom
+        p = new GradientPaint(0, 0, new Color(1.0f, 1.0f, 1.0f, 0.0f), 0,
+                diameter, new Color(1.0f, 1.0f, 1.0f, 0.0f));
+        g2.setPaint(p);
+        g2.fillOval(0, 0, diameter - 1, diameter - 1);
+
+        // Creates dark edges for 3D effect
+        p = new RadialGradientPaint(new Point2D.Double(diameter * .4,
+                diameter * .45), diameter / 2.0f, new float[] { 0.0f, 0.95f },
+                new Color[] {
+                        new Color(c.getRed(), c.getGreen(), c.getBlue(), 127),
+                        new Color(0.0f, 0.0f, 0.0f, 0.0f) });
+        g2.setPaint(p);
+        g2.fillOval(0, 0, diameter - 1, diameter - 1);
+
+        // Adds oval inner highlight at the bottom
+        p = new RadialGradientPaint(new Point2D.Double(diameter / 2.0,
+                diameter * 1.5), diameter / 2.3f, new Point2D.Double(
+                diameter / 2.0, diameter * 1.75 + 6),
+                new float[] { 0.0f, 0.8f }, new Color[] {
+                        new Color(c.getRed(), c.getGreen(), c.getBlue(), 255),
+                        new Color(c.getRed(), c.getGreen(), c.getBlue(), 0) },
+                RadialGradientPaint.CycleMethod.NO_CYCLE,
+                RadialGradientPaint.ColorSpaceType.SRGB, AffineTransform
+                        .getScaleInstance(1.0, 0.5));
+        g2.setPaint(p);
+        g2.fillOval(0, 0, diameter - 1, diameter - 1);
+
+        // Restores the previous state
+        g2.setPaint(oldPaint);
+    }
+
+    public void writeSVG(ServletOutputStream output) throws IOException {
+        output
+                .print("<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='"
+                        + getWidth() + "' height='" + getHeight() + "'>");
+        output.println("<g>");
+
+        for (Connection connection : connections) {
+            Rectangle2D.Double fromRect = connection.from.getRectangle();
+            Rectangle2D.Double toRect = connection.to.getRectangle();
+
+            output.println("<line x1='" + fromRect.getCenterX() + "' y1='"
+                    + fromRect.getCenterY() + "' x2='" + toRect.getCenterX()
+                    + "' y2='" + toRect.getCenterY()
+                    + "' style='stroke:rgb(0,0,0);stoke-width:1'/>");
+
+        }
+
+        for (RendererNode node : nodes.values()) {
+            // if (node instanceof ForEach) node.paint(g2);
+        }
+
+        for (Connection connection : compositeConnections) {
+            Rectangle2D.Double fromRect = connection.from.getRectangle();
+            Rectangle2D.Double toRect = connection.to.getRectangle();
+            output.println("<line x1='" + fromRect.getCenterX() + "' y1='"
+                    + fromRect.getCenterY() + "' x2='" + toRect.getCenterX()
+                    + "' y2='" + toRect.getCenterY() + "'");
+        }
+
+        for (RendererNode node : nodes.values()) {
+            // if (!(node instanceof ForEach)) node.paint(g2);
+            output
+                    .println("<rect x='"
+                            + node.x
+                            + "' y='"
+                            + node.y
+                            + "' width='"
+                            + node.width
+                            + "' height='"
+                            + node.height
+                            + "' style='fill:rgb(255,255,255);stroke-width:1;stroke:rgb(0,0,0)'/>");
+            output.println("<text x='" + (node.x + 16) + "' y='"
+                    + (node.y + (node.height / 2) + 4) + "' font-size='11'>"
+                    + node.name + "</text>");
+            output
+                    .println("<image x='"
+                            + node.x
+                            + "' y='"
+                            + (node.y + (node.height / 2) - 8)
+                            + "' width='16' height='16' xlink:href='/plugin/drools/icons/event.gif'/>");
+        }
+
+        output.println("</g>");
+        output.println("</svg>");
+
+    }
+
+}

Property changes on: src/main/java/hudson/drools/renderer/RuleFlowRenderer.java
___________________________________________________________________
Added: svn:executable
   + *

Index: src/main/java/hudson/drools/renderer/Script.java
===================================================================
--- src/main/java/hudson/drools/renderer/Script.java	(revision 0)
+++ src/main/java/hudson/drools/renderer/Script.java	(revision 0)
@@ -0,0 +1,24 @@
+/**
+ * 
+ */
+package hudson.drools.renderer;
+
+import java.awt.Image;
+
+public class Script extends WorkItem {
+
+	public Script(String type, String name, String id, int x, int y,
+			int width, int height) {
+		super(type, name, id, x, y, width, height);
+	}
+
+	@Override
+	public Image getImage() {
+		return RendererConstants.scriptImage;
+	}
+
+    @Override
+    public String getImageURL() {
+        return "/plugin/drools/icons/open.gif";
+    }
+}
\ No newline at end of file
Index: src/main/java/hudson/drools/renderer/Split.java
===================================================================
--- src/main/java/hudson/drools/renderer/Split.java	(revision 0)
+++ src/main/java/hudson/drools/renderer/Split.java	(revision 0)
@@ -0,0 +1,39 @@
+/**
+ * 
+ */
+package hudson.drools.renderer;
+
+import java.awt.Color;
+import java.awt.Image;
+import java.awt.Shape;
+import java.awt.geom.Ellipse2D;
+
+public class Split extends RendererNode {
+
+	private Color color = new Color(70, 130, 180);
+
+	public Split(String type, String name, String id, int x, int y,
+			int width, int height) {
+		super(type, name, id, x, y, width, height);
+	}
+
+	@Override
+	public Shape getShape() {
+		return new Ellipse2D.Double(x, y, width, height);
+	}
+
+	@Override
+	public Color getColor() {
+		return color;
+	}
+
+	@Override
+	public Image getImage() {
+		return RendererConstants.joinImage;
+	}
+
+    @Override
+    public String getImageURL() {
+        return "/plugin/drools/icons/join.gif";
+    }
+}
\ No newline at end of file
Index: src/main/java/hudson/drools/renderer/Start.java
===================================================================
--- src/main/java/hudson/drools/renderer/Start.java	(revision 0)
+++ src/main/java/hudson/drools/renderer/Start.java	(revision 0)
@@ -0,0 +1,26 @@
+/**
+ * 
+ */
+package hudson.drools.renderer;
+
+import java.awt.Image;
+
+public class Start extends RendererNode {
+
+	public Start(String type, String name, String id, int x, int y,
+			int width, int height) {
+		super(type, name, id, x, y, width, height);
+	}
+
+	@Override
+	public Image getImage() {
+		return RendererConstants.startImage;
+	}
+	
+    @Override
+    public String getImageURL() {
+        return "/plugin/drools/icons/process_start.gif";
+    }
+
+
+}
\ No newline at end of file
Index: src/main/java/hudson/drools/renderer/WorkItem.java
===================================================================
--- src/main/java/hudson/drools/renderer/WorkItem.java	(revision 0)
+++ src/main/java/hudson/drools/renderer/WorkItem.java	(revision 0)
@@ -0,0 +1,40 @@
+/**
+ * 
+ */
+package hudson.drools.renderer;
+
+import java.awt.Color;
+import java.awt.Image;
+import java.awt.Shape;
+import java.awt.geom.RoundRectangle2D;
+
+public class WorkItem extends RendererNode {
+
+	private Color color = new Color(255, 250, 205);
+
+	public WorkItem(String type, String name, String id, int x, int y,
+			int width, int height) {
+		super(type, name, id, x, y, width, height);
+	}
+
+	@Override
+	public Shape getShape() {
+		return new RoundRectangle2D.Double(x, y, width, height, 25, 25);
+	}
+
+	@Override
+	public Color getColor() {
+		return color;
+	}
+
+	@Override
+	public Image getImage() {
+		return RendererConstants.workItemImage;
+	}
+
+    @Override
+    public String getImageURL() {
+        return "/plugin/drools/icons/dsl.png";
+    }
+
+}
\ No newline at end of file
Index: src/main/resources/hudson/drools/DroolsProject/main.jelly
===================================================================
--- src/main/resources/hudson/drools/DroolsProject/main.jelly	(revision 20976)
+++ src/main/resources/hudson/drools/DroolsProject/main.jelly	(working copy)
@@ -1,5 +1,20 @@
-<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:i="jelly:fmt" xmlns:p="/lib/hudson/project">
+<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define"
+	xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form"
+	xmlns:i="jelly:fmt" xmlns:p="/lib/hudson/project">
 
-	  <img src="processImage"/>
-
+	<MAP NAME="map">
+		<j:forEach var="node" items="${it.ruleFlowRenderer.nodes}">
+			<j:if test="${node.url != null}">
+				<area shape="rect"
+					coords="${node.x},${node.y},${node.x+node.width},${node.y+node.height}"
+					href="${rootURL}/${node.url}" alt="${node.name}" title="${node.name}" />
+			</j:if>
+		</j:forEach>
+	</MAP>
+	<img src="processImage" usemap="#map"/>
+	<!--
+		<object type="svg+xml" data="ruleFlowRenderer/svg"
+		width="${it.ruleFlowRenderer.width}"
+		height="${it.ruleFlowRenderer.height}"/>
+	-->
 </j:jelly>
\ No newline at end of file
Index: src/main/webapp/svg.htc
===================================================================
--- src/main/webapp/svg.htc	(revision 0)
+++ src/main/webapp/svg.htc	(revision 0)
@@ -0,0 +1 @@
+<component lightWeight="true"> <property name="nodeName" get="_getNodeName" /> <property name="nodeType" get="_getNodeType" /> <property name="nodeValue" get="_getNodeValue" put="_setNodeValue" /> <property name="localName" get="_getLocalName" /> <property name="prefix" get="_getPrefix" /> <property name="namespaceURI" get="_getNamespaceURI" /> <property name="childNodes" get="_getChildNodes" /> <property name="parentNode" get="_getParentNode" /> <property name="firstChild" get="_getFirstChild" /> <property name="lastChild" get="_getLastChild" /> <property name="previousSibling" get="_getPreviousSibling" /> <property name="nextSibling" get="_getNextSibling" /> <property name="textContent" get="_getTextContent" put="_setTextContent" /> <property name="data" get="_getData" put="_setData" /> <property name="ownerDocument" get="_getOwnerDocument" /> <property name="id" get="_getId" put="_setId" /> <property name="x" get="_getX" /> <property name="y" get="_getY" /> <property name="width" get="_getWidth" /> <property name="height" get="_getHeight" /> <property name="fake" value="true" /> <method name="getAttribute" /> <method name="setAttribute" /> <method name="setAttributeNS" /> <method name="appendChild" /> <method name="removeChild" /> <method name="replaceChild" /> <method name="insertBefore" /> <method name="hasChildNodes" /> <method name="hasAttributes" /> <method name="isSupported" /> <method name="addEventListener" /> <method name="removeEventListener" /> <method name="_getHTCDocument" /> <method name="_getHTCDefaults" /> <defaults tabStop="false" contentEditable="false" canHaveHTML="true" viewInheritStyle="true" viewMasterTab="false" viewLinkContent="false" style="display: block" /> </component> <script type="text/javascript"> function _getHTCDocument(){return this.element.document;}function _getHTCDefaults(){return this.defaults;}function getAttribute(n){return this._fakeNode.getAttribute(n);}function setAttribute(n,v){return this._fakeNode.setAttribute(n,v);}function setAttributeNS(ns,qName,v){return this._fakeNode.setAttributeNS(ns,qName,v);}function appendChild(c){return this._fakeNode.appendChild(c);}function removeChild(c){return this._fakeNode.removeChild(c);}function replaceChild(n,o){return this._fakeNode.replaceChild(n,o);}function insertBefore(n,o){return this._fakeNode.insertBefore(n,o);}function hasChildNodes(){return this._fakeNode.hasChildNodes();}function hasAttributes(){return this._fakeNode.hasAttributes();}function isSupported(f,v){return this._fakeNode.isSupported(f,v);}function addEventListener(t,l,u){return this._fakeNode.addEventListener(t,l,u);}function removeEventListener(t,l,u){return this._fakeNode.removeEventListener(t,l,u);}function _getNodeName(){return this._fakeNode.nodeName;}function _getNodeType(){return this._fakeNode.nodeType;}function _getLocalName(){return this._fakeNode.localName;}function _getPrefix(){return this._fakeNode.prefix;}function _getNamespaceURI(){return this._fakeNode.namespaceURI;}function _getChildNodes(){return this._fakeNode._getChildNodes();}function _getParentNode(){return this._fakeNode._getParentNode();}function _getFirstChild(){return this._fakeNode._getFirstChild();}function _getLastChild(){return this._fakeNode._getLastChild();}function _getPreviousSibling(){return this._fakeNode._getPreviousSibling();}function _getNextSibling(){return this._fakeNode._getNextSibling();}function _getNodeValue(){return this._fakeNode._nodeValue;}function _setNodeValue(v){return this._fakeNode._setNodeValue(v);}function _getTextContent(){return this._fakeNode._getTextContent();}function _setTextContent(v){return this._fakeNode._setTextContent(v);}function _getData(){return this._fakeNode._getData();}function _setData(v){return this._fakeNode._setData(v);}function _getOwnerDocument(){return this._fakeNode.ownerDocument;}function _getId(){return this._fakeNode._getId();}function _setId(v){return this._fakeNode._setId(v);}function _getX(){return this._fakeNode._getX();}function _getY(){return this._fakeNode._getY();}function _getWidth(){return this._fakeNode._getWidth();}function _getHeight(){return this._fakeNode._getHeight();}if(window.__flash__removeCallback){window.__flash__removeCallback=(function(){return function(instance,name){if(instance){instance[name]=null;}};})();} </script><script type="text/vbscript"></script>
Index: src/main/webapp/svg.js
===================================================================
--- src/main/webapp/svg.js	(revision 0)
+++ src/main/webapp/svg.js	(revision 0)
@@ -0,0 +1 @@
+window.timer={};function start(subject,subjectStarted){if(subjectStarted&&!ifStarted(subjectStarted)){return;}window.timer[subject]={start:new Date().getTime()};}function end(subject,subjectStarted){if(subjectStarted&&!ifStarted(subjectStarted)){return;}if(!window.timer[subject]){console.log("Unknown subject: "+subject);return;}window.timer[subject].end=new Date().getTime();}function total(subject){if(!window.timer[subject]){console.log("Unknown subject: "+subject);return;}var t=window.timer[subject];if(t){return t.end-t.start;}else{return null;}}function ifStarted(subject){for(var i in window.timer){var t=window.timer[i];if(i==subject&&t.start!==undefined&&t.end===undefined){return true;}}return false;}function report(){for(var i in window.timer){var t=total(i);if(t!==null){console.log(i+": "+t+"ms");}}}(function(){window.svgns="http://www.w3.org/2000/svg";window.xlinkns="http://www.w3.org/1999/xlink";svgnsFake="urn:__fake__internal__namespace";var isOpera=false,isSafari=false,isMoz=false,isIE=false,isAIR=false,isKhtml=false,isFF=false;function _detectBrowsers(){var n=navigator,dua=n.userAgent,dav=n.appVersion,tv=parseFloat(dav);if(dua.indexOf("Opera")>=0){isOpera=tv;}var index=Math.max(dav.indexOf("WebKit"),dav.indexOf("Safari"),0);if(index){isSafari=parseFloat(dav.split("Version/")[1])||(parseFloat(dav.substr(index+7))>419.3)?3:2;}if(dua.indexOf("AdobeAIR")>=0){isAIR=1;}if(dav.indexOf("Konqueror")>=0||isSafari){isKhtml=tv;}if(dua.indexOf("Gecko")>=0&&!isKhtml){isMoz=tv;}if(isMoz){isFF=parseFloat(dua.split("Firefox/")[1])||undefined;}if(document.all&&!isOpera){isIE=parseFloat(dav.split("MSIE ")[1])||undefined;}}_detectBrowsers();function doDebugging(){var debug=false;var scripts=document.getElementsByTagName("script");for(var i=0;i<scripts.length;i++){if(scripts[i].src.indexOf("svg.js")!=-1){var debugSetting=scripts[i].getAttribute("data-debug");debug=(debugSetting==="true"||debugSetting===true)?true:false;}}return debug;}var debug=doDebugging();if(typeof console=="undefined"||!console.log){var queue=[];console={};if(!debug){console.log=function(){};}else{console.log=function(msg){var body=null;var delay=false;try{body=document.getElementsByTagName("body")[0];}catch(exp){delay=true;}if(isIE){try{document.documentElement.doScroll("left");}catch(exp){delay=true;}}if(delay){queue.push(msg);return;}var p;while(queue.length){var oldMsg=queue.shift();p=document.createElement("p");p.appendChild(document.createTextNode(oldMsg));body.appendChild(p);}p=document.createElement("p");p.appendChild(document.createTextNode(msg));body.appendChild(p);};if(isIE){function flushQueue(){while(queue.length){var oldMsg=queue.shift();p=document.createElement("p");p.appendChild(document.createTextNode(oldMsg));document.body.appendChild(p);}}var debugInterval=window.setInterval(function(){if(document.readyState=="complete"){flushQueue();window.clearTimeout(debugInterval);}},50);}}}function extend(f,addMe){for(var i in addMe){f.prototype[i]=addMe[i];}}function mixin(f,addMe){for(var i in addMe){f[i]=addMe[i];}}function xpath(doc,context,expr,namespaces){if(!context){context=doc.documentElement;}if(typeof XPathEvaluator!="undefined"){var evaluator=new XPathEvaluator();var resolver=doc.createNSResolver(context);var result=evaluator.evaluate(expr,context,resolver,0,null);var found=createNodeList(),current;while(current=result.iterateNext()){found.push(current);}return found;}else{doc.setProperty("SelectionLanguage","XPath");if(namespaces){var allNamespaces="";var foundNamespace={};for(var i=0;i<namespaces.length;i++){var namespaceURI=namespaces[i];var prefix=namespaces["_"+namespaceURI];if(!foundNamespace["_"+namespaceURI]){if(prefix=="xmlns"){allNamespaces+='xmlns="'+namespaceURI+'" ';}else{allNamespaces+="xmlns:"+prefix+'="'+namespaceURI+'" ';}foundNamespace["_"+namespaceURI]=namespaceURI;}}doc.setProperty("SelectionNamespaces",allNamespaces);}var found=context.selectNodes(expr);if(found===null||typeof found=="undefined"){found=createNodeList();}var results=createNodeList();for(var i=0;i<found.length;i++){results.push(found[i]);}return results;}}function parseXML(xml,preserveWhiteSpace){if(preserveWhiteSpace===undefined){preserveWhiteSpace=false;}var xmlDoc;if(typeof DOMParser!="undefined"){var parser=new DOMParser();try{xmlDoc=parser.parseFromString(xml,"application/xml");}catch(e){throw e;}var root=xmlDoc.documentElement;if(root.nodeName=="parsererror"){throw new Error("There is a bug in your SVG: "+(new XMLSerializer().serializeToString(root)));}}else{var versions=["Msxml2.DOMDocument.6.0","Msxml2.DOMDocument.3.0"];var xmlDoc;for(var i=0;i<versions.length;i++){try{xmlDoc=new ActiveXObject(versions[i]);if(xmlDoc){break;}}catch(e){}}if(!xmlDoc){throw new Error("Unable to instantiate XML parser");}try{xmlDoc.preserveWhiteSpace=preserveWhiteSpace;xmlDoc.resolveExternals=false;xmlDoc.validateOnParse=false;xmlDoc.setProperty("ProhibitDTD",false);xmlDoc.async="false";var successful=xmlDoc.loadXML(xml);if(!successful||xmlDoc.parseError.errorCode!==0){throw new Error(xmlDoc.parseError.reason);}}catch(e){console.log(e.message);throw new Error("Unable to parse SVG: "+e.message);}}return xmlDoc;}function hitch(context,method){if(typeof method=="string"){method=context[method];}return function(){return method.apply(context,(arguments.length)?arguments:[]);};}var XHR_PROGIDS=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"];function xhrObj(){if(typeof XMLHttpRequest!="undefined"){return new XMLHttpRequest();}else{if(ActiveXObject){var xhr=null;var i;for(i=0;i<XHR_PROGIDS.length&&!xhr;++i){try{xhr=new ActiveXObject(XHR_PROGIDS[i]);}catch(e){}}if(!xhr){throw new Error("XMLHttpRequest object not available on this platform");}return xhr;}}}function S4(){return(((1+Math.random())*65536)|0).toString(16).substring(1);}function guid(){return"_"+S4()+S4()+"_"+S4()+"_"+S4()+"_"+S4()+"_"+S4()+S4()+S4()+"_";}function SVGWeb(){this.libraryPath=this._getLibraryPath();this.htcFilename=this._getHTCFilename();if(isIE){FlashHandler._prepareBehavior(this.libraryPath,this.htcFilename);}this._interceptOnloadListeners();this._initDOMContentLoaded();}extend(SVGWeb,{libraryPath:"./",config:null,pageLoaded:false,handlers:[],totalLoaded:0,_guidLookup:[],_loadListeners:[],_removedNodes:[],addOnLoad:function(listener,fromObject,objectWindow){if(fromObject){var obj=objectWindow.frameElement;if(fromObject&&this.getHandlerType()=="flash"){listener.apply(objectWindow);}else{if(obj._svgHandler){obj._svgHandler._onObjectLoad(listener,objectWindow);}else{obj._svgWindow=objectWindow;obj._svgFunc=listener;}}}else{this._loadListeners.push(listener);}},getHandlerType:function(){if(this.renderer==FlashHandler){return"flash";}else{if(this.renderer==NativeHandler){return"native";}}},appendChild:function(node,parent){if(node.nodeName.toLowerCase()=="object"&&node.getAttribute("type")=="image/svg+xml"){this.totalSVG++;this._svgObjects.push(node);if(this.getHandlerType()=="native"){parent.appendChild(node);}var placeHolder=node;if(this.getHandlerType()=="flash"){if(node.onload){node.addEventListener("load",node.onload,false);}var div=document._createElement("div");for(var j=0;j<node.attributes.length;j++){var attr=node.attributes[j];div.setAttribute(attr.nodeName,attr.nodeValue);}parent.appendChild(div);div._listeners=node._listeners;placeHolder=div;}var objID=this._processSVGObject(placeHolder);node._objID=objID;}},removeChild:function(node,parent){if(node.nodeName.toLowerCase()=="object"||node.nodeName.toLowerCase()=="embed"){this.totalSVG--;this.totalLoaded--;var objID=node.getAttribute("id");var objHandler=this.handlers[objID];var newHandlers=[];for(var i=0;i<this.handlers.length;i++){var currentHandler=this.handlers[i];if(currentHandler!=objHandler){newHandlers[currentHandler.id]=currentHandler;newHandlers.push(currentHandler);}}this.handlers=newHandlers;if(this.getHandlerType()=="flash"){var iframeWin=objHandler.document.defaultView;for(var i=0;i<iframeWin._intervalIDs.length;i++){iframeWin.clearInterval(iframeWin._intervalIDs[i]);}for(var i=0;i<iframeWin._timeoutIDs.length;i++){iframeWin.clearTimeout(iframeWin._timeoutIDs[i]);}for(var i=0;i<objHandler._keyboardListeners.length;i++){var l=objHandler._keyboardListeners[i];if(isIE){document.detachEvent("onkeydown",l);}else{document.removeEventListener("keydown",l,true);document.removeEventListener("keydown",l,false);}}}for(var i=0;i<svgweb._svgObjects.length;i++){if(svgweb._svgObjects[i]._objID===objID){svgweb._svgObjects.splice(i,1);break;}}node.parentNode.removeChild(node);if(this.getHandlerType()=="flash"){var container=document.getElementById("__htc_container");if(container){for(var i=0;i<container.childNodes.length;i++){var child=container.childNodes[i];if(typeof child.ownerDocument!="undefined"&&child.ownerDocument===objHandler._svgObject.document){if(typeof child._fakeNode!="undefined"&&typeof child._fakeNode._htcNode!="undefined"){child._fakeNode._htcNode=null;}child._fakeNode=null;child._handler=null;}}}for(var guid in svgweb._guidLookup){var child=svgweb._guidLookup[guid];if(child._fake&&child.ownerDocument===objHandler.document){delete svgweb._guidLookup[guid];}}objHandler._finishedCallback=null;objHandler.flash.contentDocument=null;objHandler.flash=null;objHandler._xml=null;objHandler.window._scope=null;objHandler.window=null;var svgObj=objHandler._svgObject;var svgDoc=svgObj.document;svgDoc._nodeById=null;svgDoc._xml=null;svgDoc.defaultView=null;svgDoc.documentElement=null;svgDoc.rootElement=null;svgDoc.defaultView=null;svgDoc=null;svgObj._svgNode=null;svgObj._handler=null;iframeWin._setTimeout=null;iframeWin.setTimeout=null;iframeWin._setInterval=null;iframeWin.setInterval=null;objHandler._svgObject=null;svgObj=null;objHandler=null;iframeWin=null;}}},_initDOMContentLoaded:function(){var self=this;if(document.addEventListener){document.addEventListener("DOMContentLoaded",function(){self._saveWindowOnload();self._onDOMContentLoaded();},false);}else{document.write("<script id=__ie__svg__onload defer src=javascript:void(0)><\/script>");var script=document.getElementById("__ie__svg__onload");script.onreadystatechange=function(){if(this.readyState!="complete"&&window.onload){self._saveWindowOnload();}else{if(this.readyState=="complete"){self._onDOMContentLoaded();}}};var documentReady=function(){if(window.onload){self._saveWindowOnload();document.detachEvent("onreadystatechange",documentReady);}};document.attachEvent("onreadystatechange",documentReady);}},_getLibraryPath:function(){var libraryPath="./";var scripts=document.getElementsByTagName("script");for(var i=0;i<scripts.length;i++){if(scripts[i].src.indexOf("svg.js")!=-1&&scripts[i].getAttribute("data-path")){libraryPath=scripts[i].getAttribute("data-path");break;}}if(libraryPath.charAt(libraryPath.length-1)!="/"){libraryPath+="/";}return libraryPath;},_getHTCFilename:function(){var htcFilename="svg.htc";var loc=window.location.toString();if(loc.indexOf("svg.htcFilename=svg-htc.php")!=-1){return"svg-htc.php";}else{if(loc.indexOf("svg.htcFilename=svg-htc.jsp")!=-1){return"svg-htc.jsp";}else{if(loc.indexOf("svg.htcFilename=svg-htc.asp")!=-1){return"svg-htc.asp";}}}var scripts=document.getElementsByTagName("script");for(var i=0;i<scripts.length;i++){if(scripts[i].src.indexOf("svg.js")!=-1&&scripts[i].getAttribute("data-htc-filename")){htcFilename=scripts[i].getAttribute("data-htc-filename");break;}}return htcFilename;},_onDOMContentLoaded:function(){if(arguments.callee.done){return;}arguments.callee.done=true;this._startTime=new Date().getTime();var listener=document.getElementById("__ie__svg__onload");if(listener){listener.parentNode.removeChild(listener);listener.onreadystatechange=null;listener=null;}this.config=new RenderConfig();if(isIE){this._watchUnload();}this._svgScripts=this._getSVGScripts();this._svgObjects=this._getSVGObjects();this.totalSVG=this._svgScripts.length+this._svgObjects.length;this._cleanupSVGObjects();this._handleHTMLTitleBug();if(!this.config.supported){this._displayNotSupported(this.config.reason);this._fireOnLoad();return;}this.renderer;if(this.config.use=="flash"){this.renderer=FlashHandler;}else{if(this.config.use=="native"){this.renderer=NativeHandler;}}this.renderer._patchBrowserObjects(window,document);if(this.totalSVG===0){this._fireOnLoad();return;}var self=this;for(var i=0;i<this._svgScripts.length;i++){this._processSVGScript(this._svgScripts[i]);}for(var i=0;i<this._svgObjects.length;i++){var objID=this._processSVGObject(this._svgObjects[i]);this._svgObjects[i]._objID=objID;}},_getSVGScripts:function(){var scripts=document.getElementsByTagName("script");var results=[];for(var i=0;i<scripts.length;i++){if(scripts[i].type=="image/svg+xml"){results.push(scripts[i]);}}return results;},_getSVGObjects:function(){var objs=document.getElementsByTagName("object");var results=[];for(var i=0;i<objs.length;i++){if(objs[i].getAttribute("classid")=="image/svg+xml"){results.push(objs[i]);}else{if(objs[i].getAttribute("type")=="image/svg+xml"){results.push(objs[i]);}}}return results;},_displayNotSupported:function(reason){for(var i=0;i<this._svgObjects.length;i++){var obj=this._svgObjects[i];if(!obj.childNodes.length||(obj.childNodes.length==1&&obj.childNodes[0].nodeType==3&&/^[ ]*$/m.test(obj.childNodes[0].nodeValue))){var span=document.createElement("span");span.className="svg-noscript";span.appendChild(document.createTextNode(reason));obj.parentNode.replaceChild(span,obj);}}for(var i=0;i<this._svgScripts.length;i++){var script=this._svgScripts[i];var output=document.createElement("span");output.className="svg-noscript";var sibling=script.nextSibling;while(sibling&&sibling.nodeType!=1){sibling=sibling.nextSibling;}if(sibling&&sibling.nodeName.toLowerCase()=="noscript"){var noscript=sibling;output.innerHTML=noscript.innerHTML;}else{output.appendChild(document.createTextNode(reason));}script.parentNode.insertBefore(output,script);}},_fireOnLoad:function(){if(this.handlers.length<this._svgObjects.length){return;}var allLoaded=true;for(var i=0;i<this.handlers.length;i++){var h=this.handlers[i];if(h.type=="object"&&!h._loaded){allLoaded=false;break;}}if(!allLoaded){return;}this.pageLoaded=true;this._endTime=new Date().getTime();var self=this;window.setTimeout(function(){var listeners=self._loadListeners;self._loadListeners=[];this.totalLoaded=0;for(var i=0;i<listeners.length;i++){try{listeners[i]();}catch(exp){console.log("Error while firing onload: "+(exp.message||exp));}}},1);},_cleanSVG:function(svg,addMissing,normalizeWhitespace){svg=svg.replace(/^\s*/,"");svg=svg.replace(/\s*$/,"");RegExp.lastIndex=0;var match;var entityRE=/<!ENTITY\s+(\S+)\s+"([^"]*)"/g;while((match=entityRE.exec(svg))!=null){var entityName=RegExp.$1;var entityValue=RegExp.$2;svg=svg.replace("&"+entityName+";",entityValue);}if(addMissing){if(/\<\?xml/m.test(svg)==false){svg='<?xml version="1.0"?>\n'+svg;}if(svg.indexOf(":svg ")==-1){if(/xmlns\=['"]http:\/\/www\.w3\.org\/2000\/svg['"]/.test(svg)==false){svg=svg.replace("<svg",'<svg xmlns="http://www.w3.org/2000/svg"');}}if(/xmlns:[^=]+=['"]http:\/\/www\.w3\.org\/1999\/xlink['"]/.test(svg)==false){svg=svg.replace("<svg",'<svg xmlns:xlink="http://www.w3.org/1999/xlink"');}}if(normalizeWhitespace){svg=svg.replace(/\>\s+\</gm,"><");}if(this.renderer==FlashHandler){var commentRE=/<!\-\-/g;RegExp.lastIndex=0;match=commentRE.exec(svg);var i=0;var strippedSVG=svg;while(match&&RegExp.lastMatch){var endIndx=RegExp.rightContext.indexOf("-->")+3;var comment="<!--"+RegExp.rightContext.substring(0,endIndx);strippedSVG=strippedSVG.replace(comment,"");match=commentRE.exec(svg);i++;}svg=strippedSVG;svg=svg.replace(/<(svg:)?svg/,"<$1SVGROOT");svg=svg.replace(/<(svg:)?svg/g,"<$1NESTEDSVG");svg=svg.replace(/<(svg:)?SVGROOT/,"<$1svg");var separator=svg.match(/<[a-zA-Z_-]*:?svg/)[0];var pieces=svg.split(/<[a-zA-Z_-]*:?svg/);RegExp.lastIndex=0;var cdataRE=/<\!\[CDATA\[/g;match=cdataRE.exec(pieces[1]);var cdataBlocks=[];i=0;while(match&&RegExp.rightContext){var startIdx=cdataRE.lastIndex-"<![CDATA[".length;var context=RegExp.rightContext;var endIdx=cdataRE.lastIndex+context.indexOf("]]>")+2;var section=context.substring(0,context.indexOf("]]>"));section="<![CDATA["+section+"]]>";cdataBlocks.push(section);var before=pieces[1].substring(0,startIdx);var after=pieces[1].substring(endIdx+1,pieces[1].length);pieces[1]=before+"__SVG_CDATA_TOKEN_"+i+after;match=cdataRE.exec(pieces[1]);i++;}pieces[1]=pieces[1].replace(/>([^>]+)</g,"><__text>$1</__text><");for(var i=0;i<cdataBlocks.length;i++){pieces[1]=pieces[1].replace("__SVG_CDATA_TOKEN_"+i,cdataBlocks[i]);}svg=pieces[0]+separator+pieces[1];for(var i=2;i<pieces.length;i++){svg=svg+pieces[i];}}svg=svg.replace(/<(svg:)?NESTEDSVG/g,"<$1svg");if(this.renderer==FlashHandler){svg=FlashHandler._encodeFlashData(svg);svg=svg.replace(/xmlns(\:[^=]*)?=['"]http\:\/\/www\.w3\.org\/2000\/svg['"]/g,"xmlns$1='"+svgnsFake+"'");}var xml=this._addTracking(svg,normalizeWhitespace);if(typeof XMLSerializer!="undefined"){svg=(new XMLSerializer()).serializeToString(xml);}else{svg=xml.xml;}if(this.renderer==FlashHandler){svg=svg.replace(new RegExp(svgnsFake,"g"),svgns);}return{svg:svg,xml:xml};},_processSVGScript:function(script){var svg=script.innerHTML;var results=this._cleanSVG(svg,true,true);svg=results.svg;var xml=results.xml;var rootID=xml.documentElement.getAttribute("id");var rootOnload=xml.documentElement.getAttribute("onload");if(rootOnload){rootOnload=new Function(rootOnload);var f=(function(rootOnload,rootID){return function(){var handler=svgweb.handlers[rootID];var root;if(svgweb.getHandlerType()=="flash"){root=handler.document.documentElement._getProxyNode();}else{root=document.getElementById(rootID);}return rootOnload.apply(root);};})(rootOnload,rootID);this._loadListeners.push(f);}var self=this;var finishedCallback=function(id,type){script=null;xml=null;self._handleDone(id,type);};var handler=new this.renderer({type:"script",svgID:rootID,xml:xml,svgString:svg,scriptNode:script,finishedCallback:finishedCallback});this.handlers[rootID]=handler;this.handlers.push(handler);},_processSVGObject:function(obj){var objID=obj.getAttribute("id");if(!objID){obj.setAttribute("id",svgweb._generateID("__svg__random__","__object"));objID=obj.getAttribute("id");}var finishedCallback=(function(self){return function(id,type){self._handleDone(id,type);};})(this);var handler=new this.renderer({type:"object",objID:objID,objNode:obj,finishedCallback:finishedCallback});this.handlers[objID]=handler;this.handlers.push(handler);return objID;},_generateID:function(prefix,postfix){if(!postfix){postfix="";}if(!prefix){prefix="";}return prefix+guid()+postfix;},_addTracking:function(svg,normalizeWhitespace){var parseWhitespace=!normalizeWhitespace;var xmlDoc=parseXML(svg,parseWhitespace);var root=xmlDoc.documentElement;if(root&&!root.getAttribute("id")){root.setAttribute("id",this._generateID("__svg__random__",null));}if(this.getHandlerType()!="flash"){return xmlDoc;}var current=root;while(current){if(current.nodeType==_Node.ELEMENT_NODE){current.setAttribute("__guid",guid());}if(current.nodeType==_Node.ELEMENT_NODE&&!current.getAttribute("id")){current.setAttribute("id",svgweb._generateID("__svg__random__",null));}var next=current.firstChild;if(next){current=next;continue;}while(current){if(current!=root){next=current.nextSibling;if(next){current=next;break;}}if(current==root){current=null;}else{current=current.parentNode;if(current.nodeType!=1||current.nodeName.toUpperCase()=="SVG"){current=null;}}}}return xmlDoc;},_handleDone:function(id,type){this.totalLoaded++;if(this.totalLoaded>=this.totalSVG){this._fireOnLoad();}},_handleHTMLTitleBug:function(){var head=document.getElementsByTagName("head")[0];var title=head.getElementsByTagName("title");if(title.length===0){title=document.createElement("title");head.appendChild(title);}},_fireFlashError:function(logString){},_exportID:function(node){node.__defineGetter__("id",function(){return node.getAttribute("id");});node.__defineSetter__("id",function(newValue){return node.setAttribute("id",newValue);});},_watchUnload:function(){window.attachEvent("onunload",function(evt){window.detachEvent("onunload",arguments.callee);svgweb._fireUnload();});},_fireUnload:function(){if(!isIE){return;}for(var i=0;i<svgweb.handlers.length;i++){var root=svgweb.handlers[i].document.documentElement;if(svgweb.handlers[i].type=="script"){root=root._htcNode;}root.detachEvent("onpropertychange",root._fakeNode.style._changeListener);root.style.item=null;root.style.setProperty=null;root.style.getPropertyValue=null;var flashObj=svgweb.handlers[i].flash;flashObj.jsSetAttribute=flashObj.jsGetAttribute=flashObj.jsAddEventListener=flashObj.jsInsertBefore=flashObj.jsAddChildAt=flashObj.jsRemoveChild=flashObj.jsSetText=flashObj.jsAppendChild=flashObj.jsHandleLoad=flashObj.jsSuspendRedraw=flashObj.jsUnsuspendRedrawAll=null;flashObj.parentNode.removeChild(flashObj);root._fakeNode._htcNode=null;root._fakeNode=null;root._realParentNode=null;root._realPreviousSibling=null;root._realNextSibling=null;root._handler=null;root=null;}var container=document.getElementById("__htc_container");if(container){for(var i=0;i<container.childNodes.length;i++){var child=container.childNodes[i];child._fakeNode._htcNode=null;child._fakeNode=null;child._handler=null;}container.parentNode.removeChild(container);container=null;}for(var i=0;i<svgweb.handlers.length;i++){var handler=svgweb.handlers[i];handler.flash=null;}svgweb.handlers=null;for(var i=0;i<svgweb._removedNodes.length;i++){var node=svgweb._removedNodes[i];if(node._fakeNode){node._fakeNode._htcNode=null;}node._fakeNode=null;node._handler=null;}svgweb._removedNodes=null;document.getElementById=document._getElementById;document._getElementById=null;document.getElementsByTagNameNS=document._getElementsByTagNameNS;document._getElementsByTagNameNS=null;document.createElementNS=document._createElementNS;document._createElementNS=null;document.createElement=document._createElement;document._createElement=null;document.createTextNode=document._createTextNode;document._createTextNode=null;document._importNodeFunc=null;document.createDocumentFragment=document._createDocumentFragment;document._createDocumentFragment=null;window.addEventListener=null;window._addEventListener=null;window.attachEvent=window._attachEvent;window._attachEvent=null;},_cleanupSVGObjects:function(){if(this.config.use=="flash"&&this.config.hasNativeSVG()){for(var i=0;i<this._svgObjects.length;i++){var obj=this._svgObjects[i];var div=document.createElement("div");for(var j=0;j<obj.attributes.length;j++){var attr=obj.attributes[j];div.setAttribute(attr.nodeName,attr.nodeValue);}var fallback=obj.innerHTML;div.innerHTML=fallback;obj.parentNode.replaceChild(div,obj);this._svgObjects[i]=div;}}for(var i=0;i<this._svgObjects.length;i++){this._svgObjects[i].style.visibility="hidden";}},_interceptOnloadListeners:function(){if(window.addEventListener){window._addEventListener=window.addEventListener;window.addEventListener=function(type,f,useCapture){if(type!="load"){return window._addEventListener(type,f,useCapture);}else{svgweb.addOnLoad(f);}};}if(isIE&&window.attachEvent){window._attachEvent=window.attachEvent;window.attachEvent=function(type,f){if(type!="onload"){return window._attachEvent(type,f);}else{svgweb.addOnLoad(f);}};}},_saveWindowOnload:function(){if(window.onload){if(isIE){this._loadListeners.splice(0,0,window.onload);}else{this._loadListeners.push(window.onload);}window.onload=null;}}});function RenderConfig(){if(!this._forceFlash()){if(this.hasNativeSVG()){this.supported=true;this.use="native";return;}}else{console.log("Forcing Flash SVG viewer for this browser");}var info=new FlashInfo();if(info.capable){if(info.isVersionOrAbove(9,0,0)){this.supported=true;this.use="flash";}else{this.supported=false;this.reason="Flash 9+ required";}}else{this.supported=false;this.reason="Flash 9+ or a different browser required";}}extend(RenderConfig,{supported:false,reason:null,use:null,_forceFlash:function(){var results=false;var hasMeta=false;var meta=document.getElementsByTagName("meta");for(var i=0;i<meta.length;i++){if(meta[i].name=="svg.render.forceflash"&&meta[i].content.toLowerCase()=="true"){results=true;hasMeta=true;}}if(window.location.search.indexOf("svg.render.forceflash=true")!=-1){results=true;}else{if(hasMeta&&window.location.search.indexOf("svg.render.forceflash=false")!=-1){results=false;}}return results;},hasNativeSVG:function(){if(document.implementation&&document.implementation.hasFeature){return document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1");}else{return false;}}});function FlashInfo(){this._detectVersion();}FlashInfo.prototype={version:-1,versionMajor:-1,versionMinor:-1,versionRevision:-1,capable:false,isVersionOrAbove:function(reqMajorVer,reqMinorVer,reqVer){reqVer=parseFloat("."+reqVer);if(this.versionMajor>=reqMajorVer&&this.versionMinor>=reqMinorVer&&this.versionRevision>=reqVer){return true;}else{return false;}},_detectVersion:function(){var versionStr;for(var testVersion=25;testVersion>0;testVersion--){if(isIE){var axo;try{if(testVersion>6){axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash."+testVersion);}else{axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash");}if(typeof axo=="object"){if(testVersion==6){axo.AllowScriptAccess="always";}versionStr=axo.GetVariable("$version");}}catch(e){continue;}}else{versionStr=this._JSFlashInfo(testVersion);}if(versionStr==-1){this.capable=false;return;}else{if(versionStr!==0){var versionArray;if(isIE){var tempArray=versionStr.split(" ");var tempString=tempArray[1];versionArray=tempString.split(",");}else{versionArray=versionStr.split(".");}this.versionMajor=versionArray[0];this.versionMinor=versionArray[1];this.versionRevision=versionArray[2];var versionString=this.versionMajor+"."+this.versionRevision;this.version=parseFloat(versionString);this.capable=true;break;}}}},_JSFlashInfo:function(testVersion){if(navigator.plugins!==null&&navigator.plugins.length>0){if(navigator.plugins["Shockwave Flash 2.0"]||navigator.plugins["Shockwave Flash"]){var swVer2=navigator.plugins["Shockwave Flash 2.0"]?" 2.0":"";var flashDescription=navigator.plugins["Shockwave Flash"+swVer2].description;var descArray=flashDescription.split(" ");var tempArrayMajor=descArray[2].split(".");var versionMajor=tempArrayMajor[0];var versionMinor=tempArrayMajor[1];var tempArrayMinor=(descArray[3]||descArray[4]).split("r");var versionRevision=tempArrayMinor[1]>0?tempArrayMinor[1]:0;var version=versionMajor+"."+versionMinor+"."+versionRevision;return version;}}return -1;}};function FlashHandler(args){this.type=args.type;this._finishedCallback=args.finishedCallback;this._keyboardListeners=[];this._redrawManager=new _RedrawManager(this);if(this.type=="script"){this.id=args.svgID;this._xml=args.xml;this._svgString=args.svgString;this._scriptNode=args.scriptNode;this._handleScript();}else{if(this.type=="object"){this.id=args.objID;this._objNode=args.objNode;this._handleObject();}}}FlashHandler._unattachedDoc=parseXML('<?xml version="1.0"?>\n<svg xmlns="'+svgns+'"></svg>',false);FlashHandler._prepareBehavior=function(libraryPath,htcFilename){var ns=null;for(var i=0;i<document.namespaces.length;i++){if(document.namespaces.item(i).name=="svg"){ns=document.namespaces.item(i);break;}}if(ns===null){ns=document.namespaces.add("svg",svgns);}ns.doImport(libraryPath+htcFilename);};FlashHandler._getNode=function(nodeXML,handler){var node;node=svgweb._guidLookup["_"+nodeXML.getAttribute("__guid")];var fakeTextNode=false;if(!node&&nodeXML.nodeName=="__text"){fakeTextNode=true;}if(!node&&!fakeTextNode&&nodeXML.nodeType==_Node.ELEMENT_NODE){node=new _Element(nodeXML.nodeName,nodeXML.prefix,nodeXML.namespaceURI,nodeXML,handler,true);}else{if(!node&&(nodeXML.nodeType==_Node.TEXT_NODE||fakeTextNode)){node=new _Node("#text",_Node.TEXT_NODE,null,null,nodeXML,handler,false);}else{if(!node){throw new Error("Unknown node type given to _getNode: "+nodeXML.nodeType);}}}return node._getProxyNode();};FlashHandler._patchBrowserObjects=function(win,doc){if(doc._getElementById){return;}document._getElementById=document.getElementById;document.getElementById=FlashHandler._getElementById;document._getElementsByTagNameNS=document.getElementsByTagNameNS;document.getElementsByTagNameNS=FlashHandler._getElementsByTagNameNS;document._createElementNS=document.createElementNS;document.createElementNS=FlashHandler._createElementNS;document._createElement=document.createElement;document.createElement=FlashHandler._createElement;document._createTextNode=document.createTextNode;document.createTextNode=FlashHandler._createTextNode;document._importNodeFunc=FlashHandler._importNodeFunc;document._createDocumentFragment=document.createDocumentFragment;document.createDocumentFragment=FlashHandler._createDocumentFragment;};FlashHandler._getElementById=function(id){var result=document._getElementById(id);if(result!==null){return result;}for(var i=0;i<svgweb.handlers.length;i++){if(svgweb.handlers[i].type=="script"){result=svgweb.handlers[i].document.getElementById(id);}if(result){return result;}}return null;};FlashHandler._getElementsByTagNameNS=function(ns,localName){var results=createNodeList();if(document._getElementsByTagNameNS){var matches=document._getElementsByTagNameNS(ns,localName);for(var j=0;j<matches.length;j++){results.push(matches[j]);}}for(var i=0;i<svgweb.handlers.length;i++){if(svgweb.handlers[i].type=="script"){var doc=svgweb.handlers[i].document;var matches=doc.getElementsByTagNameNS(ns,localName);for(var j=0;j<matches.length;j++){results.push(matches[j]);}}}return results;};FlashHandler._createElementNS=function(ns,qname){if(ns===null||ns=="http://www.w3.org/1999/xhtml"){if(isIE){return document.createElement(qname);}else{return document._createElementNS(ns,qname);}}if(ns==svgns){ns=svgnsFake;}if(!isIE){var namespaceFound=false;for(var i=0;i<svgweb.handlers.length;i++){if(svgweb.handlers[i].type=="script"&&svgweb.handlers[i].document._namespaces["_"+ns]){namespaceFound=true;break;}}if(!namespaceFound){return document._createElementNS(ns,qname);}}var prefix;for(var i=0;i<svgweb.handlers.length;i++){if(svgweb.handlers[i].type=="script"){prefix=svgweb.handlers[i].document._namespaces["_"+ns];if(prefix){break;}}}if(prefix=="xmlns"||!prefix){prefix=null;}var node=new _Element(qname,prefix,ns);return node._getProxyNode();};FlashHandler._createElement=function(nodeName,forSVG){if(!forSVG){return document._createElement(nodeName);}else{if(forSVG&&nodeName.toLowerCase()=="object"){var obj=document._createElement("object");obj._listeners=[];var addEventListener=obj.addEventListener;(function(_obj,_addEventListener){_obj.addEventListener=function(type,listener,useCapture){if(type=="load"){this._listeners.push(listener);}else{if(!addEventListener){this.attachEvent("on"+type,listener);}else{_addEventListener(type,listener,useCapture);}}};})(obj,addEventListener);return obj;}}};FlashHandler._createTextNode=function(data,forSVG){if(!forSVG){return document._createTextNode(data);}else{var doc=FlashHandler._unattachedDoc;var nodeXML;if(isIE){nodeXML=doc.createElement("__text");}else{nodeXML=doc.createElementNS(svgnsFake,"__text");}nodeXML.appendChild(doc.createTextNode(data));var textNode=new _Node("#text",_Node.TEXT_NODE,null,null,nodeXML);textNode._nodeValue=data;textNode.ownerDocument=document;return textNode._getProxyNode();}};FlashHandler._importNodeFunc=function(doc,node,allChildren){switch(node.nodeType){case 1:var newNode=doc.createElement(node.nodeName);if(node.attributes&&node.attributes.length>0){for(var i=0;i<node.attributes.length;i++){var attrName=node.attributes[i].nodeName;var attrValue=node.getAttribute(attrName);newNode.setAttribute(attrName,attrValue);}}if(allChildren&&node.childNodes&&node.childNodes.length>0){for(var i=0;i<node.childNodes.length;i++){newNode.appendChild(document._importNodeFunc(doc,node.childNodes[i],allChildren));}}return newNode;break;case 3:return doc.createTextNode(node.nodeValue);break;}};FlashHandler._createDocumentFragment=function(forSVG){if(forSVG){return new _DocumentFragment(document)._getProxyNode();}else{return document._createDocumentFragment();}};FlashHandler._encodeFlashData=function(str){str=str.toString().replace(/\\/g,"\\\\");str=str.replace(/&/g,"__SVG__AMPERSAND");return str;};extend(FlashHandler,{flashID:null,flash:null,_explicitWidth:null,_explicitHeight:null,_stringToMsg:function(msg){if(msg==null||typeof msg!="string"){return msg;}var results={};var tokens=msg.split(/__SVG__DELIMIT/g);for(var i=0;i<tokens.length;i++){var cutAt=tokens[i].indexOf(":");var propName=tokens[i].substring(0,cutAt);var propValue=tokens[i].substring(cutAt+1);if(propValue==="true"){propValue=true;}else{if(propValue==="false"){propValue=false;}else{if(propValue==="null"){propValue=null;}else{if(propValue==="undefined"){propValue=undefined;}}}}results[propName]=propValue;}return results;},debugMsg:function(msg){if(msg===undefined){return"undefined";}else{if(msg===null){return"null";}}var result=[];for(var i in msg){result.push(i+":"+msg[i]);}result=result.join(", ");return"{"+result+"}";},sendToFlash:function(invoke,args){var message=args.join("__SVG__DELIMIT");if(this._redrawManager.isSuspended()){this._redrawManager.batch(invoke,message);}else{return this.flash[invoke](message);}},onMessage:function(msg){msg=this._stringToMsg(msg);if(msg.type=="event"){this._onEvent(msg);return;}else{if(msg.type=="log"){this._onLog(msg);return;}else{if(msg.type=="script"){this._onObjectScript(msg);return;}else{if(msg.type=="error"){this._onFlashError(msg);}}}}},fireOnLoad:function(id,type){this._finishedCallback(id,type);},_handleScript:function(){this.document=new _Document(this._xml,this);this.document.documentElement=new _SVGSVGElement(this._xml.documentElement,this._svgString,this._scriptNode,this);},_handleObject:function(){this._svgObject=new _SVGObject(this._objNode,this);this._objNode=null;},_onLog:function(msg){console.log("FLASH: "+msg.logString);},_onEvent:function(msg){if(msg.eventType.substr(0,5)=="mouse"||msg.eventType=="click"){this._onMouseEvent(msg);return;}else{if(msg.eventType=="onRenderingFinished"){if(this.type=="script"){this.document.documentElement._onRenderingFinished(msg);}else{if(this.type=="object"){this._svgObject._onRenderingFinished(msg);}}return;}else{if(msg.eventType=="onFlashLoaded"){if(this.type=="script"){this.document.documentElement._onFlashLoaded(msg);}else{if(this.type=="object"){this._svgObject._onFlashLoaded(msg);}}return;}}}},_onMouseEvent:function(msg){var target=this._getElementByGuid(msg.targetGUID);var currentTarget=this._getElementByGuid(msg.currentTargetGUID);var evt={target:target._getProxyNode(),currentTarget:currentTarget._getProxyNode(),clientX:msg.screenX,clientY:msg.screenY,screenX:msg.screenX,screenY:msg.screenY,altKey:msg.altKey,ctrlKey:msg.ctrlKey,shiftKey:msg.shiftKey,preventDefault:function(){this.returnValue=false;}};var handlers=currentTarget._listeners[msg.eventType];if(handlers){for(var i=0;i<handlers.length;i++){var handler=handlers[i];var listener=handler.listener;listener(evt);}}if(msg.scriptCode!=null){if(this.type=="object"){this._svgObject._executeScript(msg.scriptCode);}else{}}},_getElementByGuid:function(guid){var node=svgweb._guidLookup["_"+guid];if(node){return node;}var results=xpath(this._xml,null,'//*[@__guid="'+guid+'"]');var nodeXML,node;if(results.length){nodeXML=results[0];}else{return null;}node=FlashHandler._getNode(nodeXML,this);node._passThrough=true;return node;},_onFlashError:function(msg){this._onLog(msg);svgweb._fireFlashError("FLASH: "+msg.logString);throw new Error("FLASH: "+msg.logString);},_onObjectScript:function(msg){this._svgObject._scriptsToExec.push(msg.script);}});function NativeHandler(args){this.type=args.type;this._finishedCallback=args.finishedCallback;this._xml=args.xml;if(this.type=="object"){this.id=args.objID;this._objNode=args.objNode;this._handleObject();}else{if(this.type=="script"){this.id=args.svgID;this._svgString=args.svgString;this._scriptNode=args.scriptNode;this._handleScript();}}}NativeHandler._patchBrowserObjects=function(win,doc){if(doc._getElementById){return;}doc._getElementById=doc.getElementById;doc.getElementById=function(id){var result=doc._getElementById(id);if(result!==null){if(result.parentNode===null){return null;}else{return result;}}result=xpath(doc,null,'//*[@id="'+id+'"]');if(result.length){var node=result[0];if(node.namespaceURI!==null&&node.namespaceURI!=svgns&&node.namespaceURI!="http://www.w3.org/1999/xhtml"){svgweb._exportID(node);}return node;}else{return null;}};doc._getElementsByTagNameNS=doc.getElementsByTagNameNS;doc.getElementsByTagNameNS=function(ns,localName){var result=doc._getElementsByTagNameNS(ns,localName);if(result!==null&&result.length!==0){if(ns!==null&&ns!="http://www.w3.org/1999/xhtml"&&ns!=svgns){for(var i=0;i<result.length;i++){var node=result[i];svgweb._exportID(node);}return result;}return result;}if(result===null||result.length===0){result=createNodeList();}var xpathResults;for(var i=0;i<svgweb.handlers.length;i++){var handler=svgweb.handlers[i];if(handler.type=="object"){continue;}var prefix=handler._namespaces["_"+ns];if(!prefix){continue;}var expr;if(prefix=="xmlns"){expr="//*[namespace-uri()='"+svgns+"' and name()='"+localName+"']";}else{if(prefix){expr="//"+prefix+":"+localName;}else{expr="//"+localName;}}xpathResults=xpath(doc,handler._svgRoot,expr,handler._namespaces);if(xpathResults!==null&&xpathResults!==undefined&&xpathResults.length>0){for(var j=0;j<xpathResults.length;j++){var node=xpathResults[j];if(node.namespaceURI!==null&&node.namespaceURI!=svgns&&node.namespaceURI!="http://www.w3.org/1999/xhtml"){svgweb._exportID(node);}result.push(node);}return result;}}return createNodeList();};if(isFF){NativeHandler._patchStyleObject(win);}};NativeHandler._patchStyleObject=function(win){var patchMe=win.CSSStyleDeclaration;for(var i=0;i<_Style._allStyles.length;i++){var styleName=_Style._allStyles[i];var stylePropName=styleName.replace(/([A-Z])/g,"-$1").toLowerCase();(function(styleName,stylePropName){patchMe.prototype.__defineSetter__(styleName,function(styleValue){return this.setProperty(stylePropName,styleValue,null);});patchMe.prototype.__defineGetter__(styleName,function(){return this.getPropertyValue(stylePropName);});})(styleName,stylePropName);}};extend(NativeHandler,{_handleScript:function(){this._namespaces=this._getNamespaces();this._processSVGScript(this._xml,this._svgString,this._scriptNode);this._finishedCallback(this.id,"script");},_handleObject:function(){this._objNode.style.overflow="hidden";this._objNode.style.visibility="visible";if(this._objNode._svgWindow){this._onObjectLoad(this._objNode._svgFunc,this._objNode._svgWindow);}else{this._objNode._svgHandler=this;var self=this;this._objNode.addEventListener("load",function(){var win=self._objNode.contentDocument.defaultView;self._onObjectLoad(self._objNode._svgFunc,win);},false);}},_onObjectLoad:function(func,win){if(this._loaded){return;}this._loaded=true;var doc=win.document;NativeHandler._patchBrowserObjects(win,doc);win.svgns=svgns;win.xlinkns=xlinkns;this._namespaces=this._getNamespaces(doc);if(func){func.apply(win);}svgweb._fireOnLoad();},_processSVGScript:function(xml,svgString,scriptNode){var importedSVG=document.importNode(xml.documentElement,true);scriptNode.parentNode.replaceChild(importedSVG,scriptNode);this._svgRoot=importedSVG;},_getNamespaces:function(doc){var results=[];var attrs;if(doc){attrs=doc.documentElement.attributes;}else{attrs=this._xml.documentElement.attributes;}for(var i=0;i<attrs.length;i++){var attr=attrs[i];if(/^xmlns:?(.*)$/.test(attr.nodeName)){var m=attr.nodeName.match(/^xmlns:?(.*)$/);var prefix=(m[1]?m[1]:"xmlns");var namespaceURI=attr.nodeValue;if(!results["_"+prefix]){results["_"+prefix]=namespaceURI;results["_"+namespaceURI]=prefix;results.push(namespaceURI);}}}return results;}});function _RedrawManager(handler){this._handler=handler;this._batch=[];this._nextID=1;this._ids=[];this._timeoutIDs={};}extend(_RedrawManager,{isSuspended:function(){return(this._ids.length>0);},batch:function(method,message){this._batch.push(method+":"+message);},suspendRedraw:function(ms){if(ms===undefined){throw"Not enough arguments to suspendRedraw";}var id=this._nextID;this._nextID++;var self=this;var timeoutID=window.setTimeout(function(){self.unsuspendRedraw(id);delete self._timeoutIDs["_"+id];},ms);this._ids.push(id);this._timeoutIDs["_"+id]=timeoutID;this._handler.flash.jsSuspendRedraw();return id;},unsuspendRedraw:function(id){var idx=-1;for(var i=0;i<this._ids.length;i++){if(this._ids[i]==id){idx=i;break;}}if(idx==-1){throw"Unknown id passed to unsuspendRedraw: "+id;}if(this._timeoutIDs["_"+id]!=undefined){window.clearTimeout(this._timeoutIDs["_"+id]);}this._ids.splice(idx,1);delete this._timeoutIDs["_"+id];if(this.isSuspended()){return;}var sendMe=this._batch.join("__SVG__METHOD__DELIMIT");this._batch=[];try{this._handler.flash.jsUnsuspendRedrawAll(sendMe);}catch(exp){console.log("unsuspendRedraw exception: "+exp);}},unsuspendRedrawAll:function(){for(var i=0;i<this._ids.length;i++){this.unsuspendRedraw(this._ids[i]);}},forceRedraw:function(){}});function _DOMImplementation(){}extend(_DOMImplementation,{hasFeature:function(feature,version){}});function _Node(nodeName,nodeType,prefix,namespaceURI,nodeXML,handler,passThrough){if(nodeName===undefined&&nodeType===undefined){return;}this.nodeName=nodeName;this._nodeXML=nodeXML;this._handler=handler;this._listeners={};this._detachedListeners=[];this.fake=true;if(namespaceURI==svgnsFake){namespaceURI=svgns;}this._attached=true;if(!this._handler){this._attached=false;}if(nodeType==_Node.ELEMENT_NODE&&!this._nodeXML&&!this._handler){var xml='<?xml version="1.0"?>\n';if(namespaceURI==svgns&&!prefix){xml+="<"+nodeName+' xmlns="'+svgnsFake+'"/>';}else{xml+="<"+nodeName+" xmlns:"+prefix+'="'+namespaceURI+'"/>';}this._nodeXML=parseXML(xml).documentElement;}else{if(nodeType==_Node.DOCUMENT_FRAGMENT_NODE){var xml='<?xml version="1.0"?>\n<__document__fragment></__document__fragment>';this._nodeXML=parseXML(xml).documentElement;}}if(nodeType!=_Node.DOCUMENT_NODE&&this._nodeXML){if(!this._nodeXML.getAttribute("__guid")){this._nodeXML.setAttribute("__guid",guid());}this._guid=this._nodeXML.getAttribute("__guid");svgweb._guidLookup["_"+this._guid]=this;}if(nodeType==_Node.ELEMENT_NODE){if(nodeName.indexOf(":")!=-1){this.localName=nodeName.match(/^[^:]*:(.*)$/)[1];}else{this.localName=nodeName;}}if(nodeType){this.nodeType=nodeType;}else{this.nodeType=_Node.ELEMENT_NODE;}if(nodeType==_Node.ELEMENT_NODE||nodeType==_Node.DOCUMENT_NODE||nodeType==_Node.DOCUMENT_FRAGMENT_NODE){this.prefix=prefix;this.namespaceURI=namespaceURI;this._nodeValue=null;}else{if(nodeType==_Node.TEXT_NODE){this._nodeValue=this._nodeXML.firstChild.nodeValue;this.prefix=null;this.namespaceURI=null;if(this._nodeValue===undefined){this._nodeValue=null;}}}if(this._attached){if(this._handler.type=="script"){this.ownerDocument=document;}else{if(this._handler.type=="object"){this.ownerDocument=this._handler.document;}}}if(passThrough===undefined){passThrough=false;}this._passThrough=passThrough;if(isIE){this._createEmptyMethods();}this._childNodes=this._createChildNodes();if(nodeType==_Node.TEXT_NODE){this._nodeXML.setAttribute("__fakeTextNode",true);}if(!isIE){this._defineNodeAccessors();}else{if(isIE&&this.nodeType!=_Node.DOCUMENT_NODE){if(this.nodeName=="svg"&&this._handler.type=="script"){}else{this._createHTC();}}}}mixin(_Node,{ELEMENT_NODE:1,TEXT_NODE:3,DOCUMENT_NODE:9,DOCUMENT_FRAGMENT_NODE:11});extend(_Node,{_listeners:null,_detachedListeners:null,insertBefore:function(newChild,refChild){if(this.nodeType!=_Node.ELEMENT_NODE&&this.nodeType!=_Node.DOCUMENT_FRAGMENT_NODE){throw"Not supported";}newChild=this._getFakeNode(newChild);refChild=this._getFakeNode(refChild);var isFragment=(newChild.nodeType==_Node.DOCUMENT_FRAGMENT_NODE);var fragmentChildren;if(isFragment){fragmentChildren=newChild._getChildNodes(true);}if(isFragment&&fragmentChildren.length==0){newChild._reset();return newChild._getProxyNode();}var findResults=this._findChild(refChild);if(findResults===null){throw new Error("Invalid child passed to insertBefore");}var position=findResults.position;var importMe=[];if(isFragment){for(var i=0;i<fragmentChildren.length;i++){importMe.push(fragmentChildren[i]);}}else{importMe.push(newChild);}for(var i=0;i<importMe.length;i++){var importedNode=this._importNode(importMe[i],false);this._nodeXML.insertBefore(importedNode,refChild._nodeXML);this._processAppendedChildren(importMe[i],this,this._attached,this._passThrough);}if(this._attached&&this._passThrough){var xmlString=FlashHandler._encodeFlashData(this._toXML(newChild));this._handler.sendToFlash("jsInsertBefore",[refChild._guid,this._guid,position,xmlString]);}if(!isIE){for(var i=0;i<importMe.length;i++){this._defineChildNodeAccessor(this._childNodes.length);this._childNodes.length++;}}if(newChild.nodeType==_Node.DOCUMENT_FRAGMENT_NODE){newChild._reset();}return newChild._getProxyNode();},replaceChild:function(newChild,oldChild){if(this.nodeType!=_Node.ELEMENT_NODE&&this.nodeType!=_Node.DOCUMENT_FRAGMENT_NODE){throw"Not supported";}newChild=this._getFakeNode(newChild);oldChild=this._getFakeNode(oldChild);var isFragment=(newChild.nodeType==_Node.DOCUMENT_FRAGMENT_NODE);var fragmentChildren;if(isFragment){fragmentChildren=newChild._getChildNodes(true);}if(isFragment&&fragmentChildren.length==0){newChild._reset();return newChild._getProxyNode();}var findResults=this._findChild(oldChild);if(findResults===null){throw new Error("Invalid child passed to replaceChild");}var position=findResults.position;this.removeChild(oldChild);var importMe=[];if(isFragment){for(var i=0;i<fragmentChildren.length;i++){importMe.push(fragmentChildren[i]);}}else{importMe.push(newChild);}if(!isIE){for(var i=0;i<importMe.length;i++){this._defineChildNodeAccessor(this._childNodes.length);this._childNodes.length++;}}var addToEnd=false;if(position>=this._nodeXML.childNodes.length){addToEnd=true;}var insertAt=position;for(var i=0;i<importMe.length;i++){var importedNode=this._importNode(importMe[i],false);if(addToEnd){this._nodeXML.appendChild(importedNode);}else{var placeBefore=this._nodeXML.childNodes[insertAt];this._nodeXML.insertBefore(importedNode,placeBefore);insertAt++;}}if(this._attached&&this._passThrough){var xmlString=FlashHandler._encodeFlashData(this._toXML(newChild));this._handler.sendToFlash("jsAddChildAt",[this._guid,position,xmlString]);}this._processAppendedChildren(newChild,this,this._attached,this._passThrough);oldChild._setUnattached();svgweb._removedNodes.push(oldChild._getProxyNode());if(newChild.nodeType==_Node.DOCUMENT_FRAGMENT_NODE){newChild._reset();}return oldChild._getProxyNode();},removeChild:function(child){if(this.nodeType!=_Node.ELEMENT_NODE&&this.nodeType!=_Node.DOCUMENT_FRAGMENT_NODE){throw"Not supported";}if(child.nodeType!=_Node.ELEMENT_NODE&&child.nodeType!=_Node.TEXT_NODE){throw"Not supported";}child=this._getFakeNode(child);var findResults=this._findChild(child);if(findResults===null){throw new Error("Invalid child passed to removeChild");}var position=findResults.position;this._nodeXML.removeChild(findResults.nodeXML);if(child.nodeType==_Node.ELEMENT_NODE){var childID=child._getId();if(childID&&this._attached){this._handler.document._nodeById["_"+childID]=undefined;}}child._persistEventListeners();if(!isIE){delete this._childNodes[this._childNodes.length-1];this._childNodes.length--;}else{this._childNodes.splice(position,1);}if(this._attached&&this._passThrough){this._handler.sendToFlash("jsRemoveChild",[child._guid]);}child._setUnattached();svgweb._removedNodes.push(child._getProxyNode());return child._getProxyNode();},appendChild:function(child){if(this.nodeType!=_Node.ELEMENT_NODE&&this.nodeType!=_Node.DOCUMENT_FRAGMENT_NODE){throw"Not supported";}child=this._getFakeNode(child);var isFragment=(child.nodeType==_Node.DOCUMENT_FRAGMENT_NODE);var fragmentChildren;if(isFragment){fragmentChildren=child._getChildNodes(true);}if(isFragment&&fragmentChildren.length==0){child._reset();return child._getProxyNode();}if(isFragment){for(var i=0;i<fragmentChildren.length;i++){this._importNode(fragmentChildren[i]);}}else{this._importNode(child);}if(isIE){if(isFragment){for(var i=0;i<fragmentChildren.length;i++){this._childNodes.push(fragmentChildren[i]._htcNode);}}else{this._childNodes.push(child._htcNode);}}else{if(isFragment){for(var i=0;i<fragmentChildren.length;i++){this._defineChildNodeAccessor(this._childNodes.length);this._childNodes.length++;}}else{this._defineChildNodeAccessor(this._childNodes.length);this._childNodes.length++;}}if(this._attached&&this._passThrough){var xmlString=FlashHandler._encodeFlashData(this._toXML(child));this._handler.sendToFlash("jsAppendChild",[this._guid,xmlString]);}this._processAppendedChildren(child,this,this._attached,this._passThrough);if(child.nodeType==_Node.DOCUMENT_FRAGMENT_NODE){child._reset();}return child._getProxyNode();},hasChildNodes:function(){return(this._getChildNodes().length>0);},isSupported:function(feature,version){if(version=="2.0"){if(feature=="Core"){return true;}else{if(feature=="Events"||feature=="UIEvents"||feature=="MouseEvents"){return true;}}}else{return false;}},hasAttributes:function(){if(this.nodeType==_Node.ELEMENT_NODE){for(var i in this._attributes){if(/^_xmlns/i.test(i)){continue;}if(i=="_id"&&/^__svg__random__/.test(this._attributes[i])){continue;}if(i=="___guid"&&/^__guid/.test(this._attributes[i])){continue;}if(i=="___fakeTextNode"&&/^__fakeTextNode/.test(this._attributes[i])){continue;}if(/^_.*/.test(i)&&this._attributes.hasOwnProperty(i)){return true;}}return false;}else{return false;}},addEventListener:function(type,listener,useCapture,_adding){if(this.nodeType!=_Node.ELEMENT_NODE&&this.nodeType!=_Node.TEXT_NODE){throw"Not supported";}if(!_adding&&!this._attached){this._detachedListeners.push({type:type,listener:listener,useCapture:useCapture});return;}if(this._listeners[type]===undefined){this._listeners[type]=[];}this._listeners[type].push({type:type,listener:listener,useCapture:useCapture});this._listeners[type]["_"+listener.toString()+":"+useCapture]=listener;if(type=="keydown"){var wrappedListener=(function(listener){return function(evt){if(!evt.preventDefault){evt.preventDefault=function(){this.returnValue=false;evt=null;};}listener(evt);};})(listener);this._handler._keyboardListeners.push(wrappedListener);this._addEvent(document,type,wrappedListener);return;}this._handler.sendToFlash("jsAddEventListener",[this._guid,type]);},removeEventListener:function(type,listener,useCapture){if(this.nodeType!=_Node.ELEMENT_NODE&&this.nodeType!=_Node.TEXT_NODE){throw"Not supported";}},toString:function(){if(this.namespaceURI==svgns){return"[_SVG"+this.localName.charAt(0).toUpperCase()+this.localName.substring(1)+"]";}else{if(this.prefix){return"["+this.prefix+":"+this.localName+"]";}else{if(this.localName){return"["+this.localName+"]";}else{return"["+this.nodeName+"]";}}}},_addEvent:function(obj,type,fn){if(obj.addEventListener){obj.addEventListener(type,fn,false);}else{if(obj.attachEvent){obj["e"+type+fn]=fn;obj[type+fn]=(function(obj,type,fn){return function(){obj["e"+type+fn](window.event);};})(obj,type,fn);obj.attachEvent("on"+type,obj[type+fn]);}}},nodeName:null,nodeType:null,ownerDocument:null,namespaceURI:null,localName:null,prefix:null,_getParentNode:function(){if(this.nodeType==_Node.DOCUMENT_NODE||this.nodeType==_Node.DOCUMENT_FRAGMENT_NODE){return null;}if(this.nodeName=="svg"&&this._handler.type=="script"){if(this._htcNode){return this._htcNode._realParentNode;}else{return this._handler.flash;}}else{if(this.nodeName=="svg"&&this._handler.type=="object"){return this._handler.document;}}var parentXML=this._nodeXML.parentNode;if(parentXML===null||parentXML.nodeType==_Node.DOCUMENT_NODE){return null;}var node=FlashHandler._getNode(parentXML,this._handler);return node;},_getFirstChild:function(){if(this.nodeType==_Node.TEXT_NODE){return null;}var childXML=this._nodeXML.firstChild;if(childXML===null){return null;}var node=FlashHandler._getNode(childXML,this._handler);this._getFakeNode(node)._passThrough=this._passThrough;return node;},_getLastChild:function(){if(this.nodeType==_Node.TEXT_NODE){return null;}var childXML=this._nodeXML.lastChild;if(childXML===null){return null;}var node=FlashHandler._getNode(childXML,this._handler);this._getFakeNode(node)._passThrough=this._passThrough;return node;},_getPreviousSibling:function(){if(this.nodeType==_Node.DOCUMENT_NODE||this.nodeType==_Node.DOCUMENT_FRAGMENT_NODE){return null;}if(this.nodeName=="svg"&&this._handler.type=="script"){if(this._htcNode){return this._htcNode._realPreviousSibling;}else{return this._handler.flash.previousSibling;}}var siblingXML=this._nodeXML.previousSibling;if(siblingXML===null||siblingXML.nodeType==7){return null;}var node=FlashHandler._getNode(siblingXML,this._handler);this._getFakeNode(node)._passThrough=this._passThrough;return node;},_getNextSibling:function(){if(this.nodeType==_Node.DOCUMENT_NODE||this.nodeType==_Node.DOCUMENT_FRAGMENT_NODE){return null;}if(this.nodeName=="svg"&&this._handler.type=="script"){if(this._htcNode){return this._htcNode._realNextSibling;}else{return this._handler.flash.nextSibling;}}var siblingXML=this._nodeXML.nextSibling;if(siblingXML===null){return null;}var node=FlashHandler._getNode(siblingXML,this._handler);this._getFakeNode(node)._passThrough=this._passThrough;return node;},_passThrough:false,_attached:true,_fake:true,_defineNodeAccessors:function(){this.__defineGetter__("parentNode",hitch(this,this._getParentNode));this.__defineGetter__("firstChild",hitch(this,this._getFirstChild));this.__defineGetter__("lastChild",hitch(this,this._getLastChild));this.__defineGetter__("previousSibling",hitch(this,this._getPreviousSibling));this.__defineGetter__("nextSibling",hitch(this,this._getNextSibling));this.__defineGetter__("childNodes",(function(self){return function(){return self._childNodes;};})(this));if(this.nodeName=="#text"){this._childNodes.length=0;}else{var children=this._nodeXML.childNodes;this._childNodes.length=children.length;for(var i=0;i<children.length;i++){this._defineChildNodeAccessor(i);}}if(this.nodeType==_Node.TEXT_NODE){this.__defineGetter__("data",(function(self){return function(){return self._nodeValue;};})(this));this.__defineSetter__("data",(function(self){return function(newValue){return self._setNodeValue(newValue);};})(this));this.__defineGetter__("textContent",(function(self){return function(){return self._nodeValue;};})(this));this.__defineSetter__("textContent",(function(self){return function(newValue){return self._setNodeValue(newValue);};})(this));}else{this.__defineGetter__("textContent",(function(){return function(){return"";};})());}this.__defineGetter__("nodeValue",(function(self){return function(){return self._nodeValue;};})(this));this.__defineSetter__("nodeValue",(function(self){return function(newValue){return self._setNodeValue(newValue);};})(this));},_defineChildNodeAccessor:function(i){var self=this;this._childNodes.__defineGetter__(i,function(){var childXML=self._nodeXML.childNodes[i];var node=FlashHandler._getNode(childXML,self._handler);node._passThrough=self._passThrough;return node;});},_getChildNodes:function(returnFakeNodes){if(!isIE){return this._childNodes;}if(returnFakeNodes===undefined){returnFakeNodes=false;}var results=createNodeList();if(this.nodeName=="#text"){return results;}if(this._nodeXML.childNodes.length==this._childNodes.length&&!returnFakeNodes){return this._childNodes;}else{for(var i=0;i<this._nodeXML.childNodes.length;i++){var childXML=this._nodeXML.childNodes[i];var node=FlashHandler._getNode(childXML,this._handler);node._fakeNode._passThrough=this._passThrough;if(returnFakeNodes){node=node._fakeNode;}results.push(node);}this._childNodes=results;return results;}},_createHTC:function(){if(!this._htcContainer){this._htcContainer=document.getElementById("__htc_container");if(!this._htcContainer){var body=document.getElementsByTagName("body")[0];var c=document.createElement("div");c.id="__htc_container";c.style.position="absolute";c.style.top="-5000px";c.style.left="-5000px";body.appendChild(c);this._htcContainer=c;}}var htcNode=document.createElement("svg:"+this.nodeName);htcNode._fakeNode=this;htcNode._handler=this._handler;this._htcContainer.appendChild(htcNode);this._htcNode=htcNode;},_setNodeValue:function(newValue){if(this.nodeType!=_Node.TEXT_NODE){return newValue;}this._nodeValue=newValue;this._nodeXML.firstChild.nodeValue=newValue;if(this._attached&&this._passThrough){var flashStr=FlashHandler._encodeFlashData(newValue);var parentGUID=this._nodeXML.parentNode.getAttribute("__guid");this._handler.sendToFlash("jsSetText",[parentGUID,this._guid,flashStr]);}return newValue;},_getFakeNode:function(child){if(isIE&&child._fakeNode){child=child._fakeNode;}return child;},_processAppendedChildren:function(child,parent,attached,passThrough){var current;var suspendID;if(child.nodeType==_Node.DOCUMENT_FRAGMENT_NODE){current=this._getFakeNode(child._getFirstChild());if(attached&&passThrough){suspendID=this._handler._redrawManager.suspendRedraw(10000);}}else{current=child;}while(current){var currentXML=current._nodeXML;current._handler=this._handler;var id=currentXML.getAttribute("id");if(attached&&current.nodeType==_Node.ELEMENT_NODE&&id){this._handler.document._nodeById["_"+id]=current;}if(attached){if(this._handler.type=="script"){current.ownerDocument=document;}else{if(this._handler.type=="object"){current.ownerDocument=this._handler.document;}}}if(attached){for(var i=0;i<current._detachedListeners.length;i++){var addMe=current._detachedListeners[i];current.addEventListener(addMe.type,addMe.listener,addMe.useCapture,true);}current._detachedListeners=[];}var lastVisited=current;var children=current._getChildNodes();var next=(children&&children.length>0)?children[0]:null;if(next){current=next;if(isIE){current=current._fakeNode;}}while(!next&&current){if(current!=child){next=current._getNextSibling();if(next){current=next;if(isIE){current=current._fakeNode;}break;}}if(current==child){current=null;}else{current=current._getParentNode();if(current&&isIE){current=current._fakeNode;}if(current&&(current.nodeType!=1||current.nodeName.toUpperCase()=="SVG")){current=null;}}}lastVisited._attached=attached;lastVisited._passThrough=passThrough;}if(child.nodeType==_Node.DOCUMENT_FRAGMENT_NODE&&attached&&passThrough){this._handler._redrawManager.unsuspendRedraw(suspendID);}},_toXML:function(node){var nodeXML=node._nodeXML;var xml;if(typeof XMLSerializer!="undefined"){xml=(new XMLSerializer().serializeToString(nodeXML));}else{xml=nodeXML.xml;}xml=xml.replace(/urn\:__fake__internal__namespace/g,svgns);var nsString='xmlns="'+svgns+'" ';for(var i=0;i<this._handler.document._namespaces.length;i++){var uri=this._handler.document._namespaces[i];var prefix=this._handler.document._namespaces["_"+uri];if(uri==svgnsFake){uri=svgns;}if(prefix!="xmlns"){nsString+="xmlns:"+prefix+'="'+uri+'" ';}else{nsString+='xmlns="'+uri+'" ';}}xml=xml.replace(/<([^ ]+)/,"<$1 "+nsString+" ");return xml;},_importNode:function(child,doAppend){if(typeof doAppend=="undefined"){doAppend=true;}var doc;if(this._attached){doc=this._handler.document._xml;}else{doc=this._nodeXML.ownerDocument;}var importedNode;if(typeof doc.importNode=="undefined"){importedNode=document._importNodeFunc(doc,child._nodeXML,true);}else{importedNode=doc.importNode(child._nodeXML,true);}if(doAppend){this._nodeXML.appendChild(importedNode);}child._importChildXML(importedNode);return importedNode;},_importChildXML:function(newXML){this._nodeXML=newXML;var children=this._getChildNodes();for(var i=0;i<children.length;i++){var currentChild=children[i];if(isIE&&currentChild._fakeNode){currentChild=currentChild._fakeNode;}currentChild._nodeXML=this._nodeXML.childNodes[i];currentChild._importChildXML(this._nodeXML.childNodes[i]);}},_findChild:function(child,ignoreTextNodes){if(ignoreTextNodes===undefined){ignoreTextNodes=false;}var results={};var elementIndex=0;for(var i=0;i<this._nodeXML.childNodes.length;i++){var currentXML=this._nodeXML.childNodes[i];if(currentXML.nodeType!=_Node.ELEMENT_NODE&&currentXML.nodeType!=_Node.TEXT_NODE){continue;}if(ignoreTextNodes&&(currentXML.getAttribute("__fakeTextNode")||currentXML.nodeType==_Node.TEXT_NODE)){continue;}if(currentXML.nodeType==_Node.ELEMENT_NODE){elementIndex++;}if(currentXML.nodeType==_Node.ELEMENT_NODE&&currentXML.getAttribute("__guid")==child._guid){results.position=(ignoreTextNodes)?elementIndex:i;results.nodeXML=currentXML;return results;}}return null;},_setUnattached:function(){var children=this._getChildNodes();for(var i=0;i<children.length;i++){var child=children[i];if(isIE){child=child._fakeNode;}child._setUnattached();}this._attached=false;this._passThrough=false;this._handler=null;},_getProxyNode:function(){if(!isIE){return this;}else{return this._htcNode;}},_createChildNodes:function(){var childNodes;if(!isIE){childNodes={};childNodes.item=function(index){if(index>=this.length){return null;}else{return this[index];}};}else{childNodes=createNodeList();}return childNodes;},_getTextContent:function(){if(this.nodeType==_Node.TEXT_NODE){return this._nodeValue;}else{return"";}},_setTextContent:function(newValue){if(this.nodeType==_Node.TEXT_NODE){return this._setNodeValue(newValue);}else{return"";}},_getData:function(){if(this.nodeType==_Node.TEXT_NODE){return this._nodeValue;}else{return undefined;}},_setData:function(newValue){if(this.nodeType==_Node.TEXT_NODE){return this._setNodeValue(newValue);}else{return undefined;}},_createEmptyMethods:function(){if(this.nodeType==_Node.TEXT_NODE){this.getAttribute=this.setAttribute=this.setAttributeNS=this._getId=this._setId=this._getX=this._getY=this._getWidth=this._getHeight=function(){return undefined;};}},_persistEventListeners:function(){for(var eventType in this._listeners){for(var i=0;i<this._listeners[eventType].length;i++){var l=this._listeners[eventType][i];this._detachedListeners.push({type:l.type,listener:l.listener,useCapture:l.useCapture});}}this._listeners=[];var children=this._getChildNodes();for(var i=0;i<children.length;i++){var c=children[i];if(c._fakeNode){c=c._fakeNode;}c._persistEventListeners();}}});function _Element(nodeName,prefix,namespaceURI,nodeXML,handler,passThrough){if(nodeName===undefined&&namespaceURI===undefined&&nodeXML===undefined&&handler===undefined){return;}_Node.apply(this,[nodeName,_Node.ELEMENT_NODE,prefix,namespaceURI,nodeXML,handler,passThrough]);this._attributes={};this._attributes._id="";this._importAttributes(this,this._nodeXML);if(!isIE){this._defineAccessors();}if(this.namespaceURI==svgns){if(isIE&&this._attached&&this._handler.type=="script"&&this.nodeName=="svg"){}else{this.style=new _Style(this);}if(isIE&&this._attached&&this._handler.type=="script"&&this.nodeName=="svg"){}else{if(isIE){this.style._ignoreStyleChanges=false;}}}}_Element.prototype=new _Node;extend(_Element,{getAttribute:function(attrName){var value;if(attrName=="__guid"){return null;}if(this._attached&&this._passThrough&&!this._handler._redrawManager.isSuspended()){value=this._handler.sendToFlash("jsGetAttribute",[this._guid,false,false,null,attrName]);}else{value=this._nodeXML.getAttribute(attrName);if(attrName=="id"&&!value){return"";}}if(value===undefined||value===null||/^[ ]*$/.test(value)){return null;}return value;},setAttribute:function(attrName,attrValue){this.setAttributeNS(null,attrName,attrValue);},removeAttribute:function(name){},getAttributeNS:function(ns,localName){},setAttributeNS:function(ns,qName,attrValue){var elementId=this._nodeXML.getAttribute("id");var localName=qName;if(qName.indexOf(":")!=-1){localName=qName.split(":")[1];}if(this._attached&&qName=="id"){var doc=this._handler.document;doc._nodeById["_"+elementId]=undefined;doc._nodeById["_"+attrValue]=this;}if(isSafari&&localName=="style"&&this._nodeXML.parentNode!==null&&this._nodeXML.parentNode.nodeName=="clipPath"){var addBeforeXML=this._nodeXML.nextSibling;var origParent=this._nodeXML.parentNode;this._nodeXML.parentNode.removeChild(this._nodeXML);this._nodeXML.setAttribute("style",attrValue);if(addBeforeXML){origParent.insertBefore(this._nodeXML,addBeforeXML);}else{origParent.appendChild(this._nodeXML);}}else{this._nodeXML.setAttribute(qName,attrValue);}this._attributes["_"+qName]=attrValue;if(this._attached&&this._passThrough){var flashStr=FlashHandler._encodeFlashData(attrValue);this._handler.sendToFlash("jsSetAttribute",[this._guid,false,ns,localName,flashStr]);}},removeAttributeNS:function(ns,localName){},getElementsByTagNameNS:function(ns,localName){},hasAttributeNS:function(ns,localName){},style:null,_setClassName:function(className){},_getClassName:function(){},_setTransform:function(transform){},_getTransform:function(){},_getViewBox:function(){},_getId:function(){if(this._attributes._id){return this._attributes._id;}else{return"";}},_setId:function(id){return this.setAttribute("id",id);},ownerSVGElement:null,_getX:function(){var value=this._trimMeasurement(this.getAttribute("x"));return new _SVGAnimatedLength(new _SVGLength(new Number(value)));},_getY:function(){var value=this._trimMeasurement(this.getAttribute("y"));return new _SVGAnimatedLength(new _SVGLength(new Number(value)));},_getWidth:function(){var value=this._trimMeasurement(this.getAttribute("width"));return new _SVGAnimatedLength(new _SVGLength(new Number(value)));},_getHeight:function(){var value=this._trimMeasurement(this.getAttribute("height"));return new _SVGAnimatedLength(new _SVGLength(new Number(value)));},_trimMeasurement:function(value){if(value!==null){value=value.replace(/[a-z]/gi,"");}return value;},_getInnerHTML:function(){},_setInnerHTML:function(newValue){},_allEvents:["onfocusin","onfocusout","onactivate","onclick","onmousedown","onmouseup","onmouseover","onmousemove","onmouseout","onload","onunload","onabort","onerror","onresize","onscroll","onzoom","onbegin","onend","onrepeat"],_handleEvent:function(evt){},_prepareEvents:function(){},_attributes:null,_importAttributes:function(target,nodeXML){for(var i=0;i<nodeXML.attributes.length;i++){var attr=nodeXML.attributes[i];this._attributes["_"+attr.nodeName]=attr.nodeValue;}},_defineAccessors:function(){var props;var self=this;if(this.nodeName=="svg"||this.nodeName=="use"){this.__defineGetter__("x",function(){return self._getX();});this.__defineGetter__("y",function(){return self._getY();});this.__defineGetter__("width",function(){return self._getWidth();});this.__defineGetter__("height",function(){return self._getHeight();});}this.__defineGetter__("id",hitch(this,this._getId));this.__defineSetter__("id",hitch(this,this._setId));},_defineAccessor:function(prop,readWrite){var self=this;var getMethod=function(){return self.getAttribute(prop);};this.__defineGetter__(prop,getMethod);if(readWrite){var setMethod=function(newValue){return self.setAttribute(prop,newValue);};this.__defineSetter__(prop,setMethod);}}});function _DocumentFragment(doc){_Node.apply(this,["#document-fragment",_Node.DOCUMENT_FRAGMENT_NODE,null,null,null,null]);this.ownerDocument=doc;}_DocumentFragment.prototype=new _Node;extend(_DocumentFragment,{_reset:function(){while(this._nodeXML.firstChild){this._nodeXML.removeChild(this._nodeXML.firstChild);}this._childNodes=this._createChildNodes();if(!isIE){this._defineNodeAccessors();}}});function _Style(element){this._element=element;this._setup();}_Style._allStyles=["font","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","direction","letterSpacing","textDecoration","unicodeBidi","wordSpacing","clip","color","cursor","display","overflow","visibility","clipPath","clipRule","mask","opacity","enableBackground","filter","floodColor","floodOpacity","lightingColor","stopColor","stopOpacity","pointerEvents","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","fill","fillOpacity","fillRule","imageRendering","marker","markerEnd","markerMid","markerStart","shapeRendering","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","textRendering","alignmentBaseline","baselineShift","dominantBaseline","glyphOrientationHorizontal","glyphOrientationVertical","kerning","textAnchor","writingMode"];extend(_Style,{_ignoreStyleChanges:true,_setup:function(){this._normalizeStyle();if(!isIE){for(var i=0;i<_Style._allStyles.length;i++){var styleName=_Style._allStyles[i];this._defineAccessor(styleName);}this.__defineGetter__("length",hitch(this,this._getLength));}else{var htcStyle=this._element._htcNode.style;var parsedStyle=this._fromStyleString();for(var i=0;i<parsedStyle.length;i++){var styleName=this._toCamelCase(parsedStyle[i].styleName);var styleValue=parsedStyle[i].styleValue;htcStyle[styleName]=styleValue;}htcStyle.length=0;this.length=0;htcStyle.item=hitch(this,this.item);htcStyle.setProperty=hitch(this,this.setProperty);htcStyle.getPropertyValue=hitch(this,this.getPropertyValue);this._changeListener=hitch(this,this._onPropertyChange);this._element._htcNode.attachEvent("onpropertychange",this._changeListener);}},_defineAccessor:function(styleName){var self=this;this.__defineGetter__(styleName,function(){return self._getStyleAttribute(styleName);});this.__defineSetter__(styleName,function(styleValue){return self._setStyleAttribute(styleName,styleValue);});},_setStyleAttribute:function(styleName,styleValue){var stylePropName=this._fromCamelCase(styleName);var parsedStyle=this._fromStyleString();var foundStyle=false;for(var i=0;i<parsedStyle.length;i++){if(parsedStyle[i].styleName===stylePropName){parsedStyle[i].styleValue=styleValue;foundStyle=true;break;}}if(!foundStyle){parsedStyle.push({styleName:stylePropName,styleValue:styleValue});}var styleString=this._toStyleString(parsedStyle);this._element._nodeXML.setAttribute("style",styleString);this._element._attributes._style=styleString;if(isIE){var htcStyle=this._element._htcNode.style;if(!foundStyle){htcStyle.length++;this.length++;}this._ignoreStyleChanges=true;htcStyle[styleName]=styleValue;this._ignoreStyleChanges=false;}if(this._element._attached&&this._element._passThrough){var flashStr=FlashHandler._encodeFlashData(styleValue);this._element._handler.sendToFlash("jsSetAttribute",[this._element._guid,true,null,stylePropName,flashStr]);}},_getStyleAttribute:function(styleName){var stylePropName=this._fromCamelCase(styleName);if(this._element._attached&&this._element._passThrough&&!this._element._handler._redrawManager.isSuspended()){var value=this._element._handler.sendToFlash("jsGetAttribute",[this._element._guid,true,false,null,stylePropName]);return value;}else{var parsedStyle=this._fromStyleString();for(var i=0;i<parsedStyle.length;i++){if(parsedStyle[i].styleName===stylePropName){return parsedStyle[i].styleValue;}}return null;}},_fromStyleString:function(){var styleValue=this._element._nodeXML.getAttribute("style");if(styleValue===null||styleValue===undefined){return[];}var baseStyles;if(styleValue.indexOf(";")==-1){baseStyles=[styleValue];}else{baseStyles=styleValue.split(/\s*;\s*/);if(!baseStyles[baseStyles.length-1]){baseStyles=baseStyles.slice(0,baseStyles.length-1);}}var results=[];for(var i=0;i<baseStyles.length;i++){var style=baseStyles[i];var styleSet=style.split(":");if(styleSet.length==2){var attrName=styleSet[0];var attrValue=styleSet[1];attrName=attrName.replace(/^\s+/,"");attrValue=attrValue.replace(/^\s+/,"");var entry={styleName:attrName,styleValue:attrValue};results.push(entry);}}return results;},_toStyleString:function(parsedStyle){var results="";for(var i=0;i<parsedStyle.length;i++){results+=parsedStyle[i].styleName+": ";results+=parsedStyle[i].styleValue+";";if(i!=(parsedStyle.length-1)){results+=" ";}}return results;},_fromCamelCase:function(styleName){return styleName.replace(/([A-Z])/g,"-$1").toLowerCase();},_toCamelCase:function(stylePropName){if(stylePropName.indexOf("-")==-1){return stylePropName;}var results="";var sections=stylePropName.split("-");results+=sections[0];for(var i=1;i<sections.length;i++){results+=sections[i].charAt(0).toUpperCase()+sections[i].substring(1);}return results;},setProperty:function(stylePropName,styleValue,priority){var styleName=this._toCamelCase(stylePropName);this._setStyleAttribute(styleName,styleValue);return styleValue;},getPropertyValue:function(stylePropName){var styleName=this._toCamelCase(stylePropName);return this._getStyleAttribute(styleName);},item:function(index){var parsedStyle=this._fromStyleString();return parsedStyle[index].styleName;},_getLength:function(){var parsedStyle=this._fromStyleString();return parsedStyle.length;},_normalizeStyle:function(){if(!this._element._nodeXML.getAttribute("style")){return;}if(!/[A-Z]/.test(this._element._nodeXML.getAttribute("style"))){return;}var parsedStyle=this._fromStyleString();for(var i=0;i<parsedStyle.length;i++){parsedStyle[i].styleName=parsedStyle[i].styleName.toLowerCase();if(parsedStyle[i].styleValue.indexOf("url(")==-1){parsedStyle[i].styleValue=parsedStyle[i].styleValue.toLowerCase();}}var results="";for(var i=0;i<parsedStyle.length;i++){results+=parsedStyle[i].styleName+": "+parsedStyle[i].styleValue+"; ";}if(results.charAt(results.length-1)==" "){results=results.substring(0,results.length-1);}var origPassThrough=this._element._passThrough;this._element._passThrough=false;this._element.setAttribute("style",results);this._element._passThrough=origPassThrough;},_onPropertyChange:function(){if(this._ignoreStyleChanges){return;}var prop=window.event.propertyName;if(prop&&/^style\./.test(prop)&&prop!="style.length"){var styleName=prop.match(/^style\.(.*)$/)[1];var styleValue=this._element._htcNode.style[styleName];this._setStyleAttribute(styleName,styleValue);}}});function _SVGObject(svgNode,handler){this._handler=handler;this._svgNode=svgNode;this._scriptsToExec=[];for(var i=0;this._svgNode._listeners&&i<this._svgNode._listeners.length;i++){var wrappedListener=(function(handler,listener){return function(){listener.apply(handler.flash);};})(this._handler,this._svgNode._listeners[i]);svgweb.addOnLoad(wrappedListener);}this.url=this._svgNode.getAttribute("src");if(!this.url){this.url=this._svgNode.getAttribute("data");}this._fetchURL(this.url,hitch(this,function(svgStr){var results=svgweb._cleanSVG(svgStr,false,false);this._svgString=results.svg;this._xml=results.xml;this.document=new _Document(this._xml,this._handler);var nodeXML=this._xml.documentElement;this._savedParams=this._getPARAMs(this._svgNode);var inserter=new FlashInserter("object",document,this._xml.documentElement,this._svgNode,this._handler);}),hitch(this,this.fallback));}extend(_SVGObject,{_scriptsToExec:null,_fetchURL:function(url,onSuccess,onFailure){var req=xhrObj();if(isIE){url+=(url.indexOf("?")==-1)?"?":"&";url+=new Date().getTime();}req.onreadystatechange=function(){if(req.readyState==4){if(req.status==200){onSuccess(req.responseText);}else{onFailure(req.status+": "+req.statusText);}req=null;}};req.open("GET",url,true);req.send(null);},_fallback:function(error){console.log("onError (fallback), error="+error);},_onFlashLoaded:function(msg){this._handler.flash=document.getElementById(this._handler.flashID);if(this._savedParams.length){for(var i=0;i<this._savedParams.length;i++){var param=this._savedParams[i];this._handler.flash.appendChild(param);param=null;}this._savedParams=null;}this._handler.flash.top=this._handler.flash.parent=window;if(!isIE){this._handler.sendToFlash("jsHandleLoad",[this._getRelativeTo("object"),this._getRelativeTo("page"),this._handler._explicitWidth,this._handler._explicitHeight,false,this._svgString]);}else{this._dummyNode=document.createElement("svg:__force__load");this._dummyNode._handler=this._handler;this._readyStateListener=hitch(this,this._onHTCLoaded);this._dummyNode.attachEvent("onreadystatechange",this._readyStateListener);var head=document.getElementsByTagName("head")[0];head.appendChild(this._dummyNode);}},_onHTCLoaded:function(){var head=document.getElementsByTagName("head")[0];head.removeChild(this._dummyNode);this._dummyNode.detachEvent("onreadystatechange",this._readyStateListener);this._dummyNode=null;head=null;this._handler.sendToFlash("jsHandleLoad",[this._getRelativeTo("object"),this._getRelativeTo("page"),this._handler._explicitWidth,this._handler._explicitHeight,false,this._svgString]);},_onRenderingFinished:function(msg){this._handler.flash.style.visibility="visible";this._handler.document=new _Document(this._xml,this._handler);var rootXML=this._xml.documentElement;var rootID=rootXML.getAttribute("id");var root=new _SVGSVGElement(rootXML,null,null,this._handler);var doc=this._handler.document;doc.documentElement=root._getProxyNode();doc.rootElement=root._getProxyNode();doc._nodeById["_"+rootID]=root;this._handler.flash.contentDocument=doc;this._handler.window=new _SVGWindow(this._handler);doc.defaultView=this._handler.window;var onload=root.getAttribute("onload");if(onload){onload="(function(){"+onload+"}).apply(document.documentElement);";this._scriptsToExec.push(onload);}var finalScript="";for(var i=0;i<this._scriptsToExec.length;i++){finalScript+=this._scriptsToExec[i]+"\n";}this._executeScript(finalScript);this._handler._loaded=true;this._handler.fireOnLoad(this._handler.id,"object");},_getRelativeTo:function(toWhat){var results="";if(toWhat=="object"){var pathname=this.url.replace(/[^:]*:\/\/[^\/]*/).match(/\/?[^\?\#]*/)[0];if(pathname&&pathname.length>0&&pathname.indexOf("/")!=-1){results=pathname.replace(/\/([^/]*)$/,"/");}}else{var pathname=window.location.pathname.toString();if(pathname&&pathname.length>0&&pathname.indexOf("/")!=-1){results=pathname.replace(/\/([^/]*)$/,"/");}}return results;},_executeScript:function(script){var addToTop='var __svgHandler = top.svgweb.handlers["'+this._handler.id+'"];\nwindow.svgns = "'+svgns+'";\nwindow.xlinkns = "'+xlinkns+'";\n';var timeoutOverride="window._timeoutIDs = [];\nwindow._setTimeout = window.setTimeout;\nwindow.setTimeout = \n       (function() {\n          return function(f, ms) {\n            var timeID = window._setTimeout(f, ms);\n            window._timeoutIDs.push(timeID);\n            return timeID;\n          };\n        })();\n";var intervalOverride="window._intervalIDs = [];\nwindow._setInterval = window.setInterval;\nwindow.setInterval = \n       (function() {\n          return function(f, ms) {\n            var timeID = window._setInterval(f, ms);\n            window._intervalIDs.push(timeID);\n            return timeID;\n          };\n        })();\n";script=addToTop+timeoutOverride+intervalOverride+"\n\n"+script;script=script.replace(/top\.document/g,"top.DOCUMENT");script=script.replace(/top\.window/g,"top.WINDOW");script=script.replace(/(^|[^A-Za-z0-9_])document(\.|'|"|\,| |\))/g,"$1__svgHandler.document$2");script=script.replace(/window\.(location|addEventListener|onload|frameElement)/g,"__svgHandler.window.$1");script=script.replace(/top\.DOCUMENT/g,"top.document");script=script.replace(/top\.WINDOW/g,"top.window");var iframe=document.createElement("iframe");iframe.setAttribute("src","about:blank");iframe.style.position="absolute";iframe.style.top="-1000px";iframe.style.left="-1000px";var body=document.getElementsByTagName("body")[0];body.appendChild(iframe);var iframeDoc=(iframe.contentDocument)?iframe.contentDocument:iframe.contentWindow.document;var iframeWin=iframe.contentWindow;this._handler.document.defaultView=iframeWin;iframeDoc.write("<script>"+script+"<\/script>");iframeDoc.close();this._handler.window._fireOnload();},_getPARAMs:function(svgNode){var params=[];for(var i=0;i<svgNode.childNodes.length;i++){var child=svgNode.childNodes[i];if(child.nodeName.toUpperCase()=="PARAM"){params.push(child.cloneNode(false));}}return params;}});function _SVGWindow(handler){this._handler=handler;this.fake=true;this.frameElement=this._handler.flash;this.location=this._createLocation();this.alert=window.alert;this.top=this.parent=window;this._onloadListeners=[];}extend(_SVGWindow,{addEventListener:function(type,listener,capture){if(type=="load"||type=="SVGLoad"){this._onloadListeners.push(listener);}},_fireOnload:function(){for(var i=0;i<this._onloadListeners.length;i++){try{this._onloadListeners[i]();}catch(exp){console.log("The following exception occurred from an SVG onload listener: "+(exp.message||exp));}}if(this.onload){try{this.onload();}catch(exp){console.log("The following exception occurred from an SVG onload listener: "+(exp.message||exp));}}},_createLocation:function(fakeLocation){var loc={};var url=this._handler._svgObject.url;var windowLocation;if(fakeLocation){windowLocation=fakeLocation;}else{windowLocation=window.location;}if(/^http/.test(url)){}else{if(url.charAt(0)=="/"){url=windowLocation.protocol+"//"+windowLocation.host+url;}else{if(windowLocation.pathname.indexOf("/")==-1){url=windowLocation.protocol+"//"+windowLocation.host+"/"+url;}else{var relativeTo=windowLocation.pathname;for(var i=relativeTo.length-1;i>=0;i--){if(relativeTo.charAt(i)=="/"){break;}relativeTo=relativeTo.substring(0,i);}url=windowLocation.protocol+"//"+windowLocation.host+relativeTo+url;}}}var results=url.match(/^(https?:)\/\/([^\/:]*):?([0-9]*)([^\?#]*)([^#]*)(#.*)?$/);loc.protocol=(results[1])?results[1]:windowLocation.href;if(loc.protocol.charAt(loc.protocol.length-1)!=":"){loc.protocol+=":";}loc.hostname=results[2];loc.port="";if(results[3]){loc.port=results[3];}var sameDomain=true;if(loc.protocol!=windowLocation.protocol||loc.hostname!=windowLocation.hostname||(loc.port&&loc.port!=windowLocation.port)){sameDomain=false;}if(sameDomain&&!loc.port){loc.port=windowLocation.port;}if(loc.port){loc.host=loc.hostname+":"+loc.port;}else{loc.host=loc.hostname;}loc.pathname=(results[4])?results[4]:"";loc.search=(results[5])?results[5]:"";loc.hash=(results[6])?results[6]:"";loc.href=loc.protocol+"//"+loc.host+loc.pathname+loc.search+loc.hash;loc.toString=function(){return this.protocol+"//"+this.host+this.pathname+this.search+this.hash;};return loc;}});function FlashInserter(embedType,doc,nodeXML,replaceMe,handler,htcNode){this._embedType=embedType;this._nodeXML=nodeXML;this._replaceMe=replaceMe;this._handler=handler;this._setupFlash(doc,htcNode);}extend(FlashInserter,{_setupFlash:function(doc,htcNode){var size=this._determineSize();var background=this._determineBackground();var style=this._determineStyle();var className=this._determineClassName();var elementID;if(this._embedType=="script"){elementID=this._nodeXML.getAttribute("id");this._handler.flashID=elementID+"_flash";}else{if(this._embedType=="object"){elementID=this._replaceMe.getAttribute("id");this._handler.flashID=elementID;}}var flash=this._createFlash(size,elementID,background,style,className,doc);if(isIE){this._insertFlashIE(flash,size,background,style,className,htcNode,doc);}else{this._insertFlash(flash);}},_insertFlash:function(flash){var div=document.createElement("div");div.innerHTML=flash;var flashObj=div.childNodes[0];div.removeChild(flashObj);for(var i=0;i<flashObj.childNodes.length;i++){var check=flashObj.childNodes[i];if(check.nodeName.toUpperCase()=="EMBED"){flashObj=check;break;}}this._replaceMe.parentNode.replaceChild(flashObj,this._replaceMe);return flashObj;},_insertFlashIE:function(flash,size,background,style,className,htcNode,htcDoc){if(this._embedType=="object"){this._replaceMe.outerHTML=flash;}else{if(this._embedType=="script"){htcNode.style.width=size.width;htcNode.style.height=size.height;var rules=style.split(";");for(var i=0;i<rules.length;i++){var rule=rules[i].split(":");if(!rules[i]||rules[i].indexOf(":")==-1){continue;}var propName=rule[0].replace(/^\s*|\s*$/,"");var propValue=rule[1].replace(/^\s*|\s*$/,"");htcNode.style[propName]=propValue;}if(className){htcNode.className=className;}var html=htcDoc.createElement("html");var body=htcDoc.createElement("body");var div=htcDoc.createElement("div");body.appendChild(div);html.appendChild(body);var defaults=htcNode._getHTCDefaults();defaults.viewLink=html.document;this._shadowDoc=html.document;if(background.transparent){body.style.backgroundColor="transparent";}html=null;body=null;(function(div,flash){window.setTimeout(function(){div.outerHTML=flash;div=null;},1);})(div,flash);}}},_determineSize:function(){var width="100%",height="100%";if(this._embedType=="object"&&this._replaceMe.getAttribute("width")){width=this._replaceMe.getAttribute("width");this._handler._explicitWidth=width;}if(this._embedType=="object"&&this._replaceMe.getAttribute("height")){height=this._replaceMe.getAttribute("height");this._handler._explicitHeight=height;}if(width&&width!="100%"&&height&&height!="100%"){return{width:width,height:height};}var xmlWidth=this._nodeXML.getAttribute("width");var xmlHeight=this._nodeXML.getAttribute("height");if(xmlWidth){width=xmlWidth;}if(xmlHeight){height=xmlHeight;}if(xmlWidth&&xmlWidth.indexOf("%")==-1&&xmlHeight&&xmlHeight.indexOf("%")==-1){return{width:width,height:height};}if(this._nodeXML.getAttribute("viewBox")){var viewBox=this._nodeXML.getAttribute("viewBox").split(/\s+|,/);var boxX=viewBox[0];var boxY=viewBox[1];var boxWidth=viewBox[2];var boxHeight=viewBox[3];width=boxWidth-boxX;height=boxHeight-boxY;}return{width:width,height:height};},_determineBackground:function(){var transparent=false;var color=null;var style=this._nodeXML.getAttribute("style");if(style&&style.indexOf("background-color")!=-1){var m=style.match(/background\-color:\s*([^;]*)/);if(m){color=m[1];}}if(color===null){transparent=true;}return{color:color,transparent:transparent};},_determineStyle:function(){var style=this._nodeXML.getAttribute("style");if(!style){style="";}if(this._embedType=="script"&&style.indexOf("display:")==-1){style+="display: inline;";}if(this._embedType=="script"&&style.indexOf("overflow:")==-1){style+="overflow: hidden;";}return style;},_determineClassName:function(){var className=this._nodeXML.getAttribute("class");if(!className){return"embedssvg";}else{return className+" embedssvg";}},_createFlash:function(size,elementID,background,style,className,doc){var flashVars="uniqueId="+encodeURIComponent(elementID)+"&sourceType=string&scaleMode=showAll_svg&debug=true&svgId="+encodeURIComponent(elementID);var src=svgweb.libraryPath+"svg.swf";var protocol=window.location.protocol;if(protocol.charAt(protocol.length-1)==":"){protocol=protocol.substring(0,protocol.length-1);}var flash='<object\n classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"\n codebase="'+protocol+'://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0"\n width="'+size.width+'"\n height="'+size.height+'"\n id="'+this._handler.flashID+'"\n name="'+this._handler.flashID+'"\n style="'+style+'"\n class="'+className+'"\n >\n <param name="allowScriptAccess" value="always"></param>\n <param name="movie" value="'+src+'"></param>\n <param name="quality" value="high"></param>\n <param name="FlashVars" value="'+flashVars+'"></param>\n '+(background.color?'<param name="bgcolor" value="'+background.color+'"></param>\n ':"")+(background.transparent?'<param name="wmode" value="transparent"></param>\n ':"")+'<embed src="'+src+'" quality="high" '+(background.color?'bgcolor="'+background.color+'" \n':"")+(background.transparent?'wmode="transparent" \n':"")+'width="'+size.width+'" height="'+size.height+'" id="'+this._handler.flashID+'" name="'+this._handler.flashID+'" swLiveConnect="true" allowScriptAccess="always" type="application/x-shockwave-flash" FlashVars="'+flashVars+'" pluginspage="'+protocol+'://www.macromedia.com/go/getflashplayer" style="'+style+'"\n class="'+className+'"\n  /></object>';return flash;}});function _SVGSVGElement(nodeXML,svgString,scriptNode,handler){_Element.apply(this,["svg",null,svgns,nodeXML,handler,true]);this._nodeXML=nodeXML;this._svgString=svgString;this._scriptNode=scriptNode;if(this._handler.type=="script"){var rootID=this._nodeXML.getAttribute("id");var doc=this._handler.document;doc._nodeById["_"+rootID]=this;}if(isIE&&this._handler.type=="script"){var svgDOM=document.createElement("svg:svg");svgDOM._fakeNode=this;svgDOM._handler=handler;svgDOM._realParentNode=scriptNode.parentNode;svgDOM._realPreviousSibling=scriptNode.previousSibling;svgDOM._realNextSibling=scriptNode.nextSibling;this._htcNode=svgDOM;this._addRedrawMethods();this.style=new _Style(this);this._readyStateListener=hitch(this,this._onHTCLoaded);this._htcNode.attachEvent("onreadystatechange",this._readyStateListener);scriptNode.parentNode.replaceChild(svgDOM,scriptNode);}else{if(!isIE&&this._handler.type=="script"){this._inserter=new FlashInserter("script",document,this._nodeXML,this._scriptNode,this._handler);}else{if(isIE&&this._handler.type=="object"){this._addRedrawMethods();}}}}_SVGSVGElement.prototype=new _Element;extend(_SVGSVGElement,{suspendRedraw:function(ms){return this._handler._redrawManager.suspendRedraw(ms);},unsuspendRedraw:function(id){this._handler._redrawManager.unsuspendRedraw(id);},unsuspendRedrawAll:function(){this._handler._redrawManager.unsuspendRedrawAll();},forceRedraw:function(){},nearestViewportElement:null,farthestViewportElement:null,getBBox:function(){},getCTM:function(){},getScreenCTM:function(){},getTransformToElement:function(element){},_onHTCLoaded:function(){this._htcNode.detachEvent("onreadystatechange",this._readyStateListener);var elemDoc=this._htcNode._getHTCDocument();this._inserter=new FlashInserter("script",elemDoc,this._nodeXML,this._scriptNode,this._handler,this._htcNode);this.style._ignoreStyleChanges=false;},_onFlashLoaded:function(msg){if(isIE){this._handler.flash=this._inserter._shadowDoc.getElementById(this._handler.flashID);this._inserter._shadowDoc=null;this._inserter=null;this._makeFlashCallable(this._handler.flash);}else{this._handler.flash=document.getElementById(this._handler.flashID);}this._handler.sendToFlash("jsHandleLoad",[this._getRelativeTo("object"),this._getRelativeTo("page"),null,null,true,this._svgString]);},_onRenderingFinished:function(msg){if(!isIE&&this._handler.type=="script"){this._handler.flash.documentElement=this;}var elementId=this._nodeXML.getAttribute("id");this._handler.fireOnLoad(elementId,"script");},_makeFlashCallable:function(flash){var callFunction=function(callMe){return function(){return eval(this.CallFunction('<invoke name="'+callMe+'" returntype="javascript">'+__flash__argumentsToXML(arguments,0)+"</invoke>"));};};flash.jsSetAttribute=callFunction("jsSetAttribute");flash.jsGetAttribute=callFunction("jsGetAttribute");flash.jsAddEventListener=callFunction("jsAddEventListener");flash.jsInsertBefore=callFunction("jsInsertBefore");flash.jsAddChildAt=callFunction("jsAddChildAt");flash.jsRemoveChild=callFunction("jsRemoveChild");flash.jsSetText=callFunction("jsSetText");flash.jsAppendChild=callFunction("jsAppendChild");flash.jsHandleLoad=callFunction("jsHandleLoad");flash.jsSuspendRedraw=callFunction("jsSuspendRedraw");flash.jsUnsuspendRedrawAll=callFunction("jsUnsuspendRedrawAll");},_getRelativeTo:function(){var results="";var pathname=window.location.pathname.toString();if(pathname&&pathname.length>0&&pathname.indexOf("/")!=-1){results=pathname.replace(/\/([^/]*)$/,"/");}return results;},_addRedrawMethods:function(){this._htcNode.suspendRedraw=(function(){return function(ms){return this._fakeNode.suspendRedraw(ms);};})();this._htcNode.unsuspendRedraw=(function(){return function(id){return this._fakeNode.unsuspendRedraw(id);};})();this._htcNode.unsuspendRedrawAll=(function(){return function(){return this._fakeNode.unsuspendRedrawAll();};})();this._htcNode.forceRedraw=(function(){return function(){return this._fakeNode.forceRedraw();};})();}});function _Document(xml,handler){_Node.apply(this,["#document",_Node.DOCUMENT_NODE,null,null,xml,handler],svgns);this._xml=xml;this._handler=handler;this._nodeById={};this._namespaces=this._getNamespaces();this.implementation=new _DOMImplementation();if(this._handler.type=="script"){this.defaultView=window;}else{if(this._handler.type=="object"){}}}_Document.prototype=new _Node;extend(_Document,{_nodeById:null,implementation:null,documentElement:null,createElementNS:function(ns,qname){var prefix=this._namespaces["_"+ns];if(prefix=="xmlns"||!prefix){prefix=null;}var node=new _Element(qname,prefix,ns);return node._getProxyNode();},createTextNode:function(data){var doc=FlashHandler._unattachedDoc;var nodeXML;if(isIE){nodeXML=doc.createElement("__text");}else{nodeXML=doc.createElementNS(svgnsFake,"__text");}nodeXML.appendChild(doc.createTextNode(data));var textNode=new _Node("#text",_Node.TEXT_NODE,null,null,nodeXML,this._handler);textNode._nodeValue=data;textNode.ownerDocument=this;return textNode._getProxyNode();},createDocumentFragment:function(forSVG){return new _DocumentFragment(this)._getProxyNode();},getElementById:function(id){var results=xpath(this._xml,null,'//*[@id="'+id+'"]');var nodeXML,node;if(results.length){nodeXML=results[0];}else{return null;}node=FlashHandler._getNode(nodeXML,this._handler);node._passThrough=true;return node;},getElementsByTagNameNS:function(ns,localName){var results=createNodeList();var matches;if(ns==""){ns=null;}if(ns==svgns){ns=svgnsFake;}if(this._xml.getElementsByTagNameNS){results=this._xml.getElementsByTagNameNS(ns,localName);}else{var prefix="xmlns";if(ns&&ns!="*"){prefix=this._namespaces["_"+ns];if(prefix===undefined){return createNodeList();}}var query;if(ns=="*"&&localName=="*"){query="//*";}else{if(ns=="*"){query="//*[namespace-uri()='*' and local-name()='"+localName+"']";}else{if(localName=="*"){query="//*[namespace-uri()='"+ns+"']";}else{query="//"+localName+" | //*[namespace-uri()='"+ns+"' and local-name()='"+localName+"']";}}}matches=xpath(this._xml,null,query,this._namespaces);if(matches!==null&&matches!==undefined&&matches.length>0){for(var i=0;i<matches.length;i++){results.push(matches[i]);}}}var nodes=createNodeList();for(var i=0;i<results.length;i++){var elem=FlashHandler._getNode(results[i],this._handler);elem._passThrough=true;nodes.push(elem);}return nodes;},_getNamespaces:function(){var results=[];var attrs=this._xml.documentElement.attributes;for(var i=0;i<attrs.length;i++){var attr=attrs[i];if(/^xmlns:?(.*)$/.test(attr.nodeName)){var m=attr.nodeName.match(/^xmlns:?(.*)$/);var prefix=(m[1]?m[1]:"xmlns");var namespaceURI=attr.nodeValue;if(!results["_"+prefix]){results["_"+prefix]=namespaceURI;results["_"+namespaceURI]=prefix;results.push(namespaceURI);}}}return results;}});function createNodeList(){var results=[];results.item=function(i){if(i>=this.length){return null;}else{return this[i];}};return results;}function createCharacterData(data){var results=(data!==undefined)?new String(data):new String();results.data=results.toString();return results;}function _SVGMatrix(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.d=d;this.e=e;this.f=f;}extend(_SVGMatrix,{multiply:function(secondMatrix){},inverse:function(){},translate:function(x,y){},scale:function(scaleFactor){},scaleNonUniform:function(scaleFactorX,scaleFactorY){},rotate:function(angle){},rotateFromVector:function(x,y){},flipX:function(){},flipY:function(){},skewX:function(angle){},skewY:function(angle){}});function _SVGLength(value){this.value=value;}function _SVGAnimatedLength(value){this.baseVal=value;this.animVal=undefined;}function _SVGTransform(type,matrix,angle){this.type=type;this.matrix=matrix;this.angle=angle;}mixin(_SVGTransform,{SVG_TRANSFORM_UNKNOWN:0,SVG_TRANSFORM_MATRIX:1,SVG_TRANSFORM_TRANSLATE:2,SVG_TRANSFORM_SCALE:3,SVG_TRANSFORM_ROTATE:4,SVG_TRANSFORM_SKEWX:5,SVG_TRANSFORM_SKEWY:6});extend(_SVGTransform,{type:null,matrix:null,angle:null,setMatrix:function(matrix){},setTranslate:function(tx,ty){},setScale:function(sx,sy){},setRotate:function(angle,cx,cy){},setSkewX:function(angle){},setSkewY:function(angle){}});function createSVGRect(x,y,width,height){return{x:parseFloat(x),y:parseFloat(y),width:parseFloat(width),height:parseFloat(height)};}function createSVGPoint(x,y){return{x:Number(x),y:Number(y)};}window.svgweb=new SVGWeb();})();
\ No newline at end of file
Index: src/main/webapp/svg.swf
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/svg.swf
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: src/main/webapp/icons/action.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/action.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/activity.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/activity.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/arrowleft.GIF
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/arrowleft.GIF
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/arrowright.GIF
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/arrowright.GIF
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/blue.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/blue.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/composite.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/composite.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/drools-large.PNG
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/drools-large.PNG
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/drools-query.GIF
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/drools-query.GIF
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/drools-rule.GIF
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/drools-rule.GIF
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/dsl.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/dsl.png
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/email.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/email.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/event.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/event.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/fault.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/fault.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/grey.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/grey.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/human_task.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/human_task.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/join.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/join.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/open.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/open.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/process_start.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/process_start.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/process_stop.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/process_stop.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/red.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/red.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/red_anime.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/red_anime.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/split.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/split.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/icons/yellow.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: src/main/webapp/icons/yellow.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:executable
   + *

Index: src/main/webapp/tools/config.html
===================================================================
--- src/main/webapp/tools/config.html	(revision 0)
+++ src/main/webapp/tools/config.html	(revision 0)
@@ -0,0 +1,147 @@
+<!doctype html>
+
+<html>
+  <head>
+    <style type="text/css">
+      .good {
+        background-color: lightgreen;
+      }
+      
+      .bad {
+        background-color: red;
+      }
+      
+      .important {
+        font-weight: bold;
+      }
+    </style>
+    
+    <script type="text/javascript">
+      /* 
+        Internet Explorer's list of standard XHR PROGIDS. 
+      */
+      var XHR_PROGIDS = [
+        'MSXML2.XMLHTTP.6.0', 'MSXML2.XMLHTTP.3.0', 'MSXML2.XMLHTTP',
+        'Microsoft.XMLHTTP'
+      ];
+
+      /*
+        Standard way to grab XMLHttpRequest object.
+      */
+      function xhrObj() {
+        if (typeof XMLHttpRequest != 'undefined') {
+          return new XMLHttpRequest();
+        } else if (ActiveXObject) {
+          var xhr = null;
+          var i; // save the good PROGID for quicker access next time
+          for (i = 0; i < XHR_PROGIDS.length && !xhr; ++i) {
+            try {
+              xhr = new ActiveXObject(XHR_PROGIDS[i]);
+            } catch(e) {}
+          }
+
+          if (!xhr) {
+            throw new Error('XMLHttpRequest object not available on this platform');
+          }
+
+          return xhr;
+        }
+      }
+      
+      var results = [];
+      
+      window.onload = function() {
+        fetch('../svg.swf', 'application/x-shockwave-flash', 
+              'swfResult', fetchCallback);
+        fetch('../svg.htc', 'text/x-component', 'htcResult', fetchCallback);
+      }
+      
+      function fetch(fileName, correctMimeType, resultsID, callback) {
+        var req = xhrObj();
+
+        // bust the cache since IE's XHR GET requests are wonky
+        fileName += '?' + new Date().getTime();
+
+        req.onreadystatechange = function() {
+          if (req.readyState == 4) {
+            var resultsNode = document.getElementById(resultsID);
+            if (req.status == 200) { // done
+              var mimeType = req.getResponseHeader('Content-Type');
+              if (mimeType == correctMimeType) {
+                resultsNode.className += ' good';
+                resultsNode.innerHTML = 'Good!';
+                callback(true);
+              } else {
+                resultsNode.className += ' bad';
+                resultsNode.innerHTML = 'Bad!';
+                callback(false);
+              }
+            } else { // error
+              resultsNode.className += ' bad';
+              resultsNode.innerHTML = '';
+              resultsNode.appendChild(document.createTextNode(
+                    'Failed: ' + req.status + ': ' + req.statusText));
+              callback(false);
+            }
+
+            req = null;
+          }
+        };
+
+        req.open('GET', fileName, true);
+        req.send(null);
+      }
+      
+      function fetchCallback(success) {
+        results.push(success);
+        
+        if (results.length == 2) {
+          var finalResults = true;
+          for (var i = 0; i < results.length; i++) {
+            if (!results[i]) {
+              finalResults = false;
+            }
+          }
+          
+          var totalResults = document.getElementById('totalResults');
+          if (finalResults) {
+            totalResults.className += ' good';
+            totalResults.innerHTML = 'Everything works!';
+          } else {
+            totalResults.className += ' bad';
+            totalResults.innerHTML = 'A MIME type is misconfigured!';
+          }
+        }
+      }
+    </script>
+  </head>
+  
+  <body>
+    <p>This page checks to make sure that your web server has its MIME types configured correctly. Upload it to your web server and then load this page in your web browser.</p>
+    
+    <p class="important">Web server configured correctly: <span id="totalResults">Checking...</span></p>
+    
+    <table id="resultsTable" border="1" cellpadding="5" cellpadding="5">
+      <tr>
+        <th>File Type</th>
+        <th>MIME Type</th>
+        <th>File Name</th>
+        <th>Works?</th>
+      </tr>
+      
+      <tr>
+        <td>Flash SWF</td>
+        <td>application/x-shockwave-flash</td>
+        <td>svg.swf</td>
+        <td id="swfResult" class="important">Checking...</td>
+      </tr>
+      
+      <tr>
+        <td>Microsoft Behavior HTC</td>
+        <td>text/x-component</td>
+        <td>svg.htc</td>
+        <td id="htcResult" class="important">Checking...</td>
+      </tr>
+    </table>
+  </body>
+</html>
\ No newline at end of file
Index: src/test/resources/hudson/drools/release-vote.rf
===================================================================
--- src/test/resources/hudson/drools/release-vote.rf	(revision 20976)
+++ src/test/resources/hudson/drools/release-vote.rf	(working copy)
@@ -25,10 +25,10 @@
         <type name="org.drools.process.core.datatype.impl.type.ListDataType" className="java.lang.String" />
       </variable>
       <variable name="Run" >
-        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="hudson.drools.RunWrapper" />
+        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="hudson.model.Run" />
       </variable>
       <variable name="build" >
-        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="hudson.drools.RunWrapper" />
+        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="hudson.model.Run" />
       </variable>
       <variable name="version" >
         <type name="org.drools.process.core.datatype.impl.type.StringDataType" />
@@ -54,7 +54,7 @@
       <mapping type="in" from="version" to="version" />
       <mapping type="out" from="Build" to="build" />
     </workItem>
-    <forEach id="3" name="For Each User" x="71" y="232" width="157" height="114" variableName="user" collectionExpression="Run.run.parent.usersWithBuildPermission" >
+    <forEach id="3" name="For Each User" x="71" y="232" width="157" height="114" variableName="user" collectionExpression="Run.parent.usersWithBuildPermission" >
       <nodes>
     <humanTask id="1" name="Vote" x="39" y="36" width="80" height="40" >
       <work name="Human Task" >
Index: src/test/resources/hudson/drools/staging-1.rf
===================================================================
--- src/test/resources/hudson/drools/staging-1.rf	(revision 20976)
+++ src/test/resources/hudson/drools/staging-1.rf	(working copy)
@@ -7,10 +7,10 @@
   <header>
     <variables>
       <variable name="build" >
-        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="hudson.drools.RunWrapper" />
+        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="hudson.model.Run" />
       </variable>
       <variable name="test" >
-        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="hudson.drools.RunWrapper" />
+        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="hudson.model.Run" />
       </variable>
     </variables>
   </header>
Index: src/test/resources/hudson/drools/staging-3.rf
===================================================================
--- src/test/resources/hudson/drools/staging-3.rf	(revision 20976)
+++ src/test/resources/hudson/drools/staging-3.rf	(working copy)
@@ -7,17 +7,17 @@
   <header>
     <variables>
       <variable name="build" >
-        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="hudson.drools.RunWrapper" />
+        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="hudson.model.Run" />
       </variable>
       <variable name="manualOverride" >
         <type name="org.drools.process.core.datatype.impl.type.BooleanDataType" />
         <value>false</value>
       </variable>
       <variable name="automatedTest" >
-        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="hudson.drools.RunWrapper" />
+        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="hudson.model.Run" />
       </variable>
       <variable name="anotherAutomatedTest" >
-        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="hudson.drools.RunWrapper" />
+        <type name="org.drools.process.core.datatype.impl.type.ObjectDataType" className="hudson.model.Run" />
       </variable>
     </variables>
   </header>
@@ -52,7 +52,7 @@
     <split id="6" name="Test Success ?" x="181" y="449" width="106" height="40" type="2" >
       <constraints>
         <constraint toNodeId="7" toType="DROOLS_DEFAULT" name="no" priority="2" type="code" dialect="java" >return true;</constraint>
-        <constraint toNodeId="15" toType="DROOLS_DEFAULT" name="yes" priority="1" type="code" dialect="java" >return automatedTest.isSuccess() &amp;&amp; anotherAutomatedTest.isSuccess();</constraint>
+        <constraint toNodeId="15" toType="DROOLS_DEFAULT" name="yes" priority="1" type="code" dialect="java" >return automatedTest.getResult()==hudson.model.Result.SUCCESS &amp;&amp; anotherAutomatedTest.getResult()==hudson.model.Result.SUCCESS;</constraint>
       </constraints>
     </split>
     <end id="7" name="Release Aborted" x="37" y="539" width="169" height="40" />
