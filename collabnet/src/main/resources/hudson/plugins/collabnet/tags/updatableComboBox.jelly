<!-- based on Hudson's /lib/form/editableComboBox.jelly -->
<!--
	<%@attribute name="id" required="true" %>
	<%@attribute name="clazz" required="false" %>
	<%@attribute name="name" required="false" %>
	<%@attribute name="value" required="false" %>
	<%@attribute name="items" type="java.lang.Object" description="Optional list of possible values" %>
        <%@attribute name="onchange" required="false" %>
-->
<!-- Tomcat doesn't like us using the attribute called 'class' -->
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:c="/com/collabnet/cubit/hudson/tags">
	<j:if test="${updatableComboBox_source_loaded==null}">
	  <script type="text/javascript" src="${request.contextPath}/scripts/utilities.js"></script>
	  <script type="text/javascript" src="${request.contextPath}/scripts/combobox.js"></script>
	  <j:set target="${requestScope}" property="updatableComboBox_source_loaded" value="true" />
	</j:if>

        <script>

<![CDATA[
          // fix for validation.  The combobox doesn't properly call the 
          // onchange after an item is selected.
          if (typeof ComboBox != "undefined" && ComboBox) {
            if (ComboBox.prototype.oldChooseSelection == undefined) {
              ComboBox.prototype.oldChooseSelection = 
                ComboBox.prototype.chooseSelection;
              ComboBox.prototype.chooseSelection = function() {
                this.oldChooseSelection();
                this.field.onchange();
              }
            }
          }  
]]> 
        </script>

	<input id="${attrs.id}" autocomplete="off" class="${attrs.clazz}"
         name="${attrs.name}" value="${attrs.value}"
         checkUrl="${attrs.checkUrl}" updateUrl="${attrs.updateUrl}" 
         onchange="${attrs.onchange}"/>
	<j:set target="${requestScope}" property="updatableComboBox" value="${attrs.id}" />
	<script type="text/javascript">
	  var ${id}_values = new Array();

	  <!-- fill in values -->
	  <j:if test="${items!=null}">
	    <j:forEach var="v" items="${items}">
	      ${id}_values.push("${v}");
	    </j:forEach>
	  </j:if>
	  <d:invokeBody />

<![CDATA[

	  function ${id}_Callback(value /*, comboBox*/) {
	    var items = new Array();
	    var candidates = ${id}_values;
	    if (value.length > 0) { // if no value, we wont provide anything
	      value = value.toLowerCase();
	      for (var i = 0; i < candidates.length; i++) {
	        if (candidates[i].toLowerCase().indexOf(value) == 0) {
	          items.push(candidates[i]);
	          if(items.length>20)
	            break; // 20 items in the list should be enough
	        }
	      }
	    }
	    return items; // equiv to: comboBox.setItems(items);
	  }

          function ${id}_update() {
             var elem = document.getElementById("${id}");
             var methodUrl = eval(elem.getAttribute("updateUrl"));
             new Ajax.Request(methodUrl, {
                method : "post",
                onComplete : function(x) {
                   var json = x.responseText.evalJSON(false);
                   ${id}_values = json["items"];
                }
             });
          }
]]>

	  <!-- IE doesn't like a combobox to be created before the page is fully loaded. -->
	  var onLoadFor${id} = function () {
            // make sure the id exists first
            field = document.getElementById("${id}");
            if (field != null) {
	        new ComboBox("${id}", ${id}_Callback);
                field.oldonfocus = field.onfocus;
                field.onfocus = function () {
                  field.oldonfocus();
                  ${id}_update();
                }                
            }
	  }
          // onDomReady is faster, but causes errors in IE by firing 
          // too early.
          YAHOO.util.Event.addListener(window, 'load', onLoadFor${id});
	</script>
</j:jelly>
