<?xml version="1.0" encoding="ISO-8859-1"?>

<document>

  <properties>
    <title>Headers</title>
    <author>Checkstyle Development Team</author>
  </properties>

  <body>
    <section name="Header">
      <subsection name="Description">
        <p>
          Checks that a source file begins with a specified header. Property
          <span class="code"> headerFile</span> specifies a file that contains
          the required header.  Alternatively, the header specification can be
          set directly in the <span class="code">header</span> property
          without the need for an external file.
        </p>

        <p>
          Property <span class="code">ignoreLines</span> specifies the line
          numbers to ignore when matching lines in a header file. This
          property is very useful for supporting headers that contain
          copyright dates. For example, consider the following header:
        </p>

        <source>
line 1: ////////////////////////////////////////////////////////////////////
line 2: // checkstyle:
line 3: // Checks Java source code for adherence to a set of rules.
line 4: // Copyright (C) 2002  Oliver Burn
line 5: ////////////////////////////////////////////////////////////////////
        </source>

        <p>
          Since the year information will change over time, you can tell
          Checkstyle to ignore line 4 by setting property <span
          class="code">ignoreLines</span> to <span class="code"> 4</span>.
        </p>
      </subsection>

      <subsection name="Properties">
        <table>
          <tr>
            <th>name</th>
            <th>description</th>
            <th>type</th>
            <th>default value</th>
          </tr>
          <tr>
            <td>headerFile</td>
            <td>name of the file containing the required header</td>
            <td><a href="property_types.html#string">string</a></td>
            <td><span class="default">null</span></td>
          </tr>
          <tr>
            <td>header</td>
            <td>
              the required header specified inline. Individual header lines
              must be separated by the string <span
              class="code">&quot;\n&quot;</span> (even on platforms with a
              different line separator), see examples below.
            </td>
            <td><a href="property_types.html#string">string</a></td>
            <td><span class="default">null</span></td>
          </tr>
          <tr>
            <td>ignoreLines</td>
            <td>line numbers to ignore</td>
            <td><a href="property_types.html#intSet">list of integers</a></td>
            <td><span class="default">{}</span></td>
          </tr>
        </table>
      </subsection>

      <subsection name="Example">
        <p>
          To configure the check to use header file <span
          class="code">&quot;java.header&quot;</span> and ignore lines <span
          class="code">2</span>, <span class="code">3</span>, and <span
          class="code"> 4</span>:
        </p>

        <source>
&lt;module name=&quot;Header&quot;&gt;
    &lt;property name=&quot;headerFile&quot; value=&quot;java.header&quot;/&gt;
    &lt;property name=&quot;ignoreLines&quot; value=&quot;2, 3, 4&quot;/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to verify that each file starts with the
          header
        </p>
        <source>
// Copyright (C) 2004 MyCompany
// All rights reserved
        </source>

        <p>
          without the need for an external header file:
        </p>
        <source>
&lt;module name=&quot;Header&quot;&gt;
    &lt;property name=&quot;header&quot;
              value=&quot;// Copyright (C) 2004 MyCompany\n// All rights reserved&quot;/&gt;
&lt;/module&gt;
        </source>
      </subsection>

      <subsection name="Package">
        <p> com.puppycrawl.tools.checkstyle.checks.header </p>
      </subsection>

      <subsection name="Parent Module">
        <p>
          <a href="config.html#treewalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="RegexpHeader">
      <subsection name="Description">
        <p>
          Checks the header of a java source file against a header that contains a
          <a
          href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html">regular
          expression</a> for each line of the source header.
        </p>

        <p>
          Rationale: In some projects <a href="#Header">checking against a
          fixed header</a> is not sufficient, e.g. the header might require a
          copyright line where the year information is not static.
        </p>

        <p>
          For example, consider the following header:
        </p>
        <source>
line  1: ^/{71}$
line  2: ^// checkstyle:$
line  3: ^// Checks Java source code for adherence to a set of rules\.$
line  4: ^// Copyright \(C\) \d\d\d\d  Oliver Burn$
line  5: ^// Last modification by \$Author.*\$$
line  6: ^/{71}$
line  7:
line  8: ^package
line  9:
line 10: ^import
line 11:
line 12: ^/\*\*
line 13: ^ \*([^/]|$)
line 14: ^ \*/
        </source>

        <p>
          Lines 1 and 6 demonstrate a more compact notation for 71 '/'
          characters. Line 4 enforces that the copyright notice includes a
          four digit year. Line 5 is an example how to enforce revision
          control keywords in a file header. Lines 12-14 is a template for
          javadoc (line 13 is so complicated to remove conflict with and of
          javadoc comment).
        </p>
      </subsection>

      <subsection name="Properties">
        <table>
          <tr>
            <th>name</th>
            <th>description</th>
            <th>type</th>
            <th>default value</th>
          </tr>
          <tr>
            <td>headerFile</td>
            <td>name of the file containing the required header</td>
            <td><a href="property_types.html#string">string</a></td>
            <td><span class="default">null</span></td>
          </tr>
          <tr>
            <td>header</td>
            <td>
              the required header specified inline. Individual header lines
              must be separated by the string <span
              class="code">&quot;\n&quot;</span> (even on platforms with a
              different line separator), and regular expressions must not span
              multiple lines.
            </td>
            <td><a href="property_types.html#string">string</a></td>
            <td><span class="default">null</span></td>
          </tr>
          <tr>
            <td>multiLines</td>
            <td>line numbers to repeat (zero or more times)</td>
            <td><a href="property_types.html#intSet">list of integers</a></td>
            <td><span class="default">{}</span></td>
          </tr>
        </table>
      </subsection>

      <subsection name="Example">
        <p>
          To configure the check to use header file <span
          class="code">&quot;java.header&quot;</span> and <span
          class="code">10</span> and <span class="code">13</span> muli-lines:
        </p>
        <source>
&lt;module name=&quot;RegexpHeader&quot;&gt;
    &lt;property name=&quot;headerFile&quot; value=&quot;java.header&quot;/&gt;
    &lt;property name=&quot;multiLines&quot; value=&quot;10, 13&quot;/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to verify that each file starts with the
          header
        </p>
        <source>
^// Copyright \(C\) (\d\d\d\d -)? 2004 MyCompany$
^// All rights reserved$
        </source>

        <p>
          without the need for an external header file:
        </p>
        <source>
&lt;module name=&quot;RegexpHeader&quot;&gt;
  &lt;property
    name=&quot;header&quot;
    value=&quot;^// Copyright \(C\) (\d\d\d\d -)? 2004 MyCompany$\n^// All rights reserved$&quot;/&gt;
&lt;/module&gt;
        </source>

        <p>
          <u>Note</u>: <span class="code">ignoreLines</span> property has been
          removed from this check to simplify it.  To make some line optional
          use &quot;^.*$&quot; regexp for this line.
        </p>
      </subsection>

      <subsection name="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.header
        </p>
      </subsection>

      <subsection name="Parent Module">
        <p>
          <a href="config.html#treewalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="CrossLanguageRegexpHeader">
      <subsection name="Description">
        <p>
          Checks the header of each source file against a header that contains a
          <a
          href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html">regular
          expression</a> for each line of the source header.
        </p>

        <p>
          This check is very similar to the <a href="#RegexpHeader">RegexpHeader check</a>
          above. However it has <a href="config.html#checker">Checker</a> as it's parent 
          module, so it is not limited to java source code, and allows checking headers
          of other file types as well.
        </p>

        <p>
          Different programming languages have different comment synatx rules, but all of them
          start a comment with a non-word character. Hence you can often use the non-word character
          class to abstract away the concrete comment syntax and allow checking the header for
          different languages with a single header definition.
          For example, consider the following header specification (note that this is not
          the full Apache licence header):
        </p>
        <source>
line 1: ^#!
line 2: ^&lt;\?xml.*&gt;$
line 3: ^\W*$
line 4: ^\W*Copyright 2006 The Apache Software Foundation or its licensors, as applicable\.$
line 5: ^\W*Licensed under the Apache License, Version 2\.0 \(the "License"\);$
line 6: ^\W*$  
        </source>

        <p>
          Lines 1 and 2 leave room for technical header lines, e.g. the "#!/bin/sh" line in
          Unix shell scripts, or the xml file header of XML files.
          Set the multiline property to "1, 2" so these lines can be ignored for file types
          where they do no apply.
          Lines 3 throgh 6 define the actual header content. Note how lines 2, 4 and 5 use escapes
          for characters that have special regexp semantics.
        </p>
      </subsection>

      <subsection name="Properties">
        <table>
          <tr>
            <th>name</th>
            <th>description</th>
            <th>type</th>
            <th>default value</th>
          </tr>
          <tr>
            <td>charset</td>
            <td>name of the file charset</td>
            <td><a href="property_types.html#string">String</a></td>
            <td>System property &quot;file.encoding&quot;</td>
          </tr>
          <tr>
            <td>fileExtensions</td>
            <td>file type extensions to identify the file types to check.
            Must only contain text files, not binary files like bitmap
            graphics.</td>
            <td><a href="property_types.html#stringSet">String Set</a></td>
            <td><span class="default">
                java, txt, properties, html, jsp, xml, wsdl,
                js, css,
                idl, c, cc, cpp, cxx, h, cs,
                sh, py, bat
            </span></td>
          </tr>
          <tr>
            <td>headerFile</td>
            <td>name of the file containing the required header</td>
            <td><a href="property_types.html#string">string</a></td>
            <td><span class="default">null</span></td>
          </tr>
          <tr>
            <td>header</td>
            <td>
              the required header specified inline. Individual header lines
              must be separated by the string <span
              class="code">&quot;\n&quot;</span> (even on platforms with a
              different line separator), and regular expressions must not span
              multiple lines.
            </td>
            <td><a href="property_types.html#string">string</a></td>
            <td><span class="default">null</span></td>
          </tr>
          <tr>
            <td>multiLines</td>
            <td>line numbers to repeat (zero or more times)</td>
            <td><a href="property_types.html#intSet">list of integers</a></td>
            <td><span class="default">{}</span></td>
          </tr>
        </table>
      </subsection>

      <subsection name="Example">
        <p>
          To configure the check to use header file <span
          class="code">&quot;apache.header&quot;</span> and <span
          class="code">1</span> and <span class="code">2</span> muli-lines:
        </p>
        <source>
&lt;module name=&quot;CrossLanguageRegexpHeader&quot;&gt;
    &lt;property name=&quot;headerFile&quot; value=&quot;apache.header&quot;/&gt;
    &lt;property name=&quot;multiLines&quot; value=&quot;1, 2&quot;/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to verify that each file starts with the
          header
        </p>
        <source>
^// Copyright \(C\) (\d\d\d\d -)? 2004 MyCompany$
^// All rights reserved$
        </source>

        <p>
          without the need for an external header file:
        </p>
        <source>
&lt;module name=&quot;CrossLanguageRegexpHeader&quot;&gt;
  &lt;property
    name=&quot;header&quot;
    value=&quot;^// Copyright \(C\) (\d\d\d\d -)? 2004 MyCompany$\n^// All rights reserved$&quot;/&gt;
&lt;/module&gt;
        </source>

      </subsection>

      <subsection name="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.header
        </p>
      </subsection>

      <subsection name="Parent Module">
        <p>
          <a href="config.html#checker">Checker</a>
        </p>
      </subsection>
    </section>
  </body>
</document>
