package com.ikokoon.persistence;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.neodatis.odb.ODB;
import org.neodatis.odb.ODBFactory;
import org.neodatis.odb.OID;
import org.neodatis.odb.Objects;
import org.neodatis.odb.core.query.IQuery;
import org.neodatis.odb.core.query.criteria.Where;
import org.neodatis.odb.core.query.nq.NativeQuery;
import org.neodatis.odb.impl.core.query.criteria.CriteriaQuery;

import com.ikokoon.IConstants;
import com.ikokoon.instrumentation.model.Package;
import com.ikokoon.toolkit.Toolkit;

/**
 * @author Michael Couck
 * @since 09.10.09
 * @version 01.00
 */
public class DataBaseNeodatis extends ADataBase implements IDataBase {

	/** The object database from Neodatis. */
	private ODB odb = ODBFactory.open(IConstants.DATABASE_FILE);

	/**
	 * {@inheritDoc}
	 */
	public <T> T persist(T t) {
		try {
			logger.debug("Persisting object : " + t);
			odb.store(t);
			odb.commit();
			List<Object> list = new ArrayList<Object>();
			setIds(t, t.getClass(), list);
			return t;
		} finally {
		}
	}

	/**
	 * {@inheritDoc}
	 */
	public <T> T find(Class<T> klass, Long id) {
		try {
			IQuery query = new CriteriaQuery(klass, Where.equal(IConstants.ID, id));
			return (T) find(query);
		} finally {
		}
	}

	/**
	 * {@inheritDoc}
	 */
	public <T> T find(final Class<T> klass, final Map<String, Object> parameters) {
		try {
			IQuery query = getQuery(klass, parameters);
			return (T) find(query);
		} finally {
		}
	}

	/**
	 * {@inheritDoc}
	 */
	private Object find(IQuery query) {
		Objects objects = odb.getObjects(query);
		if (objects.size() > 1) {
			throw new RuntimeException("The class id combination must be unique");
		}
		if (objects.size() == 1) {
			return objects.getFirst();
		}
		return null;
	}

	/**
	 * {@inheritDoc}
	 */
	public <T> List<T> find(Class<T> klass, Map<String, Object> parameters, int firstResult, int maxResults) {
		try {
			IQuery query = getQuery(klass, parameters);
			Objects<T> objects = odb.getObjects(query);
			return getResults(objects, firstResult, maxResults);
		} finally {
		}
	}

	/**
	 * {@inheritDoc}
	 */
	private <T> List<T> getResults(Objects<T> objects, int firstResult, int maxResults) {
		List<T> results = new ArrayList<T>();
		int index = 0;
		for (T t : objects) {
			if (index++ < firstResult) {
				continue;
			}
			if (index > maxResults) {
				break;
			}
			results.add(t);
		}
		return results;
	}

	/**
	 * {@inheritDoc}
	 */
	private <T> IQuery getQuery(final Class<T> klass, final Map<String, Object> parameters) {
		IQuery query = new NativeQuery() {
			public boolean match(Object object) {
				// logger.info("T : " + object + ":" + object.getClass().getName() + ", " + klass + ", " + object.getClass().equals(klass));
				if (!object.getClass().equals(klass)) {
					return false;
				}
				for (String key : parameters.keySet()) {
					Object value = parameters.get(key);
					Object fieldValue = Toolkit.getValue(object, key);
					// logger.info("Key : " + key + ", parameter : " + value + ", field value : " + fieldValue);
					if (value != null && !value.equals(fieldValue)) {
						return false;
					}
				}
				return true;
			}

			public Class getObjectType() {
				return klass;
			}
		};
		return query;
	}

	/**
	 * {@inheritDoc}
	 */
	public <T> List<T> find(Class<T> klass, int firstResult, int maxResults) {
		try {
			IQuery query = new CriteriaQuery(klass);
			Objects objects = odb.getObjects(query);
			return getResults(objects, firstResult, maxResults);
		} finally {
		}
	}

	/**
	 * {@inheritDoc}
	 */
	public <T> T merge(T t) {
		try {
			odb.store(t);
			odb.commit();
			return t;
		} finally {
		}
	}

	/**
	 * {@inheritDoc}
	 */
	public <T> T remove(Class<T> klass, Long id) {
		try {
			T t = find(klass, id);
			odb.delete(t);
			odb.commit();
			return t;
		} finally {
		}
	}

	/**
	 * {@inheritDoc}
	 */
	public boolean isClosed() {
		try {
			return odb.isClosed();
		} finally {
		}
	}

	/**
	 * {@inheritDoc}
	 */
	public void close() {
		try {
			logger.warn("Comitting and closing the database");
			odb.commit();
			odb.close();
		} finally {
		}
	}

	/**
	 * {@inheritDoc}
	 */
	public <T> T find(String queryName, Map<String, Object> parameters) {
		throw new RuntimeException("This method is for JPA, not OODB");
	}

	/**
	 * {@inheritDoc}
	 */
	public <T> List<T> find(Class<T> klass, String queryName, Map<String, Object> parameters, int firstResult, int maxResults) {
		throw new RuntimeException("This method is for JPA, not OODB");
	}

	/**
	 * {@inheritDoc}
	 */
	public int execute(String query) {
		throw new RuntimeException("This method is for JPA, not OODB");
	}

	/**
	 * This method sets the ids in a graph of objects. The objects need to be stored, perhaps using the top level object in the heirachy, then the
	 * database is consulted for it's uid for the object. The uid is set in the field that has the Identifier annotation on the setter method for the
	 * field.
	 * 
	 * @param <T>
	 *            the type of object
	 * @param object
	 *            the object to set the id for
	 * @param klass
	 *            the klass of object
	 * @param list
	 *            a list of already set id fields
	 */
	protected <T> void setIds(Object object, Class<? extends Object> klass, List<Object> list) {
		if (object == null) {
			return;
		}
		if (!object.getClass().getPackage().getName().equals(Package.class.getPackage().getName())) {
			return;
		}
		if (list.contains(object)) {
			return;
		}
		if (getId(klass, object) != null) {
			return;
		}
		list.add(object);

		OID oid = odb.getObjectId(object);
		Long id = oid.getObjectId();
		// Object dbObject = odb.getObjectFromId(oid);
		// logger.info("Object : " + object + ", " + dbObject + ", " + object.equals(dbObject));
		setId(object, object.getClass(), id, true);
		odb.store(object);
		odb.commit();

		Field[] fields = klass.getDeclaredFields();
		for (Field field : fields) {
			Object fieldValue = Toolkit.getValue(object, field.getName());
			if (fieldValue == null) {
				continue;
			}
			if (fieldValue instanceof Collection) {
				for (Object collectionObject : (Collection) fieldValue) {
					setIds(collectionObject, collectionObject.getClass(), list);
				}
				continue;
			}
			setIds(fieldValue, fieldValue.getClass(), list);
		}
	}

}