package com.ikokoon.persistence;

import java.io.File;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.config.ConfigScope;
import com.db4o.config.Configuration;
import com.db4o.query.Query;
import com.ikokoon.IConstants;
import com.ikokoon.instrumentation.model.Afferent;
import com.ikokoon.instrumentation.model.Efferent;
import com.ikokoon.instrumentation.model.Line;
import com.ikokoon.instrumentation.model.Method;
import com.ikokoon.instrumentation.model.Package;
import com.ikokoon.toolkit.Toolkit;

/**
 * The Db4o implementation for the persistant store. This class is just a front end for the persistance, simplifies the queries and provides some
 * protection from the inner workings of the persistance.
 * 
 * @author Michael Couck
 * @since 07.10.09
 * @version 01.00
 */
public class DataBaseDb4o extends ADataBase implements IDataBase {

	/** The persistant data store. */
	public ObjectContainer objectContainer;

	/**
	 * Default constructor will open the database on the IConstants.DATABASE_FILE, wherever that may be.
	 */
	public DataBaseDb4o() {
		this(null);
	}

	/**
	 * Constructor takes the fiele that is the database.
	 * 
	 * @param file
	 *            the file for the persistance
	 */
	public DataBaseDb4o(File file) {
		boolean index = System.getProperty(IConstants.INDEX_FIELDS) != null
				&& System.getProperty(IConstants.INDEX_FIELDS).equals(Boolean.TRUE.toString());
		open(file, index);
	}

	/**
	 * Opens the object container on the file specified. If the index parameter is true then the indexes are created for the objects in the database,
	 * otherwise they are not.
	 * 
	 * @param file
	 *            the file to open the database on
	 * @param index
	 *            whether to create the indexes for the fields in the objects
	 */
	private void open(File file, boolean index) {
		file = getFile(file);
		Configuration configuration = Db4o.newConfiguration();
		configuration.lockDatabaseFile(false);
		configuration.automaticShutDown(false);
		configuration.generateUUIDs(ConfigScope.GLOBALLY);
		// configuration.messageLevel(10);
		if (index) {
			logger.info("Indexing will be implemented on the database object fields.");
			configuration.objectClass(com.ikokoon.instrumentation.model.Package.class).objectField(IConstants.ID).indexed(true);
			configuration.objectClass(com.ikokoon.instrumentation.model.Class.class).objectField(IConstants.ID).indexed(true);
			configuration.objectClass(com.ikokoon.instrumentation.model.Method.class).objectField(IConstants.ID).indexed(true);
			configuration.objectClass(com.ikokoon.instrumentation.model.Method.class).objectField(IConstants.ID).indexed(true);
			configuration.objectClass(com.ikokoon.instrumentation.model.Line.class).objectField(IConstants.ID).indexed(true);

			configuration.objectClass(com.ikokoon.instrumentation.model.Package.class).objectField(IConstants.NAME).indexed(true);
			configuration.objectClass(com.ikokoon.instrumentation.model.Class.class).objectField(IConstants.NAME).indexed(true);
			configuration.objectClass(com.ikokoon.instrumentation.model.Method.class).objectField(IConstants.NAME).indexed(true);
			configuration.objectClass(com.ikokoon.instrumentation.model.Method.class).objectField(IConstants.DESCRIPTION).indexed(true);
			configuration.objectClass(com.ikokoon.instrumentation.model.Line.class).objectField(IConstants.NUMBER).indexed(true);
		} else {
			logger.info("Indexing will not be implemented on the database object fields.");
		}
		logger.warn("Opening database on file " + file.getAbsolutePath());
		objectContainer = Db4o.openFile(configuration, file.getAbsolutePath());
	}

	public int execute(String query) {
		return 0;
	}

	public <T> T find(Class<T> klass, Long id) {
		// open(file, index.index);
		try {
			Query query = objectContainer.query();
			// Decend to field and constrain to value
			query.constrain(klass);
			query.descend(IConstants.ID).constrain(id);
			ObjectSet<T> objectSet = query.execute();
			if (objectSet.hasNext()) {
				if (objectSet.size() > 1) {
					throw new RuntimeException("More than one result returned from id : " + id + ". The id must be unique.");
				}
				return objectSet.next();
			}
			return null;
		} finally {
			// close();
		}
	}

	public <T> T find(String queryName, Map<String, Object> parameters) {
		// open(file, index.index);
		try {
			Query query = objectContainer.query();
			setParameters(query, parameters);
			ObjectSet objectSet = query.execute();
			if (objectSet.hasNext()) {
				if (objectSet.size() > 1) {
					throw new RuntimeException("More than one result returned from parameters : " + parameters
							+ ". The parameters' combination must be unique.");
				}
				return (T) objectSet.next();
			}
			return null;
		} finally {
			// close();
		}
	}

	public <T> T find(Class<T> klass, Map<String, Object> parameters) {
		// open(file, index.index);
		try {
			Query query = objectContainer.query();
			query.constrain(klass);
			setParameters(query, parameters);
			ObjectSet objectSet = query.execute();
			if (objectSet.hasNext()) {
				if (objectSet.size() > 1) {
					throw new RuntimeException("More than one result returned from class : " + klass + ", and parameters : " + parameters
							+ ". The class/parameters combination must result in a unique object.");
				}
				return (T) objectSet.next();
			}
			return null;
		} finally {
			// close();
		}
	}

	public <T> List<T> find(Class<T> klass, String queryName, Map<String, Object> parameters, int firstResult, int maxResults) {
		// open(file, index.index);
		try {
			Query query = objectContainer.query();
			query.constrain(klass);
			setParameters(query, parameters);
			ObjectSet<T> objectSet = query.execute();
			List<T> results = new ArrayList<T>();
			int index = 0;
			for (T object : objectSet) {
				if (index++ < firstResult) {
					continue;
				}
				results.add(object);
				if (results.size() >= maxResults) {
					break;
				}
			}
			return results;
		} finally {
			// close();
		}
	}

	public <T> List<T> find(Class<T> klass, int firstResult, int maxResults) {
		// open(file, index.index);
		try {
			Query query = objectContainer.query();
			query.constrain(klass);
			ObjectSet<T> objectSet = query.execute();
			List<T> results = new ArrayList<T>();
			int index = 0;
			for (T object : objectSet) {
				if (index++ < firstResult) {
					continue;
				}
				results.add(object);
				if (results.size() >= maxResults) {
					break;
				}
			}
			return results;
		} finally {
			// close();
		}
	}

	public <T> T merge(T t) {
		// open(file, index.index);
		try {
			objectContainer.store(t);
			return t;
		} finally {
			// close();
		}
	}

	public <T> T persist(T t) {
		// open(file, index.index);
		try {
			objectContainer.store(t);
			List<Object> list = new ArrayList<Object>();
			setIds(t, t.getClass(), list);
			if (logger.isDebugEnabled()) {
				logger.debug("Persisted : " + t + ", class name : " + t.getClass().getName() + ", comitting now.");
			}
			objectContainer.commit();
			return t;
		} finally {
			// close();
		}
	}

	public <T> T remove(Class<T> klass, Long id) {
		// open(file, index.index);
		try {
			T t = find(klass, id);
			if (t != null) {
				objectContainer.delete(t);
			}
			return t;
		} finally {
			// close();
		}
	}

	public boolean isClosed() {
		return objectContainer.ext().isClosed();
	}

	public void close() {
		logger.warn("Closing database");
		if (!isClosed()) {
			objectContainer.commit();
			objectContainer.close();
		}
	}

	public <T> List<T> find(Class<T> klass, Map<String, Object> parameters, int firstResult, int maxResults) {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * Sets the parameters in the query.
	 * 
	 * @param query
	 *            the query for the database
	 * @param parameters
	 *            the key value pairs for the fields and values in the object to be searched for
	 */
	private void setParameters(Query query, Map<String, Object> parameters) {
		for (String key : parameters.keySet()) {
			Object value = parameters.get(key);
			query.descend(key).constrain(value);
		}
	}

	protected <T> void setIds(Object object, Class<? extends Object> klass, List<Object> list) {
		// Can't set the id on a null object
		if (object == null) {
			return;
		}
		// Only set the id on the model objects
		String packageName = Toolkit.classNameToPackageName(klass.getName());
		if (!packageName.equals(Package.class.getPackage().getName())) {
			return;
		}
		// Don't cycle the graph
		if (list.contains(object)) {
			return;
		}
		// Don't set the id if it is already set of course
		if (getId(klass, object) != null) {
			return;
		}
		list.add(object);

		// Get the id from the database, set it and store the object again
		Long id = objectContainer.ext().getID(object);
		setId(object, object.getClass(), id, false);
		objectContainer.store(object);

		// Do the fields for the object
		Field[] fields = klass.getDeclaredFields();
		for (Field field : fields) {
			Object fieldValue = Toolkit.getValue(object, field.getName());
			if (fieldValue == null) {
				continue;
			}
			if (fieldValue instanceof Collection) {
				for (Object collectionObject : (Collection) fieldValue) {
					setIds(collectionObject, collectionObject.getClass(), list);
				}
				continue;
			}
			setIds(fieldValue, fieldValue.getClass(), list);
		}
	}

	public static void main(String[] args) {
		ObjectContainer objectContainer = Db4o.openFile("C:/Eclipse/workspace/Findbugs/serenity/serenity.db");
		printData(Package.class, objectContainer);
		printData(com.ikokoon.instrumentation.model.Class.class, objectContainer);
		printData(Method.class, objectContainer);
		printData(Line.class, objectContainer);
		printData(Efferent.class, objectContainer);
		printData(Afferent.class, objectContainer);
	}

	private static void printData(java.lang.Class klass, ObjectContainer objectContainer) {
		ObjectSet<Package> objectSet = objectContainer.query(klass);
		for (Object object : objectSet) {
			System.out.println(object);
		}
	}

}